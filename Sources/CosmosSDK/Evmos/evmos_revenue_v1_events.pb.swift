// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: evmos/revenue/v1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventRegisterRevenue is an event emitted when a contract is registered to receive a percentage of tx fees.
public struct Evmos_Revenue_V1_EventRegisterRevenue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
  /// sending the transaction which deploys the contract
  public var deployerAddress: String = String()

  /// contract_address in hex format
  public var contractAddress: String = String()

  /// effective_withdrawer is the withdrawer address that is stored after the
  /// revenue registration is completed. It defaults to the deployer address if
  /// the withdrawer address in the msg is omitted. When omitted, the withdraw map
  /// doesn't need to be set.
  public var effectiveWithdrawer: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// EventUpdateRevenue is an event emitted when a withdrawer address is updated for a contract.
public struct Evmos_Revenue_V1_EventUpdateRevenue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// contract_address in hex format
  public var contractAddress: String = String()

  /// deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
  /// sending the transaction which deploys the contract
  public var deployerAddress: String = String()

  /// withdrawer_address is the bech32 address of account receiving the transaction fees
  public var withdrawerAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// EventCancelRevenue is an event emitted when a contract is unregistered from receiving tx fees.
public struct Evmos_Revenue_V1_EventCancelRevenue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
  /// sending the transaction which deploys the contract
  public var deployerAddress: String = String()

  /// contract_address in hex format
  public var contractAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// EventDistributeRevenue is an event emitted when a contract receives a percentage of tx fees.
public struct Evmos_Revenue_V1_EventDistributeRevenue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sender is the address of message sender.
  public var sender: String = String()

  /// contract address in hex format
  public var contract: String = String()

  /// withdrawer_address is the bech32 address of account receiving the transaction fees
  public var withdrawerAddress: String = String()

  /// amount of revenue distributed
  public var amount: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Evmos_Revenue_V1_EventRegisterRevenue: @unchecked Sendable {}
extension Evmos_Revenue_V1_EventUpdateRevenue: @unchecked Sendable {}
extension Evmos_Revenue_V1_EventCancelRevenue: @unchecked Sendable {}
extension Evmos_Revenue_V1_EventDistributeRevenue: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "evmos.revenue.v1"

extension Evmos_Revenue_V1_EventRegisterRevenue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventRegisterRevenue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deployer_address"),
    2: .standard(proto: "contract_address"),
    3: .standard(proto: "effective_withdrawer"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deployerAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.effectiveWithdrawer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deployerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.deployerAddress, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    if !self.effectiveWithdrawer.isEmpty {
      try visitor.visitSingularStringField(value: self.effectiveWithdrawer, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Revenue_V1_EventRegisterRevenue, rhs: Evmos_Revenue_V1_EventRegisterRevenue) -> Bool {
    if lhs.deployerAddress != rhs.deployerAddress {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.effectiveWithdrawer != rhs.effectiveWithdrawer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Evmos_Revenue_V1_EventUpdateRevenue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventUpdateRevenue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_address"),
    2: .standard(proto: "deployer_address"),
    3: .standard(proto: "withdrawer_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.deployerAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.withdrawerAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 1)
    }
    if !self.deployerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.deployerAddress, fieldNumber: 2)
    }
    if !self.withdrawerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.withdrawerAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Revenue_V1_EventUpdateRevenue, rhs: Evmos_Revenue_V1_EventUpdateRevenue) -> Bool {
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.deployerAddress != rhs.deployerAddress {return false}
    if lhs.withdrawerAddress != rhs.withdrawerAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Evmos_Revenue_V1_EventCancelRevenue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventCancelRevenue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deployer_address"),
    2: .standard(proto: "contract_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deployerAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deployerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.deployerAddress, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Revenue_V1_EventCancelRevenue, rhs: Evmos_Revenue_V1_EventCancelRevenue) -> Bool {
    if lhs.deployerAddress != rhs.deployerAddress {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Evmos_Revenue_V1_EventDistributeRevenue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventDistributeRevenue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "contract"),
    3: .standard(proto: "withdrawer_address"),
    4: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contract) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.withdrawerAddress) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 2)
    }
    if !self.withdrawerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.withdrawerAddress, fieldNumber: 3)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Revenue_V1_EventDistributeRevenue, rhs: Evmos_Revenue_V1_EventDistributeRevenue) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.contract != rhs.contract {return false}
    if lhs.withdrawerAddress != rhs.withdrawerAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
