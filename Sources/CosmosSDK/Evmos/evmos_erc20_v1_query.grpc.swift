//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: evmos/erc20/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Evmos_Erc20_V1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Evmos_Erc20_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol? { get }

  func tokenPairs(
    _ request: Evmos_Erc20_V1_QueryTokenPairsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Erc20_V1_QueryTokenPairsRequest, Evmos_Erc20_V1_QueryTokenPairsResponse>

  func tokenPair(
    _ request: Evmos_Erc20_V1_QueryTokenPairRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Erc20_V1_QueryTokenPairRequest, Evmos_Erc20_V1_QueryTokenPairResponse>

  func params(
    _ request: Evmos_Erc20_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Erc20_V1_QueryParamsRequest, Evmos_Erc20_V1_QueryParamsResponse>
}

extension Evmos_Erc20_V1_QueryClientProtocol {
  public var serviceName: String {
    return "evmos.erc20.v1.Query"
  }

  /// TokenPairs retrieves registered token pairs
  ///
  /// - Parameters:
  ///   - request: Request to send to TokenPairs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func tokenPairs(
    _ request: Evmos_Erc20_V1_QueryTokenPairsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Erc20_V1_QueryTokenPairsRequest, Evmos_Erc20_V1_QueryTokenPairsResponse> {
    return self.makeUnaryCall(
      path: Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPairs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenPairsInterceptors() ?? []
    )
  }

  /// TokenPair retrieves a registered token pair
  ///
  /// - Parameters:
  ///   - request: Request to send to TokenPair.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func tokenPair(
    _ request: Evmos_Erc20_V1_QueryTokenPairRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Erc20_V1_QueryTokenPairRequest, Evmos_Erc20_V1_QueryTokenPairResponse> {
    return self.makeUnaryCall(
      path: Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPair.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenPairInterceptors() ?? []
    )
  }

  /// Params retrieves the erc20 module params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func params(
    _ request: Evmos_Erc20_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Erc20_V1_QueryParamsRequest, Evmos_Erc20_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Evmos_Erc20_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Evmos_Erc20_V1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Evmos_Erc20_V1_QueryNIOClient")
public final class Evmos_Erc20_V1_QueryClient: Evmos_Erc20_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the evmos.erc20.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Evmos_Erc20_V1_QueryNIOClient: Evmos_Erc20_V1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the evmos.erc20.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Evmos_Erc20_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeTokenPairsCall(
    _ request: Evmos_Erc20_V1_QueryTokenPairsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Erc20_V1_QueryTokenPairsRequest, Evmos_Erc20_V1_QueryTokenPairsResponse>

  func makeTokenPairCall(
    _ request: Evmos_Erc20_V1_QueryTokenPairRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Erc20_V1_QueryTokenPairRequest, Evmos_Erc20_V1_QueryTokenPairResponse>

  func makeParamsCall(
    _ request: Evmos_Erc20_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Erc20_V1_QueryParamsRequest, Evmos_Erc20_V1_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Evmos_Erc20_V1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Evmos_Erc20_V1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeTokenPairsCall(
    _ request: Evmos_Erc20_V1_QueryTokenPairsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Erc20_V1_QueryTokenPairsRequest, Evmos_Erc20_V1_QueryTokenPairsResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPairs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenPairsInterceptors() ?? []
    )
  }

  public func makeTokenPairCall(
    _ request: Evmos_Erc20_V1_QueryTokenPairRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Erc20_V1_QueryTokenPairRequest, Evmos_Erc20_V1_QueryTokenPairResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPair.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenPairInterceptors() ?? []
    )
  }

  public func makeParamsCall(
    _ request: Evmos_Erc20_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Erc20_V1_QueryParamsRequest, Evmos_Erc20_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Erc20_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Evmos_Erc20_V1_QueryAsyncClientProtocol {
  public func tokenPairs(
    _ request: Evmos_Erc20_V1_QueryTokenPairsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Erc20_V1_QueryTokenPairsResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPairs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenPairsInterceptors() ?? []
    )
  }

  public func tokenPair(
    _ request: Evmos_Erc20_V1_QueryTokenPairRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Erc20_V1_QueryTokenPairResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPair.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenPairInterceptors() ?? []
    )
  }

  public func params(
    _ request: Evmos_Erc20_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Erc20_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Erc20_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Evmos_Erc20_V1_QueryAsyncClient: Evmos_Erc20_V1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'tokenPairs'.
  func makeTokenPairsInterceptors() -> [ClientInterceptor<Evmos_Erc20_V1_QueryTokenPairsRequest, Evmos_Erc20_V1_QueryTokenPairsResponse>]

  /// - Returns: Interceptors to use when invoking 'tokenPair'.
  func makeTokenPairInterceptors() -> [ClientInterceptor<Evmos_Erc20_V1_QueryTokenPairRequest, Evmos_Erc20_V1_QueryTokenPairResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Evmos_Erc20_V1_QueryParamsRequest, Evmos_Erc20_V1_QueryParamsResponse>]
}

public enum Evmos_Erc20_V1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "evmos.erc20.v1.Query",
    methods: [
      Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPairs,
      Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPair,
      Evmos_Erc20_V1_QueryClientMetadata.Methods.params,
    ]
  )

  public enum Methods {
    public static let tokenPairs = GRPCMethodDescriptor(
      name: "TokenPairs",
      path: "/evmos.erc20.v1.Query/TokenPairs",
      type: GRPCCallType.unary
    )

    public static let tokenPair = GRPCMethodDescriptor(
      name: "TokenPair",
      path: "/evmos.erc20.v1.Query/TokenPair",
      type: GRPCCallType.unary
    )

    public static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/evmos.erc20.v1.Query/Params",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Evmos_Erc20_V1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Evmos_Erc20_V1_QueryTestClient: Evmos_Erc20_V1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Erc20_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the TokenPairs RPC. This must be called
  /// before calling 'tokenPairs'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeTokenPairsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Erc20_V1_QueryTokenPairsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Erc20_V1_QueryTokenPairsRequest, Evmos_Erc20_V1_QueryTokenPairsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPairs.path, requestHandler: requestHandler)
  }

  public func enqueueTokenPairsResponse(
    _ response: Evmos_Erc20_V1_QueryTokenPairsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Erc20_V1_QueryTokenPairsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeTokenPairsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TokenPairs'
  public var hasTokenPairsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPairs.path)
  }

  /// Make a unary response for the TokenPair RPC. This must be called
  /// before calling 'tokenPair'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeTokenPairResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Erc20_V1_QueryTokenPairRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Erc20_V1_QueryTokenPairRequest, Evmos_Erc20_V1_QueryTokenPairResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPair.path, requestHandler: requestHandler)
  }

  public func enqueueTokenPairResponse(
    _ response: Evmos_Erc20_V1_QueryTokenPairResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Erc20_V1_QueryTokenPairRequest>) -> () = { _ in }
  ) {
    let stream = self.makeTokenPairResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TokenPair'
  public var hasTokenPairResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Erc20_V1_QueryClientMetadata.Methods.tokenPair.path)
  }

  /// Make a unary response for the Params RPC. This must be called
  /// before calling 'params'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Erc20_V1_QueryParamsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Erc20_V1_QueryParamsRequest, Evmos_Erc20_V1_QueryParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Erc20_V1_QueryClientMetadata.Methods.params.path, requestHandler: requestHandler)
  }

  public func enqueueParamsResponse(
    _ response: Evmos_Erc20_V1_QueryParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Erc20_V1_QueryParamsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Params'
  public var hasParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Erc20_V1_QueryClientMetadata.Methods.params.path)
  }
}

