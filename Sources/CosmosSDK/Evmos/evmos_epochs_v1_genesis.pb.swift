// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: evmos/epochs/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EpochInfo defines the message interface containing the relevant informations about
/// an epoch.
public struct Evmos_Epochs_V1_EpochInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// identifier of the epoch
  public var identifier: String = String()

  /// start_time of the epoch
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// duration of the epoch
  public var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  public var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  public mutating func clearDuration() {self._duration = nil}

  /// current_epoch is the integer identifier of the epoch
  public var currentEpoch: Int64 = 0

  /// current_epoch_start_time defines the timestamp of the start of the epoch
  public var currentEpochStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _currentEpochStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_currentEpochStartTime = newValue}
  }
  /// Returns true if `currentEpochStartTime` has been explicitly set.
  public var hasCurrentEpochStartTime: Bool {return self._currentEpochStartTime != nil}
  /// Clears the value of `currentEpochStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentEpochStartTime() {self._currentEpochStartTime = nil}

  /// epoch_counting_started reflects if the counting for the epoch has started
  public var epochCountingStarted: Bool = false

  /// current_epoch_start_height of the epoch
  public var currentEpochStartHeight: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _currentEpochStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// GenesisState defines the epochs module's genesis state.
public struct Evmos_Epochs_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// epochs is a slice of EpochInfo that defines the epochs in the genesis state
  public var epochs: [Evmos_Epochs_V1_EpochInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Evmos_Epochs_V1_EpochInfo: @unchecked Sendable {}
extension Evmos_Epochs_V1_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "evmos.epochs.v1"

extension Evmos_Epochs_V1_EpochInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EpochInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "start_time"),
    3: .same(proto: "duration"),
    4: .standard(proto: "current_epoch"),
    5: .standard(proto: "current_epoch_start_time"),
    6: .standard(proto: "epoch_counting_started"),
    7: .standard(proto: "current_epoch_start_height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identifier) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.currentEpoch) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._currentEpochStartTime) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.epochCountingStarted) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.currentEpochStartHeight) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 1)
    }
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.currentEpoch != 0 {
      try visitor.visitSingularInt64Field(value: self.currentEpoch, fieldNumber: 4)
    }
    try { if let v = self._currentEpochStartTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.epochCountingStarted != false {
      try visitor.visitSingularBoolField(value: self.epochCountingStarted, fieldNumber: 6)
    }
    if self.currentEpochStartHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.currentEpochStartHeight, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Epochs_V1_EpochInfo, rhs: Evmos_Epochs_V1_EpochInfo) -> Bool {
    if lhs.identifier != rhs.identifier {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.currentEpoch != rhs.currentEpoch {return false}
    if lhs._currentEpochStartTime != rhs._currentEpochStartTime {return false}
    if lhs.epochCountingStarted != rhs.epochCountingStarted {return false}
    if lhs.currentEpochStartHeight != rhs.currentEpochStartHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Evmos_Epochs_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenesisState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "epochs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.epochs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.epochs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.epochs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Epochs_V1_GenesisState, rhs: Evmos_Epochs_V1_GenesisState) -> Bool {
    if lhs.epochs != rhs.epochs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
