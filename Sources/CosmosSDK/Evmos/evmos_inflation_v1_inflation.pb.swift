// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: evmos/inflation/v1/inflation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// InflationDistribution defines the distribution in which inflation is
/// allocated through minting on each epoch (staking, incentives, community). It
/// excludes the team vesting distribution, as this is minted once at genesis.
/// The initial InflationDistribution can be calculated from the Evmos Token
/// Model like this:
/// mintDistribution1 = distribution1 / (1 - teamVestingDistribution)
/// 0.5333333         = 40%           / (1 - 25%)
public struct Evmos_Inflation_V1_InflationDistribution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// staking_rewards defines the proportion of the minted minted_denom that is
  /// to be allocated as staking rewards
  public var stakingRewards: String = String()

  /// usage_incentives defines the proportion of the minted minted_denom that is
  /// to be allocated to the incentives module address
  public var usageIncentives: String = String()

  /// community_pool defines the proportion of the minted minted_denom that is to
  /// be allocated to the community pool
  public var communityPool: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// ExponentialCalculation holds factors to calculate exponential inflation on
/// each period. Calculation reference:
/// periodProvision = exponentialDecay       *  bondingIncentive
/// f(x)            = (a * (1 - r) ^ x + c)  *  (1 + max_variance - bondedRatio *
/// (max_variance / bonding_target))
public struct Evmos_Inflation_V1_ExponentialCalculation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// a defines the initial value
  public var a: String = String()

  /// r defines the reduction factor
  public var r: String = String()

  /// c defines the parameter for long term inflation
  public var c: String = String()

  /// bonding_target
  public var bondingTarget: String = String()

  /// max_variance
  public var maxVariance: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Evmos_Inflation_V1_InflationDistribution: @unchecked Sendable {}
extension Evmos_Inflation_V1_ExponentialCalculation: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "evmos.inflation.v1"

extension Evmos_Inflation_V1_InflationDistribution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InflationDistribution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "staking_rewards"),
    2: .standard(proto: "usage_incentives"),
    3: .standard(proto: "community_pool"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.stakingRewards) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.usageIncentives) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.communityPool) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stakingRewards.isEmpty {
      try visitor.visitSingularStringField(value: self.stakingRewards, fieldNumber: 1)
    }
    if !self.usageIncentives.isEmpty {
      try visitor.visitSingularStringField(value: self.usageIncentives, fieldNumber: 2)
    }
    if !self.communityPool.isEmpty {
      try visitor.visitSingularStringField(value: self.communityPool, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Inflation_V1_InflationDistribution, rhs: Evmos_Inflation_V1_InflationDistribution) -> Bool {
    if lhs.stakingRewards != rhs.stakingRewards {return false}
    if lhs.usageIncentives != rhs.usageIncentives {return false}
    if lhs.communityPool != rhs.communityPool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Evmos_Inflation_V1_ExponentialCalculation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExponentialCalculation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "r"),
    3: .same(proto: "c"),
    4: .standard(proto: "bonding_target"),
    5: .standard(proto: "max_variance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.a) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.r) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.c) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.bondingTarget) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.maxVariance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.a.isEmpty {
      try visitor.visitSingularStringField(value: self.a, fieldNumber: 1)
    }
    if !self.r.isEmpty {
      try visitor.visitSingularStringField(value: self.r, fieldNumber: 2)
    }
    if !self.c.isEmpty {
      try visitor.visitSingularStringField(value: self.c, fieldNumber: 3)
    }
    if !self.bondingTarget.isEmpty {
      try visitor.visitSingularStringField(value: self.bondingTarget, fieldNumber: 4)
    }
    if !self.maxVariance.isEmpty {
      try visitor.visitSingularStringField(value: self.maxVariance, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Inflation_V1_ExponentialCalculation, rhs: Evmos_Inflation_V1_ExponentialCalculation) -> Bool {
    if lhs.a != rhs.a {return false}
    if lhs.r != rhs.r {return false}
    if lhs.c != rhs.c {return false}
    if lhs.bondingTarget != rhs.bondingTarget {return false}
    if lhs.maxVariance != rhs.maxVariance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
