//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: evmos/inflation/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query provides defines the gRPC querier service.
///
/// Usage: instantiate `Evmos_Inflation_V1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Evmos_Inflation_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol? { get }

  func period(
    _ request: Evmos_Inflation_V1_QueryPeriodRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Inflation_V1_QueryPeriodRequest, Evmos_Inflation_V1_QueryPeriodResponse>

  func epochMintProvision(
    _ request: Evmos_Inflation_V1_QueryEpochMintProvisionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Inflation_V1_QueryEpochMintProvisionRequest, Evmos_Inflation_V1_QueryEpochMintProvisionResponse>

  func skippedEpochs(
    _ request: Evmos_Inflation_V1_QuerySkippedEpochsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Inflation_V1_QuerySkippedEpochsRequest, Evmos_Inflation_V1_QuerySkippedEpochsResponse>

  func circulatingSupply(
    _ request: Evmos_Inflation_V1_QueryCirculatingSupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Inflation_V1_QueryCirculatingSupplyRequest, Evmos_Inflation_V1_QueryCirculatingSupplyResponse>

  func inflationRate(
    _ request: Evmos_Inflation_V1_QueryInflationRateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Inflation_V1_QueryInflationRateRequest, Evmos_Inflation_V1_QueryInflationRateResponse>

  func params(
    _ request: Evmos_Inflation_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Inflation_V1_QueryParamsRequest, Evmos_Inflation_V1_QueryParamsResponse>
}

extension Evmos_Inflation_V1_QueryClientProtocol {
  public var serviceName: String {
    return "evmos.inflation.v1.Query"
  }

  /// Period retrieves current period.
  ///
  /// - Parameters:
  ///   - request: Request to send to Period.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func period(
    _ request: Evmos_Inflation_V1_QueryPeriodRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Inflation_V1_QueryPeriodRequest, Evmos_Inflation_V1_QueryPeriodResponse> {
    return self.makeUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.period.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePeriodInterceptors() ?? []
    )
  }

  /// EpochMintProvision retrieves current minting epoch provision value.
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochMintProvision.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func epochMintProvision(
    _ request: Evmos_Inflation_V1_QueryEpochMintProvisionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Inflation_V1_QueryEpochMintProvisionRequest, Evmos_Inflation_V1_QueryEpochMintProvisionResponse> {
    return self.makeUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.epochMintProvision.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochMintProvisionInterceptors() ?? []
    )
  }

  /// SkippedEpochs retrieves the total number of skipped epochs.
  ///
  /// - Parameters:
  ///   - request: Request to send to SkippedEpochs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func skippedEpochs(
    _ request: Evmos_Inflation_V1_QuerySkippedEpochsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Inflation_V1_QuerySkippedEpochsRequest, Evmos_Inflation_V1_QuerySkippedEpochsResponse> {
    return self.makeUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.skippedEpochs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSkippedEpochsInterceptors() ?? []
    )
  }

  /// CirculatingSupply retrieves the total number of tokens that are in
  /// circulation (i.e. excluding unvested tokens).
  ///
  /// - Parameters:
  ///   - request: Request to send to CirculatingSupply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func circulatingSupply(
    _ request: Evmos_Inflation_V1_QueryCirculatingSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Inflation_V1_QueryCirculatingSupplyRequest, Evmos_Inflation_V1_QueryCirculatingSupplyResponse> {
    return self.makeUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.circulatingSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCirculatingSupplyInterceptors() ?? []
    )
  }

  /// InflationRate retrieves the inflation rate of the current period.
  ///
  /// - Parameters:
  ///   - request: Request to send to InflationRate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func inflationRate(
    _ request: Evmos_Inflation_V1_QueryInflationRateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Inflation_V1_QueryInflationRateRequest, Evmos_Inflation_V1_QueryInflationRateResponse> {
    return self.makeUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.inflationRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInflationRateInterceptors() ?? []
    )
  }

  /// Params retrieves the total set of minting parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func params(
    _ request: Evmos_Inflation_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Inflation_V1_QueryParamsRequest, Evmos_Inflation_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Evmos_Inflation_V1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Evmos_Inflation_V1_QueryNIOClient")
public final class Evmos_Inflation_V1_QueryClient: Evmos_Inflation_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the evmos.inflation.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Evmos_Inflation_V1_QueryNIOClient: Evmos_Inflation_V1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the evmos.inflation.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query provides defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Evmos_Inflation_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makePeriodCall(
    _ request: Evmos_Inflation_V1_QueryPeriodRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QueryPeriodRequest, Evmos_Inflation_V1_QueryPeriodResponse>

  func makeEpochMintProvisionCall(
    _ request: Evmos_Inflation_V1_QueryEpochMintProvisionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QueryEpochMintProvisionRequest, Evmos_Inflation_V1_QueryEpochMintProvisionResponse>

  func makeSkippedEpochsCall(
    _ request: Evmos_Inflation_V1_QuerySkippedEpochsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QuerySkippedEpochsRequest, Evmos_Inflation_V1_QuerySkippedEpochsResponse>

  func makeCirculatingSupplyCall(
    _ request: Evmos_Inflation_V1_QueryCirculatingSupplyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QueryCirculatingSupplyRequest, Evmos_Inflation_V1_QueryCirculatingSupplyResponse>

  func makeInflationRateCall(
    _ request: Evmos_Inflation_V1_QueryInflationRateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QueryInflationRateRequest, Evmos_Inflation_V1_QueryInflationRateResponse>

  func makeParamsCall(
    _ request: Evmos_Inflation_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QueryParamsRequest, Evmos_Inflation_V1_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Evmos_Inflation_V1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Evmos_Inflation_V1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePeriodCall(
    _ request: Evmos_Inflation_V1_QueryPeriodRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QueryPeriodRequest, Evmos_Inflation_V1_QueryPeriodResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.period.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePeriodInterceptors() ?? []
    )
  }

  public func makeEpochMintProvisionCall(
    _ request: Evmos_Inflation_V1_QueryEpochMintProvisionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QueryEpochMintProvisionRequest, Evmos_Inflation_V1_QueryEpochMintProvisionResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.epochMintProvision.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochMintProvisionInterceptors() ?? []
    )
  }

  public func makeSkippedEpochsCall(
    _ request: Evmos_Inflation_V1_QuerySkippedEpochsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QuerySkippedEpochsRequest, Evmos_Inflation_V1_QuerySkippedEpochsResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.skippedEpochs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSkippedEpochsInterceptors() ?? []
    )
  }

  public func makeCirculatingSupplyCall(
    _ request: Evmos_Inflation_V1_QueryCirculatingSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QueryCirculatingSupplyRequest, Evmos_Inflation_V1_QueryCirculatingSupplyResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.circulatingSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCirculatingSupplyInterceptors() ?? []
    )
  }

  public func makeInflationRateCall(
    _ request: Evmos_Inflation_V1_QueryInflationRateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QueryInflationRateRequest, Evmos_Inflation_V1_QueryInflationRateResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.inflationRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInflationRateInterceptors() ?? []
    )
  }

  public func makeParamsCall(
    _ request: Evmos_Inflation_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Inflation_V1_QueryParamsRequest, Evmos_Inflation_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Evmos_Inflation_V1_QueryAsyncClientProtocol {
  public func period(
    _ request: Evmos_Inflation_V1_QueryPeriodRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Inflation_V1_QueryPeriodResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.period.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePeriodInterceptors() ?? []
    )
  }

  public func epochMintProvision(
    _ request: Evmos_Inflation_V1_QueryEpochMintProvisionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Inflation_V1_QueryEpochMintProvisionResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.epochMintProvision.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochMintProvisionInterceptors() ?? []
    )
  }

  public func skippedEpochs(
    _ request: Evmos_Inflation_V1_QuerySkippedEpochsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Inflation_V1_QuerySkippedEpochsResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.skippedEpochs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSkippedEpochsInterceptors() ?? []
    )
  }

  public func circulatingSupply(
    _ request: Evmos_Inflation_V1_QueryCirculatingSupplyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Inflation_V1_QueryCirculatingSupplyResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.circulatingSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCirculatingSupplyInterceptors() ?? []
    )
  }

  public func inflationRate(
    _ request: Evmos_Inflation_V1_QueryInflationRateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Inflation_V1_QueryInflationRateResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.inflationRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInflationRateInterceptors() ?? []
    )
  }

  public func params(
    _ request: Evmos_Inflation_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Inflation_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Inflation_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Evmos_Inflation_V1_QueryAsyncClient: Evmos_Inflation_V1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'period'.
  func makePeriodInterceptors() -> [ClientInterceptor<Evmos_Inflation_V1_QueryPeriodRequest, Evmos_Inflation_V1_QueryPeriodResponse>]

  /// - Returns: Interceptors to use when invoking 'epochMintProvision'.
  func makeEpochMintProvisionInterceptors() -> [ClientInterceptor<Evmos_Inflation_V1_QueryEpochMintProvisionRequest, Evmos_Inflation_V1_QueryEpochMintProvisionResponse>]

  /// - Returns: Interceptors to use when invoking 'skippedEpochs'.
  func makeSkippedEpochsInterceptors() -> [ClientInterceptor<Evmos_Inflation_V1_QuerySkippedEpochsRequest, Evmos_Inflation_V1_QuerySkippedEpochsResponse>]

  /// - Returns: Interceptors to use when invoking 'circulatingSupply'.
  func makeCirculatingSupplyInterceptors() -> [ClientInterceptor<Evmos_Inflation_V1_QueryCirculatingSupplyRequest, Evmos_Inflation_V1_QueryCirculatingSupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'inflationRate'.
  func makeInflationRateInterceptors() -> [ClientInterceptor<Evmos_Inflation_V1_QueryInflationRateRequest, Evmos_Inflation_V1_QueryInflationRateResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Evmos_Inflation_V1_QueryParamsRequest, Evmos_Inflation_V1_QueryParamsResponse>]
}

public enum Evmos_Inflation_V1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "evmos.inflation.v1.Query",
    methods: [
      Evmos_Inflation_V1_QueryClientMetadata.Methods.period,
      Evmos_Inflation_V1_QueryClientMetadata.Methods.epochMintProvision,
      Evmos_Inflation_V1_QueryClientMetadata.Methods.skippedEpochs,
      Evmos_Inflation_V1_QueryClientMetadata.Methods.circulatingSupply,
      Evmos_Inflation_V1_QueryClientMetadata.Methods.inflationRate,
      Evmos_Inflation_V1_QueryClientMetadata.Methods.params,
    ]
  )

  public enum Methods {
    public static let period = GRPCMethodDescriptor(
      name: "Period",
      path: "/evmos.inflation.v1.Query/Period",
      type: GRPCCallType.unary
    )

    public static let epochMintProvision = GRPCMethodDescriptor(
      name: "EpochMintProvision",
      path: "/evmos.inflation.v1.Query/EpochMintProvision",
      type: GRPCCallType.unary
    )

    public static let skippedEpochs = GRPCMethodDescriptor(
      name: "SkippedEpochs",
      path: "/evmos.inflation.v1.Query/SkippedEpochs",
      type: GRPCCallType.unary
    )

    public static let circulatingSupply = GRPCMethodDescriptor(
      name: "CirculatingSupply",
      path: "/evmos.inflation.v1.Query/CirculatingSupply",
      type: GRPCCallType.unary
    )

    public static let inflationRate = GRPCMethodDescriptor(
      name: "InflationRate",
      path: "/evmos.inflation.v1.Query/InflationRate",
      type: GRPCCallType.unary
    )

    public static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/evmos.inflation.v1.Query/Params",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Evmos_Inflation_V1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Evmos_Inflation_V1_QueryTestClient: Evmos_Inflation_V1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Inflation_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Period RPC. This must be called
  /// before calling 'period'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makePeriodResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QueryPeriodRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Inflation_V1_QueryPeriodRequest, Evmos_Inflation_V1_QueryPeriodResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Inflation_V1_QueryClientMetadata.Methods.period.path, requestHandler: requestHandler)
  }

  public func enqueuePeriodResponse(
    _ response: Evmos_Inflation_V1_QueryPeriodResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QueryPeriodRequest>) -> () = { _ in }
  ) {
    let stream = self.makePeriodResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Period'
  public var hasPeriodResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Inflation_V1_QueryClientMetadata.Methods.period.path)
  }

  /// Make a unary response for the EpochMintProvision RPC. This must be called
  /// before calling 'epochMintProvision'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeEpochMintProvisionResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QueryEpochMintProvisionRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Inflation_V1_QueryEpochMintProvisionRequest, Evmos_Inflation_V1_QueryEpochMintProvisionResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Inflation_V1_QueryClientMetadata.Methods.epochMintProvision.path, requestHandler: requestHandler)
  }

  public func enqueueEpochMintProvisionResponse(
    _ response: Evmos_Inflation_V1_QueryEpochMintProvisionResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QueryEpochMintProvisionRequest>) -> () = { _ in }
  ) {
    let stream = self.makeEpochMintProvisionResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'EpochMintProvision'
  public var hasEpochMintProvisionResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Inflation_V1_QueryClientMetadata.Methods.epochMintProvision.path)
  }

  /// Make a unary response for the SkippedEpochs RPC. This must be called
  /// before calling 'skippedEpochs'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSkippedEpochsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QuerySkippedEpochsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Inflation_V1_QuerySkippedEpochsRequest, Evmos_Inflation_V1_QuerySkippedEpochsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Inflation_V1_QueryClientMetadata.Methods.skippedEpochs.path, requestHandler: requestHandler)
  }

  public func enqueueSkippedEpochsResponse(
    _ response: Evmos_Inflation_V1_QuerySkippedEpochsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QuerySkippedEpochsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeSkippedEpochsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SkippedEpochs'
  public var hasSkippedEpochsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Inflation_V1_QueryClientMetadata.Methods.skippedEpochs.path)
  }

  /// Make a unary response for the CirculatingSupply RPC. This must be called
  /// before calling 'circulatingSupply'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCirculatingSupplyResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QueryCirculatingSupplyRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Inflation_V1_QueryCirculatingSupplyRequest, Evmos_Inflation_V1_QueryCirculatingSupplyResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Inflation_V1_QueryClientMetadata.Methods.circulatingSupply.path, requestHandler: requestHandler)
  }

  public func enqueueCirculatingSupplyResponse(
    _ response: Evmos_Inflation_V1_QueryCirculatingSupplyResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QueryCirculatingSupplyRequest>) -> () = { _ in }
  ) {
    let stream = self.makeCirculatingSupplyResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CirculatingSupply'
  public var hasCirculatingSupplyResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Inflation_V1_QueryClientMetadata.Methods.circulatingSupply.path)
  }

  /// Make a unary response for the InflationRate RPC. This must be called
  /// before calling 'inflationRate'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeInflationRateResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QueryInflationRateRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Inflation_V1_QueryInflationRateRequest, Evmos_Inflation_V1_QueryInflationRateResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Inflation_V1_QueryClientMetadata.Methods.inflationRate.path, requestHandler: requestHandler)
  }

  public func enqueueInflationRateResponse(
    _ response: Evmos_Inflation_V1_QueryInflationRateResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QueryInflationRateRequest>) -> () = { _ in }
  ) {
    let stream = self.makeInflationRateResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'InflationRate'
  public var hasInflationRateResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Inflation_V1_QueryClientMetadata.Methods.inflationRate.path)
  }

  /// Make a unary response for the Params RPC. This must be called
  /// before calling 'params'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QueryParamsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Inflation_V1_QueryParamsRequest, Evmos_Inflation_V1_QueryParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Inflation_V1_QueryClientMetadata.Methods.params.path, requestHandler: requestHandler)
  }

  public func enqueueParamsResponse(
    _ response: Evmos_Inflation_V1_QueryParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Inflation_V1_QueryParamsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Params'
  public var hasParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Inflation_V1_QueryClientMetadata.Methods.params.path)
  }
}

