//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: evmos/incentives/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Evmos_Incentives_V1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Evmos_Incentives_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol? { get }

  func incentives(
    _ request: Evmos_Incentives_V1_QueryIncentivesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryIncentivesRequest, Evmos_Incentives_V1_QueryIncentivesResponse>

  func incentive(
    _ request: Evmos_Incentives_V1_QueryIncentiveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryIncentiveRequest, Evmos_Incentives_V1_QueryIncentiveResponse>

  func gasMeters(
    _ request: Evmos_Incentives_V1_QueryGasMetersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryGasMetersRequest, Evmos_Incentives_V1_QueryGasMetersResponse>

  func gasMeter(
    _ request: Evmos_Incentives_V1_QueryGasMeterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryGasMeterRequest, Evmos_Incentives_V1_QueryGasMeterResponse>

  func allocationMeters(
    _ request: Evmos_Incentives_V1_QueryAllocationMetersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryAllocationMetersRequest, Evmos_Incentives_V1_QueryAllocationMetersResponse>

  func allocationMeter(
    _ request: Evmos_Incentives_V1_QueryAllocationMeterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryAllocationMeterRequest, Evmos_Incentives_V1_QueryAllocationMeterResponse>

  func params(
    _ request: Evmos_Incentives_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryParamsRequest, Evmos_Incentives_V1_QueryParamsResponse>
}

extension Evmos_Incentives_V1_QueryClientProtocol {
  public var serviceName: String {
    return "evmos.incentives.v1.Query"
  }

  /// Incentives retrieves registered incentives
  ///
  /// - Parameters:
  ///   - request: Request to send to Incentives.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func incentives(
    _ request: Evmos_Incentives_V1_QueryIncentivesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryIncentivesRequest, Evmos_Incentives_V1_QueryIncentivesResponse> {
    return self.makeUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.incentives.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivesInterceptors() ?? []
    )
  }

  /// Incentive retrieves a registered incentive
  ///
  /// - Parameters:
  ///   - request: Request to send to Incentive.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func incentive(
    _ request: Evmos_Incentives_V1_QueryIncentiveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryIncentiveRequest, Evmos_Incentives_V1_QueryIncentiveResponse> {
    return self.makeUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.incentive.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentiveInterceptors() ?? []
    )
  }

  /// GasMeters retrieves active gas meters for a given contract
  ///
  /// - Parameters:
  ///   - request: Request to send to GasMeters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func gasMeters(
    _ request: Evmos_Incentives_V1_QueryGasMetersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryGasMetersRequest, Evmos_Incentives_V1_QueryGasMetersResponse> {
    return self.makeUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGasMetersInterceptors() ?? []
    )
  }

  /// GasMeter retrieves a active gas meter
  ///
  /// - Parameters:
  ///   - request: Request to send to GasMeter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func gasMeter(
    _ request: Evmos_Incentives_V1_QueryGasMeterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryGasMeterRequest, Evmos_Incentives_V1_QueryGasMeterResponse> {
    return self.makeUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGasMeterInterceptors() ?? []
    )
  }

  /// AllocationMeters retrieves active allocation meters for a given
  /// denomination
  ///
  /// - Parameters:
  ///   - request: Request to send to AllocationMeters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func allocationMeters(
    _ request: Evmos_Incentives_V1_QueryAllocationMetersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryAllocationMetersRequest, Evmos_Incentives_V1_QueryAllocationMetersResponse> {
    return self.makeUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllocationMetersInterceptors() ?? []
    )
  }

  /// AllocationMeter retrieves a active gas meter
  ///
  /// - Parameters:
  ///   - request: Request to send to AllocationMeter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func allocationMeter(
    _ request: Evmos_Incentives_V1_QueryAllocationMeterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryAllocationMeterRequest, Evmos_Incentives_V1_QueryAllocationMeterResponse> {
    return self.makeUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllocationMeterInterceptors() ?? []
    )
  }

  /// Params retrieves the incentives module params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func params(
    _ request: Evmos_Incentives_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryParamsRequest, Evmos_Incentives_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Evmos_Incentives_V1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Evmos_Incentives_V1_QueryNIOClient")
public final class Evmos_Incentives_V1_QueryClient: Evmos_Incentives_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the evmos.incentives.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Evmos_Incentives_V1_QueryNIOClient: Evmos_Incentives_V1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the evmos.incentives.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Evmos_Incentives_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeIncentivesCall(
    _ request: Evmos_Incentives_V1_QueryIncentivesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryIncentivesRequest, Evmos_Incentives_V1_QueryIncentivesResponse>

  func makeIncentiveCall(
    _ request: Evmos_Incentives_V1_QueryIncentiveRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryIncentiveRequest, Evmos_Incentives_V1_QueryIncentiveResponse>

  func makeGasMetersCall(
    _ request: Evmos_Incentives_V1_QueryGasMetersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryGasMetersRequest, Evmos_Incentives_V1_QueryGasMetersResponse>

  func makeGasMeterCall(
    _ request: Evmos_Incentives_V1_QueryGasMeterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryGasMeterRequest, Evmos_Incentives_V1_QueryGasMeterResponse>

  func makeAllocationMetersCall(
    _ request: Evmos_Incentives_V1_QueryAllocationMetersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryAllocationMetersRequest, Evmos_Incentives_V1_QueryAllocationMetersResponse>

  func makeAllocationMeterCall(
    _ request: Evmos_Incentives_V1_QueryAllocationMeterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryAllocationMeterRequest, Evmos_Incentives_V1_QueryAllocationMeterResponse>

  func makeParamsCall(
    _ request: Evmos_Incentives_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryParamsRequest, Evmos_Incentives_V1_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Evmos_Incentives_V1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Evmos_Incentives_V1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeIncentivesCall(
    _ request: Evmos_Incentives_V1_QueryIncentivesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryIncentivesRequest, Evmos_Incentives_V1_QueryIncentivesResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.incentives.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivesInterceptors() ?? []
    )
  }

  public func makeIncentiveCall(
    _ request: Evmos_Incentives_V1_QueryIncentiveRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryIncentiveRequest, Evmos_Incentives_V1_QueryIncentiveResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.incentive.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentiveInterceptors() ?? []
    )
  }

  public func makeGasMetersCall(
    _ request: Evmos_Incentives_V1_QueryGasMetersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryGasMetersRequest, Evmos_Incentives_V1_QueryGasMetersResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGasMetersInterceptors() ?? []
    )
  }

  public func makeGasMeterCall(
    _ request: Evmos_Incentives_V1_QueryGasMeterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryGasMeterRequest, Evmos_Incentives_V1_QueryGasMeterResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGasMeterInterceptors() ?? []
    )
  }

  public func makeAllocationMetersCall(
    _ request: Evmos_Incentives_V1_QueryAllocationMetersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryAllocationMetersRequest, Evmos_Incentives_V1_QueryAllocationMetersResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllocationMetersInterceptors() ?? []
    )
  }

  public func makeAllocationMeterCall(
    _ request: Evmos_Incentives_V1_QueryAllocationMeterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryAllocationMeterRequest, Evmos_Incentives_V1_QueryAllocationMeterResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllocationMeterInterceptors() ?? []
    )
  }

  public func makeParamsCall(
    _ request: Evmos_Incentives_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Incentives_V1_QueryParamsRequest, Evmos_Incentives_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Evmos_Incentives_V1_QueryAsyncClientProtocol {
  public func incentives(
    _ request: Evmos_Incentives_V1_QueryIncentivesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Incentives_V1_QueryIncentivesResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.incentives.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivesInterceptors() ?? []
    )
  }

  public func incentive(
    _ request: Evmos_Incentives_V1_QueryIncentiveRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Incentives_V1_QueryIncentiveResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.incentive.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentiveInterceptors() ?? []
    )
  }

  public func gasMeters(
    _ request: Evmos_Incentives_V1_QueryGasMetersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Incentives_V1_QueryGasMetersResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGasMetersInterceptors() ?? []
    )
  }

  public func gasMeter(
    _ request: Evmos_Incentives_V1_QueryGasMeterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Incentives_V1_QueryGasMeterResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGasMeterInterceptors() ?? []
    )
  }

  public func allocationMeters(
    _ request: Evmos_Incentives_V1_QueryAllocationMetersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Incentives_V1_QueryAllocationMetersResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllocationMetersInterceptors() ?? []
    )
  }

  public func allocationMeter(
    _ request: Evmos_Incentives_V1_QueryAllocationMeterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Incentives_V1_QueryAllocationMeterResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllocationMeterInterceptors() ?? []
    )
  }

  public func params(
    _ request: Evmos_Incentives_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Incentives_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Incentives_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Evmos_Incentives_V1_QueryAsyncClient: Evmos_Incentives_V1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'incentives'.
  func makeIncentivesInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryIncentivesRequest, Evmos_Incentives_V1_QueryIncentivesResponse>]

  /// - Returns: Interceptors to use when invoking 'incentive'.
  func makeIncentiveInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryIncentiveRequest, Evmos_Incentives_V1_QueryIncentiveResponse>]

  /// - Returns: Interceptors to use when invoking 'gasMeters'.
  func makeGasMetersInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryGasMetersRequest, Evmos_Incentives_V1_QueryGasMetersResponse>]

  /// - Returns: Interceptors to use when invoking 'gasMeter'.
  func makeGasMeterInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryGasMeterRequest, Evmos_Incentives_V1_QueryGasMeterResponse>]

  /// - Returns: Interceptors to use when invoking 'allocationMeters'.
  func makeAllocationMetersInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryAllocationMetersRequest, Evmos_Incentives_V1_QueryAllocationMetersResponse>]

  /// - Returns: Interceptors to use when invoking 'allocationMeter'.
  func makeAllocationMeterInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryAllocationMeterRequest, Evmos_Incentives_V1_QueryAllocationMeterResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryParamsRequest, Evmos_Incentives_V1_QueryParamsResponse>]
}

public enum Evmos_Incentives_V1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "evmos.incentives.v1.Query",
    methods: [
      Evmos_Incentives_V1_QueryClientMetadata.Methods.incentives,
      Evmos_Incentives_V1_QueryClientMetadata.Methods.incentive,
      Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeters,
      Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeter,
      Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeters,
      Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeter,
      Evmos_Incentives_V1_QueryClientMetadata.Methods.params,
    ]
  )

  public enum Methods {
    public static let incentives = GRPCMethodDescriptor(
      name: "Incentives",
      path: "/evmos.incentives.v1.Query/Incentives",
      type: GRPCCallType.unary
    )

    public static let incentive = GRPCMethodDescriptor(
      name: "Incentive",
      path: "/evmos.incentives.v1.Query/Incentive",
      type: GRPCCallType.unary
    )

    public static let gasMeters = GRPCMethodDescriptor(
      name: "GasMeters",
      path: "/evmos.incentives.v1.Query/GasMeters",
      type: GRPCCallType.unary
    )

    public static let gasMeter = GRPCMethodDescriptor(
      name: "GasMeter",
      path: "/evmos.incentives.v1.Query/GasMeter",
      type: GRPCCallType.unary
    )

    public static let allocationMeters = GRPCMethodDescriptor(
      name: "AllocationMeters",
      path: "/evmos.incentives.v1.Query/AllocationMeters",
      type: GRPCCallType.unary
    )

    public static let allocationMeter = GRPCMethodDescriptor(
      name: "AllocationMeter",
      path: "/evmos.incentives.v1.Query/AllocationMeter",
      type: GRPCCallType.unary
    )

    public static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/evmos.incentives.v1.Query/Params",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Evmos_Incentives_V1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Evmos_Incentives_V1_QueryTestClient: Evmos_Incentives_V1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Incentives RPC. This must be called
  /// before calling 'incentives'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeIncentivesResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryIncentivesRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Incentives_V1_QueryIncentivesRequest, Evmos_Incentives_V1_QueryIncentivesResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Incentives_V1_QueryClientMetadata.Methods.incentives.path, requestHandler: requestHandler)
  }

  public func enqueueIncentivesResponse(
    _ response: Evmos_Incentives_V1_QueryIncentivesResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryIncentivesRequest>) -> () = { _ in }
  ) {
    let stream = self.makeIncentivesResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Incentives'
  public var hasIncentivesResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Incentives_V1_QueryClientMetadata.Methods.incentives.path)
  }

  /// Make a unary response for the Incentive RPC. This must be called
  /// before calling 'incentive'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeIncentiveResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryIncentiveRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Incentives_V1_QueryIncentiveRequest, Evmos_Incentives_V1_QueryIncentiveResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Incentives_V1_QueryClientMetadata.Methods.incentive.path, requestHandler: requestHandler)
  }

  public func enqueueIncentiveResponse(
    _ response: Evmos_Incentives_V1_QueryIncentiveResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryIncentiveRequest>) -> () = { _ in }
  ) {
    let stream = self.makeIncentiveResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Incentive'
  public var hasIncentiveResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Incentives_V1_QueryClientMetadata.Methods.incentive.path)
  }

  /// Make a unary response for the GasMeters RPC. This must be called
  /// before calling 'gasMeters'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGasMetersResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryGasMetersRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Incentives_V1_QueryGasMetersRequest, Evmos_Incentives_V1_QueryGasMetersResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeters.path, requestHandler: requestHandler)
  }

  public func enqueueGasMetersResponse(
    _ response: Evmos_Incentives_V1_QueryGasMetersResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryGasMetersRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGasMetersResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GasMeters'
  public var hasGasMetersResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeters.path)
  }

  /// Make a unary response for the GasMeter RPC. This must be called
  /// before calling 'gasMeter'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGasMeterResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryGasMeterRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Incentives_V1_QueryGasMeterRequest, Evmos_Incentives_V1_QueryGasMeterResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeter.path, requestHandler: requestHandler)
  }

  public func enqueueGasMeterResponse(
    _ response: Evmos_Incentives_V1_QueryGasMeterResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryGasMeterRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGasMeterResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GasMeter'
  public var hasGasMeterResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Incentives_V1_QueryClientMetadata.Methods.gasMeter.path)
  }

  /// Make a unary response for the AllocationMeters RPC. This must be called
  /// before calling 'allocationMeters'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAllocationMetersResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryAllocationMetersRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Incentives_V1_QueryAllocationMetersRequest, Evmos_Incentives_V1_QueryAllocationMetersResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeters.path, requestHandler: requestHandler)
  }

  public func enqueueAllocationMetersResponse(
    _ response: Evmos_Incentives_V1_QueryAllocationMetersResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryAllocationMetersRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAllocationMetersResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AllocationMeters'
  public var hasAllocationMetersResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeters.path)
  }

  /// Make a unary response for the AllocationMeter RPC. This must be called
  /// before calling 'allocationMeter'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAllocationMeterResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryAllocationMeterRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Incentives_V1_QueryAllocationMeterRequest, Evmos_Incentives_V1_QueryAllocationMeterResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeter.path, requestHandler: requestHandler)
  }

  public func enqueueAllocationMeterResponse(
    _ response: Evmos_Incentives_V1_QueryAllocationMeterResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryAllocationMeterRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAllocationMeterResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AllocationMeter'
  public var hasAllocationMeterResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Incentives_V1_QueryClientMetadata.Methods.allocationMeter.path)
  }

  /// Make a unary response for the Params RPC. This must be called
  /// before calling 'params'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryParamsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Evmos_Incentives_V1_QueryParamsRequest, Evmos_Incentives_V1_QueryParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Evmos_Incentives_V1_QueryClientMetadata.Methods.params.path, requestHandler: requestHandler)
  }

  public func enqueueParamsResponse(
    _ response: Evmos_Incentives_V1_QueryParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Evmos_Incentives_V1_QueryParamsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Params'
  public var hasParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Evmos_Incentives_V1_QueryClientMetadata.Methods.params.path)
  }
}

