// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: evmos/claims/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState define the claims module's genesis state.
public struct Evmos_Claims_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params defines all the parameters of the module.
  public var params: Evmos_Claims_V1_Params {
    get {return _params ?? Evmos_Claims_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {self._params = nil}

  /// claims_records is a list of claim records with the corresponding airdrop recipient
  public var claimsRecords: [Evmos_Claims_V1_ClaimsRecordAddress] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _params: Evmos_Claims_V1_Params? = nil
}

/// Params defines the claims module's parameters.
public struct Evmos_Claims_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// enable_claims is the parameter to enable the claiming process
  public var enableClaims: Bool = false

  /// airdrop_start_time defines the timestamp of the airdrop start
  public var airdropStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _airdropStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_airdropStartTime = newValue}
  }
  /// Returns true if `airdropStartTime` has been explicitly set.
  public var hasAirdropStartTime: Bool {return self._airdropStartTime != nil}
  /// Clears the value of `airdropStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearAirdropStartTime() {self._airdropStartTime = nil}

  /// duration_until_decay of claimable tokens begin
  public var durationUntilDecay: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _durationUntilDecay ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_durationUntilDecay = newValue}
  }
  /// Returns true if `durationUntilDecay` has been explicitly set.
  public var hasDurationUntilDecay: Bool {return self._durationUntilDecay != nil}
  /// Clears the value of `durationUntilDecay`. Subsequent reads from it will return its default value.
  public mutating func clearDurationUntilDecay() {self._durationUntilDecay = nil}

  /// duration_of_decay for token claim decay period
  public var durationOfDecay: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _durationOfDecay ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_durationOfDecay = newValue}
  }
  /// Returns true if `durationOfDecay` has been explicitly set.
  public var hasDurationOfDecay: Bool {return self._durationOfDecay != nil}
  /// Clears the value of `durationOfDecay`. Subsequent reads from it will return its default value.
  public mutating func clearDurationOfDecay() {self._durationOfDecay = nil}

  /// claims_denom is the denomination of the claimable coin
  public var claimsDenom: String = String()

  /// authorized_channels is the list of authorized channel identifiers that can perform address
  /// attestations via IBC.
  public var authorizedChannels: [String] = []

  /// evm_channels is the list of channel identifiers from EVM compatible chains
  public var evmChannels: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _airdropStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _durationUntilDecay: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _durationOfDecay: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Evmos_Claims_V1_GenesisState: @unchecked Sendable {}
extension Evmos_Claims_V1_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "evmos.claims.v1"

extension Evmos_Claims_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenesisState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "claims_records"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.claimsRecords) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.claimsRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claimsRecords, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Claims_V1_GenesisState, rhs: Evmos_Claims_V1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.claimsRecords != rhs.claimsRecords {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Evmos_Claims_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Params"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "enable_claims"),
    2: .standard(proto: "airdrop_start_time"),
    3: .standard(proto: "duration_until_decay"),
    4: .standard(proto: "duration_of_decay"),
    5: .standard(proto: "claims_denom"),
    6: .standard(proto: "authorized_channels"),
    7: .standard(proto: "evm_channels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enableClaims) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._airdropStartTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._durationUntilDecay) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._durationOfDecay) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.claimsDenom) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.authorizedChannels) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.evmChannels) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.enableClaims != false {
      try visitor.visitSingularBoolField(value: self.enableClaims, fieldNumber: 1)
    }
    try { if let v = self._airdropStartTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._durationUntilDecay {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._durationOfDecay {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.claimsDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.claimsDenom, fieldNumber: 5)
    }
    if !self.authorizedChannels.isEmpty {
      try visitor.visitRepeatedStringField(value: self.authorizedChannels, fieldNumber: 6)
    }
    if !self.evmChannels.isEmpty {
      try visitor.visitRepeatedStringField(value: self.evmChannels, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Claims_V1_Params, rhs: Evmos_Claims_V1_Params) -> Bool {
    if lhs.enableClaims != rhs.enableClaims {return false}
    if lhs._airdropStartTime != rhs._airdropStartTime {return false}
    if lhs._durationUntilDecay != rhs._durationUntilDecay {return false}
    if lhs._durationOfDecay != rhs._durationOfDecay {return false}
    if lhs.claimsDenom != rhs.claimsDenom {return false}
    if lhs.authorizedChannels != rhs.authorizedChannels {return false}
    if lhs.evmChannels != rhs.evmChannels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
