// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: evmos/vesting/v1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventCreateClawbackVestingAccount defines the event type
/// for creating a clawback vesting account
public struct Evmos_Vesting_V1_EventCreateClawbackVestingAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sender is the address of the sender
  public var sender: String = String()

  /// coins to be vested
  public var coins: String = String()

  /// start_time is the time when the coins start to vest
  public var startTime: String = String()

  /// merge
  public var merge: String = String()

  /// account address of recipient
  public var account: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// EventClawback defines the event type for clawback
public struct Evmos_Vesting_V1_EventClawback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// funder is the address of the funder
  public var funder: String = String()

  /// account is the address of the account
  public var account: String = String()

  /// destination is the address of the destination
  public var destination: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// EventUpdateVestingFunder defines the event type for updating the vesting funder
public struct Evmos_Vesting_V1_EventUpdateVestingFunder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// funder is the address of the funder
  public var funder: String = String()

  /// account is the address of the account
  public var account: String = String()

  /// new_funder is the address of the new funder
  public var newFunder: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Evmos_Vesting_V1_EventCreateClawbackVestingAccount: @unchecked Sendable {}
extension Evmos_Vesting_V1_EventClawback: @unchecked Sendable {}
extension Evmos_Vesting_V1_EventUpdateVestingFunder: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "evmos.vesting.v1"

extension Evmos_Vesting_V1_EventCreateClawbackVestingAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventCreateClawbackVestingAccount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "coins"),
    3: .standard(proto: "start_time"),
    4: .same(proto: "merge"),
    5: .same(proto: "account"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.coins) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.startTime) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.merge) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.account) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.coins.isEmpty {
      try visitor.visitSingularStringField(value: self.coins, fieldNumber: 2)
    }
    if !self.startTime.isEmpty {
      try visitor.visitSingularStringField(value: self.startTime, fieldNumber: 3)
    }
    if !self.merge.isEmpty {
      try visitor.visitSingularStringField(value: self.merge, fieldNumber: 4)
    }
    if !self.account.isEmpty {
      try visitor.visitSingularStringField(value: self.account, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Vesting_V1_EventCreateClawbackVestingAccount, rhs: Evmos_Vesting_V1_EventCreateClawbackVestingAccount) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.coins != rhs.coins {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.merge != rhs.merge {return false}
    if lhs.account != rhs.account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Evmos_Vesting_V1_EventClawback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventClawback"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "funder"),
    2: .same(proto: "account"),
    3: .same(proto: "destination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.funder) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.account) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.destination) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.funder.isEmpty {
      try visitor.visitSingularStringField(value: self.funder, fieldNumber: 1)
    }
    if !self.account.isEmpty {
      try visitor.visitSingularStringField(value: self.account, fieldNumber: 2)
    }
    if !self.destination.isEmpty {
      try visitor.visitSingularStringField(value: self.destination, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Vesting_V1_EventClawback, rhs: Evmos_Vesting_V1_EventClawback) -> Bool {
    if lhs.funder != rhs.funder {return false}
    if lhs.account != rhs.account {return false}
    if lhs.destination != rhs.destination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Evmos_Vesting_V1_EventUpdateVestingFunder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventUpdateVestingFunder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "funder"),
    2: .same(proto: "account"),
    3: .standard(proto: "new_funder"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.funder) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.account) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.newFunder) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.funder.isEmpty {
      try visitor.visitSingularStringField(value: self.funder, fieldNumber: 1)
    }
    if !self.account.isEmpty {
      try visitor.visitSingularStringField(value: self.account, fieldNumber: 2)
    }
    if !self.newFunder.isEmpty {
      try visitor.visitSingularStringField(value: self.newFunder, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Evmos_Vesting_V1_EventUpdateVestingFunder, rhs: Evmos_Vesting_V1_EventUpdateVestingFunder) -> Bool {
    if lhs.funder != rhs.funder {return false}
    if lhs.account != rhs.account {return false}
    if lhs.newFunder != rhs.newFunder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
