//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/tokenfactory/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Osmosis_Tokenfactory_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Osmosis_Tokenfactory_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_QueryParamsRequest, Osmosis_Tokenfactory_V1beta1_QueryParamsResponse>

  func denomAuthorityMetadata(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataResponse>

  func denomsFromCreator(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorResponse>
}

extension Osmosis_Tokenfactory_V1beta1_QueryClientProtocol {
  public var serviceName: String {
    return "osmosis.tokenfactory.v1beta1.Query"
  }

  /// Params defines a gRPC query method that returns the tokenfactory module's
  /// parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func params(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_QueryParamsRequest, Osmosis_Tokenfactory_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// DenomAuthorityMetadata defines a gRPC query method for fetching
  /// DenomAuthorityMetadata for a particular denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomAuthorityMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func denomAuthorityMetadata(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomAuthorityMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomAuthorityMetadataInterceptors() ?? []
    )
  }

  /// DenomsFromCreator defines a gRPC query method for fetching all
  /// denominations created by a specific admin/creator.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomsFromCreator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func denomsFromCreator(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomsFromCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsFromCreatorInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Osmosis_Tokenfactory_V1beta1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Osmosis_Tokenfactory_V1beta1_QueryNIOClient")
public final class Osmosis_Tokenfactory_V1beta1_QueryClient: Osmosis_Tokenfactory_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.tokenfactory.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Osmosis_Tokenfactory_V1beta1_QueryNIOClient: Osmosis_Tokenfactory_V1beta1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.tokenfactory.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Osmosis_Tokenfactory_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_QueryParamsRequest, Osmosis_Tokenfactory_V1beta1_QueryParamsResponse>

  func makeDenomAuthorityMetadataCall(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataResponse>

  func makeDenomsFromCreatorCall(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Tokenfactory_V1beta1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeParamsCall(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_QueryParamsRequest, Osmosis_Tokenfactory_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func makeDenomAuthorityMetadataCall(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomAuthorityMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomAuthorityMetadataInterceptors() ?? []
    )
  }

  public func makeDenomsFromCreatorCall(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomsFromCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsFromCreatorInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Tokenfactory_V1beta1_QueryAsyncClientProtocol {
  public func params(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func denomAuthorityMetadata(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomAuthorityMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomAuthorityMetadataInterceptors() ?? []
    )
  }

  public func denomsFromCreator(
    _ request: Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomsFromCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsFromCreatorInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Osmosis_Tokenfactory_V1beta1_QueryAsyncClient: Osmosis_Tokenfactory_V1beta1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_QueryParamsRequest, Osmosis_Tokenfactory_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'denomAuthorityMetadata'.
  func makeDenomAuthorityMetadataInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'denomsFromCreator'.
  func makeDenomsFromCreatorInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorResponse>]
}

public enum Osmosis_Tokenfactory_V1beta1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.tokenfactory.v1beta1.Query",
    methods: [
      Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.params,
      Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomAuthorityMetadata,
      Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomsFromCreator,
    ]
  )

  public enum Methods {
    public static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.tokenfactory.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    public static let denomAuthorityMetadata = GRPCMethodDescriptor(
      name: "DenomAuthorityMetadata",
      path: "/osmosis.tokenfactory.v1beta1.Query/DenomAuthorityMetadata",
      type: GRPCCallType.unary
    )

    public static let denomsFromCreator = GRPCMethodDescriptor(
      name: "DenomsFromCreator",
      path: "/osmosis.tokenfactory.v1beta1.Query/DenomsFromCreator",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Osmosis_Tokenfactory_V1beta1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Osmosis_Tokenfactory_V1beta1_QueryTestClient: Osmosis_Tokenfactory_V1beta1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Tokenfactory_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Params RPC. This must be called
  /// before calling 'params'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_QueryParamsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Tokenfactory_V1beta1_QueryParamsRequest, Osmosis_Tokenfactory_V1beta1_QueryParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.params.path, requestHandler: requestHandler)
  }

  public func enqueueParamsResponse(
    _ response: Osmosis_Tokenfactory_V1beta1_QueryParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_QueryParamsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Params'
  public var hasParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.params.path)
  }

  /// Make a unary response for the DenomAuthorityMetadata RPC. This must be called
  /// before calling 'denomAuthorityMetadata'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDenomAuthorityMetadataResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomAuthorityMetadata.path, requestHandler: requestHandler)
  }

  public func enqueueDenomAuthorityMetadataResponse(
    _ response: Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_QueryDenomAuthorityMetadataRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDenomAuthorityMetadataResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DenomAuthorityMetadata'
  public var hasDenomAuthorityMetadataResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomAuthorityMetadata.path)
  }

  /// Make a unary response for the DenomsFromCreator RPC. This must be called
  /// before calling 'denomsFromCreator'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDenomsFromCreatorResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest, Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomsFromCreator.path, requestHandler: requestHandler)
  }

  public func enqueueDenomsFromCreatorResponse(
    _ response: Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_QueryDenomsFromCreatorRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDenomsFromCreatorResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DenomsFromCreator'
  public var hasDenomsFromCreatorResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Tokenfactory_V1beta1_QueryClientMetadata.Methods.denomsFromCreator.path)
  }
}

