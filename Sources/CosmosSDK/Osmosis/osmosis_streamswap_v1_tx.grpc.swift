//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/streamswap/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Osmosis_Streamswap_V1_MsgClient`, then call methods of this protocol to make API calls.
public protocol Osmosis_Streamswap_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol? { get }

  func createSale(
    _ request: Osmosis_Streamswap_V1_MsgCreateSale,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Streamswap_V1_MsgCreateSale, Osmosis_Streamswap_V1_MsgCreateSaleResponse>

  func subscribe(
    _ request: Osmosis_Streamswap_V1_MsgSubscribe,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Streamswap_V1_MsgSubscribe, SwiftProtobuf.Google_Protobuf_Empty>

  func withdraw(
    _ request: Osmosis_Streamswap_V1_MsgWithdraw,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Streamswap_V1_MsgWithdraw, SwiftProtobuf.Google_Protobuf_Empty>

  func exitSale(
    _ request: Osmosis_Streamswap_V1_MsgExitSale,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Streamswap_V1_MsgExitSale, Osmosis_Streamswap_V1_MsgExitSaleResponse>

  func finalizeSale(
    _ request: Osmosis_Streamswap_V1_MsgFinalizeSale,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Streamswap_V1_MsgFinalizeSale, Osmosis_Streamswap_V1_MsgFinalizeSaleResponse>
}

extension Osmosis_Streamswap_V1_MsgClientProtocol {
  public var serviceName: String {
    return "osmosis.streamswap.v1.Msg"
  }

  /// CreateSale creates new token sale. Anyone can create a new sale.
  /// params.SaleBond OSMO will be charged as a bond (returned in FinalizeSale)
  /// to avoid spams.
  /// The sale follows the streamswap functionality explained in the
  /// x/launchapd/spec
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSale.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createSale(
    _ request: Osmosis_Streamswap_V1_MsgCreateSale,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Streamswap_V1_MsgCreateSale, Osmosis_Streamswap_V1_MsgCreateSaleResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.createSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSaleInterceptors() ?? []
    )
  }

  /// Subscribe to a token sale. Any use at any time before the sale end can join
  /// the sale by sending `token_in` to the Sale through the Subscribe msg.
  /// During the sale, user `token_in` will be automatically charged every
  /// epoch to purchase `token_out`.
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func subscribe(
    _ request: Osmosis_Streamswap_V1_MsgSubscribe,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Streamswap_V1_MsgSubscribe, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  /// Withdraw sends back `amount` of unspent tokens_in to the user.
  /// If `amount` is empty, it will default to all unspent tokens.
  /// User can do it any time unless his deposit is empty.
  ///
  /// - Parameters:
  ///   - request: Request to send to Withdraw.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func withdraw(
    _ request: Osmosis_Streamswap_V1_MsgWithdraw,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Streamswap_V1_MsgWithdraw, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  /// ExitSale withdraws (by a user who subscribed to the sale) purchased
  /// tokens_out from the pool and remained tokens_in. Must be called after
  /// the sale end.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExitSale.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exitSale(
    _ request: Osmosis_Streamswap_V1_MsgExitSale,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Streamswap_V1_MsgExitSale, Osmosis_Streamswap_V1_MsgExitSaleResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.exitSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitSaleInterceptors() ?? []
    )
  }

  /// FinalizeSale clean ups the sale and sends income (earned tokens_in) to the
  /// Sale recipient. Returns error if called before the Sale end or it was
  /// already finalized. Anyone can call this method.
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalizeSale.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func finalizeSale(
    _ request: Osmosis_Streamswap_V1_MsgFinalizeSale,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Streamswap_V1_MsgFinalizeSale, Osmosis_Streamswap_V1_MsgFinalizeSaleResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.finalizeSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeSaleInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Osmosis_Streamswap_V1_MsgClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Osmosis_Streamswap_V1_MsgNIOClient")
public final class Osmosis_Streamswap_V1_MsgClient: Osmosis_Streamswap_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.streamswap.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Osmosis_Streamswap_V1_MsgNIOClient: Osmosis_Streamswap_V1_MsgClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.streamswap.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Osmosis_Streamswap_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateSaleCall(
    _ request: Osmosis_Streamswap_V1_MsgCreateSale,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Streamswap_V1_MsgCreateSale, Osmosis_Streamswap_V1_MsgCreateSaleResponse>

  func makeSubscribeCall(
    _ request: Osmosis_Streamswap_V1_MsgSubscribe,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Streamswap_V1_MsgSubscribe, SwiftProtobuf.Google_Protobuf_Empty>

  func makeWithdrawCall(
    _ request: Osmosis_Streamswap_V1_MsgWithdraw,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Streamswap_V1_MsgWithdraw, SwiftProtobuf.Google_Protobuf_Empty>

  func makeExitSaleCall(
    _ request: Osmosis_Streamswap_V1_MsgExitSale,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Streamswap_V1_MsgExitSale, Osmosis_Streamswap_V1_MsgExitSaleResponse>

  func makeFinalizeSaleCall(
    _ request: Osmosis_Streamswap_V1_MsgFinalizeSale,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Streamswap_V1_MsgFinalizeSale, Osmosis_Streamswap_V1_MsgFinalizeSaleResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Streamswap_V1_MsgAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Streamswap_V1_MsgClientMetadata.serviceDescriptor
  }

  public var interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateSaleCall(
    _ request: Osmosis_Streamswap_V1_MsgCreateSale,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Streamswap_V1_MsgCreateSale, Osmosis_Streamswap_V1_MsgCreateSaleResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.createSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSaleInterceptors() ?? []
    )
  }

  public func makeSubscribeCall(
    _ request: Osmosis_Streamswap_V1_MsgSubscribe,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Streamswap_V1_MsgSubscribe, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  public func makeWithdrawCall(
    _ request: Osmosis_Streamswap_V1_MsgWithdraw,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Streamswap_V1_MsgWithdraw, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  public func makeExitSaleCall(
    _ request: Osmosis_Streamswap_V1_MsgExitSale,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Streamswap_V1_MsgExitSale, Osmosis_Streamswap_V1_MsgExitSaleResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.exitSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitSaleInterceptors() ?? []
    )
  }

  public func makeFinalizeSaleCall(
    _ request: Osmosis_Streamswap_V1_MsgFinalizeSale,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Streamswap_V1_MsgFinalizeSale, Osmosis_Streamswap_V1_MsgFinalizeSaleResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.finalizeSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeSaleInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Streamswap_V1_MsgAsyncClientProtocol {
  public func createSale(
    _ request: Osmosis_Streamswap_V1_MsgCreateSale,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Streamswap_V1_MsgCreateSaleResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.createSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSaleInterceptors() ?? []
    )
  }

  public func subscribe(
    _ request: Osmosis_Streamswap_V1_MsgSubscribe,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  public func withdraw(
    _ request: Osmosis_Streamswap_V1_MsgWithdraw,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  public func exitSale(
    _ request: Osmosis_Streamswap_V1_MsgExitSale,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Streamswap_V1_MsgExitSaleResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.exitSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitSaleInterceptors() ?? []
    )
  }

  public func finalizeSale(
    _ request: Osmosis_Streamswap_V1_MsgFinalizeSale,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Streamswap_V1_MsgFinalizeSaleResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.finalizeSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeSaleInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Osmosis_Streamswap_V1_MsgAsyncClient: Osmosis_Streamswap_V1_MsgAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'createSale'.
  func makeCreateSaleInterceptors() -> [ClientInterceptor<Osmosis_Streamswap_V1_MsgCreateSale, Osmosis_Streamswap_V1_MsgCreateSaleResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribe'.
  func makeSubscribeInterceptors() -> [ClientInterceptor<Osmosis_Streamswap_V1_MsgSubscribe, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'withdraw'.
  func makeWithdrawInterceptors() -> [ClientInterceptor<Osmosis_Streamswap_V1_MsgWithdraw, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'exitSale'.
  func makeExitSaleInterceptors() -> [ClientInterceptor<Osmosis_Streamswap_V1_MsgExitSale, Osmosis_Streamswap_V1_MsgExitSaleResponse>]

  /// - Returns: Interceptors to use when invoking 'finalizeSale'.
  func makeFinalizeSaleInterceptors() -> [ClientInterceptor<Osmosis_Streamswap_V1_MsgFinalizeSale, Osmosis_Streamswap_V1_MsgFinalizeSaleResponse>]
}

public enum Osmosis_Streamswap_V1_MsgClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "osmosis.streamswap.v1.Msg",
    methods: [
      Osmosis_Streamswap_V1_MsgClientMetadata.Methods.createSale,
      Osmosis_Streamswap_V1_MsgClientMetadata.Methods.subscribe,
      Osmosis_Streamswap_V1_MsgClientMetadata.Methods.withdraw,
      Osmosis_Streamswap_V1_MsgClientMetadata.Methods.exitSale,
      Osmosis_Streamswap_V1_MsgClientMetadata.Methods.finalizeSale,
    ]
  )

  public enum Methods {
    public static let createSale = GRPCMethodDescriptor(
      name: "CreateSale",
      path: "/osmosis.streamswap.v1.Msg/CreateSale",
      type: GRPCCallType.unary
    )

    public static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/osmosis.streamswap.v1.Msg/Subscribe",
      type: GRPCCallType.unary
    )

    public static let withdraw = GRPCMethodDescriptor(
      name: "Withdraw",
      path: "/osmosis.streamswap.v1.Msg/Withdraw",
      type: GRPCCallType.unary
    )

    public static let exitSale = GRPCMethodDescriptor(
      name: "ExitSale",
      path: "/osmosis.streamswap.v1.Msg/ExitSale",
      type: GRPCCallType.unary
    )

    public static let finalizeSale = GRPCMethodDescriptor(
      name: "FinalizeSale",
      path: "/osmosis.streamswap.v1.Msg/FinalizeSale",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Osmosis_Streamswap_V1_MsgTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Osmosis_Streamswap_V1_MsgTestClient: Osmosis_Streamswap_V1_MsgClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Streamswap_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the CreateSale RPC. This must be called
  /// before calling 'createSale'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCreateSaleResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Streamswap_V1_MsgCreateSale>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Streamswap_V1_MsgCreateSale, Osmosis_Streamswap_V1_MsgCreateSaleResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.createSale.path, requestHandler: requestHandler)
  }

  public func enqueueCreateSaleResponse(
    _ response: Osmosis_Streamswap_V1_MsgCreateSaleResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Streamswap_V1_MsgCreateSale>) -> () = { _ in }
  ) {
    let stream = self.makeCreateSaleResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateSale'
  public var hasCreateSaleResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.createSale.path)
  }

  /// Make a unary response for the Subscribe RPC. This must be called
  /// before calling 'subscribe'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSubscribeResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Streamswap_V1_MsgSubscribe>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Streamswap_V1_MsgSubscribe, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.subscribe.path, requestHandler: requestHandler)
  }

  public func enqueueSubscribeResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Streamswap_V1_MsgSubscribe>) -> () = { _ in }
  ) {
    let stream = self.makeSubscribeResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Subscribe'
  public var hasSubscribeResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.subscribe.path)
  }

  /// Make a unary response for the Withdraw RPC. This must be called
  /// before calling 'withdraw'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeWithdrawResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Streamswap_V1_MsgWithdraw>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Streamswap_V1_MsgWithdraw, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.withdraw.path, requestHandler: requestHandler)
  }

  public func enqueueWithdrawResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Streamswap_V1_MsgWithdraw>) -> () = { _ in }
  ) {
    let stream = self.makeWithdrawResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Withdraw'
  public var hasWithdrawResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.withdraw.path)
  }

  /// Make a unary response for the ExitSale RPC. This must be called
  /// before calling 'exitSale'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeExitSaleResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Streamswap_V1_MsgExitSale>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Streamswap_V1_MsgExitSale, Osmosis_Streamswap_V1_MsgExitSaleResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.exitSale.path, requestHandler: requestHandler)
  }

  public func enqueueExitSaleResponse(
    _ response: Osmosis_Streamswap_V1_MsgExitSaleResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Streamswap_V1_MsgExitSale>) -> () = { _ in }
  ) {
    let stream = self.makeExitSaleResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ExitSale'
  public var hasExitSaleResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.exitSale.path)
  }

  /// Make a unary response for the FinalizeSale RPC. This must be called
  /// before calling 'finalizeSale'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeFinalizeSaleResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Streamswap_V1_MsgFinalizeSale>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Streamswap_V1_MsgFinalizeSale, Osmosis_Streamswap_V1_MsgFinalizeSaleResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.finalizeSale.path, requestHandler: requestHandler)
  }

  public func enqueueFinalizeSaleResponse(
    _ response: Osmosis_Streamswap_V1_MsgFinalizeSaleResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Streamswap_V1_MsgFinalizeSale>) -> () = { _ in }
  ) {
    let stream = self.makeFinalizeSaleResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'FinalizeSale'
  public var hasFinalizeSaleResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Streamswap_V1_MsgClientMetadata.Methods.finalizeSale.path)
  }
}

