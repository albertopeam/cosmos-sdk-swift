// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/gamm/pool-models/stableswap/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ===================== MsgCreatePool
public struct Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgCreateStableswapPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sender: String = String()

  public var poolParams: Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_PoolParams {
    get {return _poolParams ?? Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_PoolParams()}
    set {_poolParams = newValue}
  }
  /// Returns true if `poolParams` has been explicitly set.
  public var hasPoolParams: Bool {return self._poolParams != nil}
  /// Clears the value of `poolParams`. Subsequent reads from it will return its default value.
  public mutating func clearPoolParams() {self._poolParams = nil}

  public var initialPoolLiquidity: [Cosmos_Base_V1beta1_Coin] = []

  public var scalingFactors: [UInt64] = []

  public var futurePoolGovernor: String = String()

  public var scalingFactorController: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _poolParams: Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_PoolParams? = nil
}

/// Returns a poolID with custom poolName.
public struct Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgCreateStableswapPoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var poolID: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Sender must be the pool's scaling_factor_governor in order for the tx to
/// succeed. Adjusts stableswap scaling factors.
public struct Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgStableSwapAdjustScalingFactors {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sender: String = String()

  public var poolID: UInt64 = 0

  public var scalingFactors: [UInt64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgStableSwapAdjustScalingFactorsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgCreateStableswapPool: @unchecked Sendable {}
extension Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgCreateStableswapPoolResponse: @unchecked Sendable {}
extension Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgStableSwapAdjustScalingFactors: @unchecked Sendable {}
extension Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgStableSwapAdjustScalingFactorsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.gamm.poolmodels.stableswap.v1beta1"

extension Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgCreateStableswapPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgCreateStableswapPool"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "pool_params"),
    3: .standard(proto: "initial_pool_liquidity"),
    4: .standard(proto: "scaling_factors"),
    5: .standard(proto: "future_pool_governor"),
    6: .standard(proto: "scaling_factor_controller"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._poolParams) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.initialPoolLiquidity) }()
      case 4: try { try decoder.decodeRepeatedUInt64Field(value: &self.scalingFactors) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.futurePoolGovernor) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.scalingFactorController) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    try { if let v = self._poolParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.initialPoolLiquidity.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.initialPoolLiquidity, fieldNumber: 3)
    }
    if !self.scalingFactors.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.scalingFactors, fieldNumber: 4)
    }
    if !self.futurePoolGovernor.isEmpty {
      try visitor.visitSingularStringField(value: self.futurePoolGovernor, fieldNumber: 5)
    }
    if !self.scalingFactorController.isEmpty {
      try visitor.visitSingularStringField(value: self.scalingFactorController, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgCreateStableswapPool, rhs: Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgCreateStableswapPool) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs._poolParams != rhs._poolParams {return false}
    if lhs.initialPoolLiquidity != rhs.initialPoolLiquidity {return false}
    if lhs.scalingFactors != rhs.scalingFactors {return false}
    if lhs.futurePoolGovernor != rhs.futurePoolGovernor {return false}
    if lhs.scalingFactorController != rhs.scalingFactorController {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgCreateStableswapPoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgCreateStableswapPoolResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgCreateStableswapPoolResponse, rhs: Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgCreateStableswapPoolResponse) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgStableSwapAdjustScalingFactors: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgStableSwapAdjustScalingFactors"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "pool_id"),
    3: .standard(proto: "scaling_factors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.scalingFactors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.scalingFactors.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.scalingFactors, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgStableSwapAdjustScalingFactors, rhs: Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgStableSwapAdjustScalingFactors) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.scalingFactors != rhs.scalingFactors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgStableSwapAdjustScalingFactorsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgStableSwapAdjustScalingFactorsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgStableSwapAdjustScalingFactorsResponse, rhs: Osmosis_Gamm_Poolmodels_Stableswap_V1beta1_MsgStableSwapAdjustScalingFactorsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
