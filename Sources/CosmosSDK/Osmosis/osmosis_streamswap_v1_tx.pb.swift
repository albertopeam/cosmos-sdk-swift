// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/streamswap/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Osmosis_Streamswap_V1_MsgCreateSale {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sale creator and the account which provides token (token_out) to the sale.
  /// When processing this message, token_out
  public var creator: String = String()

  /// token_in is a denom used to buy `token_out`. May be referred as a
  /// "quote currency".
  public var tokenIn: String = String()

  /// token_out is a coin supply (denom + amount) to sell. May be referred as
  /// "base currency". The whole supply will be transferred from the creator
  /// to the module and will be sold during the sale.
  public var tokenOut: Cosmos_Base_V1beta1_Coin {
    get {return _tokenOut ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenOut = newValue}
  }
  /// Returns true if `tokenOut` has been explicitly set.
  public var hasTokenOut: Bool {return self._tokenOut != nil}
  /// Clears the value of `tokenOut`. Subsequent reads from it will return its default value.
  public mutating func clearTokenOut() {self._tokenOut = nil}

  /// Maximum fee the creator is going to pay for creating a sale. The creator
  /// will be charged params.SaleCreationFee. Transaction will fail if
  /// max_fee is smaller than params.SaleCreationFee. If empty, the creator
  /// doesn't accept any fee.
  public var maxFee: [Cosmos_Base_V1beta1_Coin] = []

  /// start time when the token sale starts.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// duration time that the sale takes place over
  public var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  public var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  public mutating func clearDuration() {self._duration = nil}

  /// Recipient is the account which receives earned `token_in` from when the
  /// sale is finalized. If not defined (empty) the creator
  /// account will be used.
  public var recipient: String = String()

  /// Name for the sale, max 40 characters, min 4. Required.
  public var name: String = String()

  /// URL with sale and project details. Can be a link a link to IPFS,
  /// hackmd, project page, blog post... Max 120 characters. Must be
  /// valid agains Go url.ParseRequestURI. Required.
  public var url: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tokenOut: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

public struct Osmosis_Streamswap_V1_MsgCreateSaleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var saleID: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Osmosis_Streamswap_V1_MsgSubscribe {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sender is an account address adding a deposit
  public var sender: String = String()

  /// ID of an existing sale.
  public var saleID: UInt64 = 0

  /// number of sale.token_in staked by a user.
  public var amount: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Osmosis_Streamswap_V1_MsgWithdraw {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sender is an account address subscribed to the sale_id
  public var sender: String = String()

  /// ID of a sale.
  public var saleID: UInt64 = 0

  /// amount of tokens_in to withdraw. Must be at most the amount of not spent
  /// tokens, unless set to null - then all remaining balance will be withdrawn.
  public var amount: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Osmosis_Streamswap_V1_MsgExitSale {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sender is an account address exiting a sale
  public var sender: String = String()

  /// ID of an existing sale.
  public var saleID: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Osmosis_Streamswap_V1_MsgExitSaleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Purchased amount of "out" tokens withdrawn to the user.
  public var purchased: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Osmosis_Streamswap_V1_MsgFinalizeSale {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sender is an account signing the message and triggering the finalization.
  public var sender: String = String()

  /// ID of an existing sale.
  public var saleID: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Osmosis_Streamswap_V1_MsgFinalizeSaleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Income amount of token_in sent to the sale recipient.
  public var income: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Streamswap_V1_MsgCreateSale: @unchecked Sendable {}
extension Osmosis_Streamswap_V1_MsgCreateSaleResponse: @unchecked Sendable {}
extension Osmosis_Streamswap_V1_MsgSubscribe: @unchecked Sendable {}
extension Osmosis_Streamswap_V1_MsgWithdraw: @unchecked Sendable {}
extension Osmosis_Streamswap_V1_MsgExitSale: @unchecked Sendable {}
extension Osmosis_Streamswap_V1_MsgExitSaleResponse: @unchecked Sendable {}
extension Osmosis_Streamswap_V1_MsgFinalizeSale: @unchecked Sendable {}
extension Osmosis_Streamswap_V1_MsgFinalizeSaleResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.streamswap.v1"

extension Osmosis_Streamswap_V1_MsgCreateSale: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgCreateSale"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .standard(proto: "token_in"),
    3: .standard(proto: "token_out"),
    4: .standard(proto: "max_fee"),
    5: .standard(proto: "start_time"),
    6: .same(proto: "duration"),
    7: .same(proto: "recipient"),
    8: .same(proto: "name"),
    9: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tokenIn) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._tokenOut) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.maxFee) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    if !self.tokenIn.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenIn, fieldNumber: 2)
    }
    try { if let v = self._tokenOut {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.maxFee.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.maxFee, fieldNumber: 4)
    }
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 7)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 8)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_MsgCreateSale, rhs: Osmosis_Streamswap_V1_MsgCreateSale) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs.tokenIn != rhs.tokenIn {return false}
    if lhs._tokenOut != rhs._tokenOut {return false}
    if lhs.maxFee != rhs.maxFee {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.name != rhs.name {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Streamswap_V1_MsgCreateSaleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgCreateSaleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sale_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.saleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.saleID != 0 {
      try visitor.visitSingularUInt64Field(value: self.saleID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_MsgCreateSaleResponse, rhs: Osmosis_Streamswap_V1_MsgCreateSaleResponse) -> Bool {
    if lhs.saleID != rhs.saleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Streamswap_V1_MsgSubscribe: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgSubscribe"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "sale_id"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.saleID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.saleID != 0 {
      try visitor.visitSingularUInt64Field(value: self.saleID, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_MsgSubscribe, rhs: Osmosis_Streamswap_V1_MsgSubscribe) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.saleID != rhs.saleID {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Streamswap_V1_MsgWithdraw: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgWithdraw"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "sale_id"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.saleID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.saleID != 0 {
      try visitor.visitSingularUInt64Field(value: self.saleID, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_MsgWithdraw, rhs: Osmosis_Streamswap_V1_MsgWithdraw) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.saleID != rhs.saleID {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Streamswap_V1_MsgExitSale: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgExitSale"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "sale_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.saleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.saleID != 0 {
      try visitor.visitSingularUInt64Field(value: self.saleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_MsgExitSale, rhs: Osmosis_Streamswap_V1_MsgExitSale) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.saleID != rhs.saleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Streamswap_V1_MsgExitSaleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgExitSaleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "purchased"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.purchased) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.purchased.isEmpty {
      try visitor.visitSingularStringField(value: self.purchased, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_MsgExitSaleResponse, rhs: Osmosis_Streamswap_V1_MsgExitSaleResponse) -> Bool {
    if lhs.purchased != rhs.purchased {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Streamswap_V1_MsgFinalizeSale: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgFinalizeSale"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "sale_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.saleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.saleID != 0 {
      try visitor.visitSingularUInt64Field(value: self.saleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_MsgFinalizeSale, rhs: Osmosis_Streamswap_V1_MsgFinalizeSale) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.saleID != rhs.saleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Streamswap_V1_MsgFinalizeSaleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgFinalizeSaleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "income"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.income) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.income.isEmpty {
      try visitor.visitSingularStringField(value: self.income, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_MsgFinalizeSaleResponse, rhs: Osmosis_Streamswap_V1_MsgFinalizeSaleResponse) -> Bool {
    if lhs.income != rhs.income {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
