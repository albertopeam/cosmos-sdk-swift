// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/streamswap/v1/state.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Osmosis_Streamswap_V1_Sale {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Destination for the earned token_in
  public var treasury: String {
    get {return _storage._treasury}
    set {_uniqueStorage()._treasury = newValue}
  }

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// token_out is a token denom to be bootstraped. May be referred as base
  /// currency, or a sale token.
  public var tokenOut: String {
    get {return _storage._tokenOut}
    set {_uniqueStorage()._tokenOut = newValue}
  }

  /// token_in is a token denom used to buy sale tokens (`token_out`). May be
  /// referred as quote_currency or payment token.
  public var tokenIn: String {
    get {return _storage._tokenIn}
    set {_uniqueStorage()._tokenIn = newValue}
  }

  /// total number of `tokens_out` to be sold during the continuous sale.
  public var tokenOutSupply: String {
    get {return _storage._tokenOutSupply}
    set {_uniqueStorage()._tokenOutSupply = newValue}
  }

  /// start time when the token emission starts.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  /// end time when the token emission ends. Can't be bigger than start +
  /// 139years (to avoid round overflow)
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {_uniqueStorage()._endTime = nil}

  /// Round number when the sale was last time updated.
  public var round: Int64 {
    get {return _storage._round}
    set {_uniqueStorage()._round = newValue}
  }

  /// Last round of the Sale;
  public var endRound: Int64 {
    get {return _storage._endRound}
    set {_uniqueStorage()._endRound = newValue}
  }

  /// amout of remaining token_out to sell
  public var outRemaining: String {
    get {return _storage._outRemaining}
    set {_uniqueStorage()._outRemaining = newValue}
  }

  /// amount of token_out sold
  public var outSold: String {
    get {return _storage._outSold}
    set {_uniqueStorage()._outSold = newValue}
  }

  /// out token per share
  public var outPerShare: String {
    get {return _storage._outPerShare}
    set {_uniqueStorage()._outPerShare = newValue}
  }

  /// total amount of currently staked coins (token_in) but not spent coins.
  public var staked: String {
    get {return _storage._staked}
    set {_uniqueStorage()._staked = newValue}
  }

  /// total amount of earned coins (token_in)
  public var income: String {
    get {return _storage._income}
    set {_uniqueStorage()._income = newValue}
  }

  /// total amount of shares
  public var shares: String {
    get {return _storage._shares}
    set {_uniqueStorage()._shares = newValue}
  }

  /// Name for the sale.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// URL with sale and project details.
  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// UserPosition represents user account in a sale
public struct Osmosis_Streamswap_V1_UserPosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var shares: String = String()

  /// total number of currently staked tokens
  public var staked: String = String()

  /// last token/share ratio
  public var outPerShare: String = String()

  /// amount of token_in spent
  public var spent: String = String()

  /// Amount of accumulated, not withdrawn, purchased tokens (token_out)
  public var purchased: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Streamswap_V1_Sale: @unchecked Sendable {}
extension Osmosis_Streamswap_V1_UserPosition: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.streamswap.v1"

extension Osmosis_Streamswap_V1_Sale: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Sale"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "treasury"),
    2: .same(proto: "id"),
    3: .standard(proto: "token_out"),
    4: .standard(proto: "token_in"),
    5: .standard(proto: "token_out_supply"),
    6: .standard(proto: "start_time"),
    7: .standard(proto: "end_time"),
    8: .same(proto: "round"),
    9: .standard(proto: "end_round"),
    10: .standard(proto: "out_remaining"),
    11: .standard(proto: "out_sold"),
    12: .standard(proto: "out_per_share"),
    13: .same(proto: "staked"),
    14: .same(proto: "income"),
    15: .same(proto: "shares"),
    20: .same(proto: "name"),
    21: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _treasury: String = String()
    var _id: UInt64 = 0
    var _tokenOut: String = String()
    var _tokenIn: String = String()
    var _tokenOutSupply: String = String()
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _round: Int64 = 0
    var _endRound: Int64 = 0
    var _outRemaining: String = String()
    var _outSold: String = String()
    var _outPerShare: String = String()
    var _staked: String = String()
    var _income: String = String()
    var _shares: String = String()
    var _name: String = String()
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _treasury = source._treasury
      _id = source._id
      _tokenOut = source._tokenOut
      _tokenIn = source._tokenIn
      _tokenOutSupply = source._tokenOutSupply
      _startTime = source._startTime
      _endTime = source._endTime
      _round = source._round
      _endRound = source._endRound
      _outRemaining = source._outRemaining
      _outSold = source._outSold
      _outPerShare = source._outPerShare
      _staked = source._staked
      _income = source._income
      _shares = source._shares
      _name = source._name
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._treasury) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._id) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._tokenOut) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._tokenIn) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._tokenOutSupply) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._startTime) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._endTime) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._round) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._endRound) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._outRemaining) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._outSold) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._outPerShare) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._staked) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._income) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._shares) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._url) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._treasury.isEmpty {
        try visitor.visitSingularStringField(value: _storage._treasury, fieldNumber: 1)
      }
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 2)
      }
      if !_storage._tokenOut.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tokenOut, fieldNumber: 3)
      }
      if !_storage._tokenIn.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tokenIn, fieldNumber: 4)
      }
      if !_storage._tokenOutSupply.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tokenOutSupply, fieldNumber: 5)
      }
      try { if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if _storage._round != 0 {
        try visitor.visitSingularInt64Field(value: _storage._round, fieldNumber: 8)
      }
      if _storage._endRound != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endRound, fieldNumber: 9)
      }
      if !_storage._outRemaining.isEmpty {
        try visitor.visitSingularStringField(value: _storage._outRemaining, fieldNumber: 10)
      }
      if !_storage._outSold.isEmpty {
        try visitor.visitSingularStringField(value: _storage._outSold, fieldNumber: 11)
      }
      if !_storage._outPerShare.isEmpty {
        try visitor.visitSingularStringField(value: _storage._outPerShare, fieldNumber: 12)
      }
      if !_storage._staked.isEmpty {
        try visitor.visitSingularStringField(value: _storage._staked, fieldNumber: 13)
      }
      if !_storage._income.isEmpty {
        try visitor.visitSingularStringField(value: _storage._income, fieldNumber: 14)
      }
      if !_storage._shares.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shares, fieldNumber: 15)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 20)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_Sale, rhs: Osmosis_Streamswap_V1_Sale) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._treasury != rhs_storage._treasury {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._tokenOut != rhs_storage._tokenOut {return false}
        if _storage._tokenIn != rhs_storage._tokenIn {return false}
        if _storage._tokenOutSupply != rhs_storage._tokenOutSupply {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._round != rhs_storage._round {return false}
        if _storage._endRound != rhs_storage._endRound {return false}
        if _storage._outRemaining != rhs_storage._outRemaining {return false}
        if _storage._outSold != rhs_storage._outSold {return false}
        if _storage._outPerShare != rhs_storage._outPerShare {return false}
        if _storage._staked != rhs_storage._staked {return false}
        if _storage._income != rhs_storage._income {return false}
        if _storage._shares != rhs_storage._shares {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Streamswap_V1_UserPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserPosition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shares"),
    2: .same(proto: "staked"),
    3: .standard(proto: "out_per_share"),
    4: .same(proto: "spent"),
    5: .same(proto: "purchased"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.shares) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staked) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.outPerShare) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.spent) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.purchased) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shares.isEmpty {
      try visitor.visitSingularStringField(value: self.shares, fieldNumber: 1)
    }
    if !self.staked.isEmpty {
      try visitor.visitSingularStringField(value: self.staked, fieldNumber: 2)
    }
    if !self.outPerShare.isEmpty {
      try visitor.visitSingularStringField(value: self.outPerShare, fieldNumber: 3)
    }
    if !self.spent.isEmpty {
      try visitor.visitSingularStringField(value: self.spent, fieldNumber: 4)
    }
    if !self.purchased.isEmpty {
      try visitor.visitSingularStringField(value: self.purchased, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_UserPosition, rhs: Osmosis_Streamswap_V1_UserPosition) -> Bool {
    if lhs.shares != rhs.shares {return false}
    if lhs.staked != rhs.staked {return false}
    if lhs.outPerShare != rhs.outPerShare {return false}
    if lhs.spent != rhs.spent {return false}
    if lhs.purchased != rhs.purchased {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
