//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/tokenfactory/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the tokefactory module's gRPC message service.
///
/// Usage: instantiate `Osmosis_Tokenfactory_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
public protocol Osmosis_Tokenfactory_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createDenom(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse>

  func mint(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse>

  func burn(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse>

  func changeAdmin(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse>

  func setDenomMetadata(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>
}

extension Osmosis_Tokenfactory_V1beta1_MsgClientProtocol {
  public var serviceName: String {
    return "osmosis.tokenfactory.v1beta1.Msg"
  }

  /// Unary call to CreateDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createDenom(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  /// Unary call to Mint
  ///
  /// - Parameters:
  ///   - request: Request to send to Mint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mint(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  /// Unary call to Burn
  ///
  /// - Parameters:
  ///   - request: Request to send to Burn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func burn(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  /// Unary call to ChangeAdmin
  ///
  /// - Parameters:
  ///   - request: Request to send to ChangeAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func changeAdmin(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? []
    )
  }

  /// Unary call to SetDenomMetadata
  ///
  /// - Parameters:
  ///   - request: Request to send to SetDenomMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setDenomMetadata(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Osmosis_Tokenfactory_V1beta1_MsgClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Osmosis_Tokenfactory_V1beta1_MsgNIOClient")
public final class Osmosis_Tokenfactory_V1beta1_MsgClient: Osmosis_Tokenfactory_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.tokenfactory.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Osmosis_Tokenfactory_V1beta1_MsgNIOClient: Osmosis_Tokenfactory_V1beta1_MsgClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.tokenfactory.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Msg defines the tokefactory module's gRPC message service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Osmosis_Tokenfactory_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateDenomCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse>

  func makeMintCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse>

  func makeBurnCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse>

  func makeChangeAdminCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse>

  func makeSetDenomMetadataCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Tokenfactory_V1beta1_MsgAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  public var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateDenomCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  public func makeMintCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  public func makeBurnCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  public func makeChangeAdminCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? []
    )
  }

  public func makeSetDenomMetadataCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Tokenfactory_V1beta1_MsgAsyncClientProtocol {
  public func createDenom(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  public func mint(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgMintResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  public func burn(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgBurnResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  public func changeAdmin(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? []
    )
  }

  public func setDenomMetadata(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Osmosis_Tokenfactory_V1beta1_MsgAsyncClient: Osmosis_Tokenfactory_V1beta1_MsgAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'createDenom'.
  func makeCreateDenomInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'mint'.
  func makeMintInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse>]

  /// - Returns: Interceptors to use when invoking 'burn'.
  func makeBurnInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse>]

  /// - Returns: Interceptors to use when invoking 'changeAdmin'.
  func makeChangeAdminInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'setDenomMetadata'.
  func makeSetDenomMetadataInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>]
}

public enum Osmosis_Tokenfactory_V1beta1_MsgClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "osmosis.tokenfactory.v1beta1.Msg",
    methods: [
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom,
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint,
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn,
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin,
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata,
    ]
  )

  public enum Methods {
    public static let createDenom = GRPCMethodDescriptor(
      name: "CreateDenom",
      path: "/osmosis.tokenfactory.v1beta1.Msg/CreateDenom",
      type: GRPCCallType.unary
    )

    public static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/osmosis.tokenfactory.v1beta1.Msg/Mint",
      type: GRPCCallType.unary
    )

    public static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/osmosis.tokenfactory.v1beta1.Msg/Burn",
      type: GRPCCallType.unary
    )

    public static let changeAdmin = GRPCMethodDescriptor(
      name: "ChangeAdmin",
      path: "/osmosis.tokenfactory.v1beta1.Msg/ChangeAdmin",
      type: GRPCCallType.unary
    )

    public static let setDenomMetadata = GRPCMethodDescriptor(
      name: "SetDenomMetadata",
      path: "/osmosis.tokenfactory.v1beta1.Msg/SetDenomMetadata",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Osmosis_Tokenfactory_V1beta1_MsgTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Osmosis_Tokenfactory_V1beta1_MsgTestClient: Osmosis_Tokenfactory_V1beta1_MsgClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the CreateDenom RPC. This must be called
  /// before calling 'createDenom'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCreateDenomResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom.path, requestHandler: requestHandler)
  }

  public func enqueueCreateDenomResponse(
    _ response: Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom>) -> () = { _ in }
  ) {
    let stream = self.makeCreateDenomResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateDenom'
  public var hasCreateDenomResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom.path)
  }

  /// Make a unary response for the Mint RPC. This must be called
  /// before calling 'mint'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeMintResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_MsgMint>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint.path, requestHandler: requestHandler)
  }

  public func enqueueMintResponse(
    _ response: Osmosis_Tokenfactory_V1beta1_MsgMintResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_MsgMint>) -> () = { _ in }
  ) {
    let stream = self.makeMintResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Mint'
  public var hasMintResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint.path)
  }

  /// Make a unary response for the Burn RPC. This must be called
  /// before calling 'burn'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeBurnResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_MsgBurn>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn.path, requestHandler: requestHandler)
  }

  public func enqueueBurnResponse(
    _ response: Osmosis_Tokenfactory_V1beta1_MsgBurnResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_MsgBurn>) -> () = { _ in }
  ) {
    let stream = self.makeBurnResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Burn'
  public var hasBurnResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn.path)
  }

  /// Make a unary response for the ChangeAdmin RPC. This must be called
  /// before calling 'changeAdmin'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeChangeAdminResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin.path, requestHandler: requestHandler)
  }

  public func enqueueChangeAdminResponse(
    _ response: Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin>) -> () = { _ in }
  ) {
    let stream = self.makeChangeAdminResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ChangeAdmin'
  public var hasChangeAdminResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin.path)
  }

  /// Make a unary response for the SetDenomMetadata RPC. This must be called
  /// before calling 'setDenomMetadata'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSetDenomMetadataResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata.path, requestHandler: requestHandler)
  }

  public func enqueueSetDenomMetadataResponse(
    _ response: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata>) -> () = { _ in }
  ) {
    let stream = self.makeSetDenomMetadataResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SetDenomMetadata'
  public var hasSetDenomMetadataResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata.path)
  }
}

