// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/streamswap/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the streamswap module's genesis state.
public struct Osmosis_Streamswap_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sales: [Osmosis_Streamswap_V1_Sale] = []

  public var userPositions: [Osmosis_Streamswap_V1_UserPositionKV] = []

  public var nextSaleID: UInt64 = 0

  public var params: Osmosis_Streamswap_V1_Params {
    get {return _params ?? Osmosis_Streamswap_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {self._params = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _params: Osmosis_Streamswap_V1_Params? = nil
}

/// UserPositionKV is a record in genesis representing acc_address user position
/// of a sale_id sale.
public struct Osmosis_Streamswap_V1_UserPositionKV {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// user account address
  public var accAddress: String = String()

  public var saleID: UInt64 = 0

  public var userPosition: Osmosis_Streamswap_V1_UserPosition {
    get {return _userPosition ?? Osmosis_Streamswap_V1_UserPosition()}
    set {_userPosition = newValue}
  }
  /// Returns true if `userPosition` has been explicitly set.
  public var hasUserPosition: Bool {return self._userPosition != nil}
  /// Clears the value of `userPosition`. Subsequent reads from it will return its default value.
  public mutating func clearUserPosition() {self._userPosition = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userPosition: Osmosis_Streamswap_V1_UserPosition? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Streamswap_V1_GenesisState: @unchecked Sendable {}
extension Osmosis_Streamswap_V1_UserPositionKV: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.streamswap.v1"

extension Osmosis_Streamswap_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenesisState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sales"),
    2: .standard(proto: "user_positions"),
    3: .standard(proto: "next_sale_id"),
    4: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.sales) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.userPositions) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.nextSaleID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sales.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sales, fieldNumber: 1)
    }
    if !self.userPositions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userPositions, fieldNumber: 2)
    }
    if self.nextSaleID != 0 {
      try visitor.visitSingularUInt64Field(value: self.nextSaleID, fieldNumber: 3)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_GenesisState, rhs: Osmosis_Streamswap_V1_GenesisState) -> Bool {
    if lhs.sales != rhs.sales {return false}
    if lhs.userPositions != rhs.userPositions {return false}
    if lhs.nextSaleID != rhs.nextSaleID {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Streamswap_V1_UserPositionKV: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserPositionKV"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "acc_address"),
    2: .standard(proto: "sale_id"),
    3: .standard(proto: "user_position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accAddress) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.saleID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._userPosition) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.accAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.accAddress, fieldNumber: 1)
    }
    if self.saleID != 0 {
      try visitor.visitSingularUInt64Field(value: self.saleID, fieldNumber: 2)
    }
    try { if let v = self._userPosition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Osmosis_Streamswap_V1_UserPositionKV, rhs: Osmosis_Streamswap_V1_UserPositionKV) -> Bool {
    if lhs.accAddress != rhs.accAddress {return false}
    if lhs.saleID != rhs.saleID {return false}
    if lhs._userPosition != rhs._userPosition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
