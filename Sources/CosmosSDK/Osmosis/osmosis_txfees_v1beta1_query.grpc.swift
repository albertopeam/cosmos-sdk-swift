//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/txfees/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Osmosis_Txfees_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Osmosis_Txfees_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func feeTokens(
    _ request: Osmosis_Txfees_V1beta1_QueryFeeTokensRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest, Osmosis_Txfees_V1beta1_QueryFeeTokensResponse>

  func denomSpotPrice(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest, Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse>

  func denomPoolId(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest, Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse>

  func baseDenom(
    _ request: Osmosis_Txfees_V1beta1_QueryBaseDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest, Osmosis_Txfees_V1beta1_QueryBaseDenomResponse>
}

extension Osmosis_Txfees_V1beta1_QueryClientProtocol {
  public var serviceName: String {
    return "osmosis.txfees.v1beta1.Query"
  }

  /// FeeTokens returns a list of all the whitelisted fee tokens and their
  /// corresponding pools. It does not include the BaseDenom, which has its own
  /// query endpoint
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func feeTokens(
    _ request: Osmosis_Txfees_V1beta1_QueryFeeTokensRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest, Osmosis_Txfees_V1beta1_QueryFeeTokensResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.feeTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeTokensInterceptors() ?? []
    )
  }

  /// DenomSpotPrice returns all spot prices by each registered token denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomSpotPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func denomSpotPrice(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest, Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomSpotPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomSpotPriceInterceptors() ?? []
    )
  }

  /// Returns the poolID for a specified denom input.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomPoolId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func denomPoolId(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest, Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomPoolId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomPoolIdInterceptors() ?? []
    )
  }

  /// Returns a list of all base denom tokens and their corresponding pools.
  ///
  /// - Parameters:
  ///   - request: Request to send to BaseDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func baseDenom(
    _ request: Osmosis_Txfees_V1beta1_QueryBaseDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest, Osmosis_Txfees_V1beta1_QueryBaseDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.baseDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBaseDenomInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Osmosis_Txfees_V1beta1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Osmosis_Txfees_V1beta1_QueryNIOClient")
public final class Osmosis_Txfees_V1beta1_QueryClient: Osmosis_Txfees_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.txfees.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Osmosis_Txfees_V1beta1_QueryNIOClient: Osmosis_Txfees_V1beta1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.txfees.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Osmosis_Txfees_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeFeeTokensCall(
    _ request: Osmosis_Txfees_V1beta1_QueryFeeTokensRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest, Osmosis_Txfees_V1beta1_QueryFeeTokensResponse>

  func makeDenomSpotPriceCall(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest, Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse>

  func makeDenomPoolIDCall(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest, Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse>

  func makeBaseDenomCall(
    _ request: Osmosis_Txfees_V1beta1_QueryBaseDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest, Osmosis_Txfees_V1beta1_QueryBaseDenomResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Txfees_V1beta1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Txfees_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeFeeTokensCall(
    _ request: Osmosis_Txfees_V1beta1_QueryFeeTokensRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest, Osmosis_Txfees_V1beta1_QueryFeeTokensResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.feeTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeTokensInterceptors() ?? []
    )
  }

  public func makeDenomSpotPriceCall(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest, Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomSpotPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomSpotPriceInterceptors() ?? []
    )
  }

  public func makeDenomPoolIDCall(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest, Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomPoolId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomPoolIdInterceptors() ?? []
    )
  }

  public func makeBaseDenomCall(
    _ request: Osmosis_Txfees_V1beta1_QueryBaseDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest, Osmosis_Txfees_V1beta1_QueryBaseDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.baseDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBaseDenomInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Txfees_V1beta1_QueryAsyncClientProtocol {
  public func feeTokens(
    _ request: Osmosis_Txfees_V1beta1_QueryFeeTokensRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Txfees_V1beta1_QueryFeeTokensResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.feeTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeTokensInterceptors() ?? []
    )
  }

  public func denomSpotPrice(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomSpotPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomSpotPriceInterceptors() ?? []
    )
  }

  public func denomPoolId(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomPoolId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomPoolIdInterceptors() ?? []
    )
  }

  public func baseDenom(
    _ request: Osmosis_Txfees_V1beta1_QueryBaseDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Txfees_V1beta1_QueryBaseDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.baseDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBaseDenomInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Osmosis_Txfees_V1beta1_QueryAsyncClient: Osmosis_Txfees_V1beta1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'feeTokens'.
  func makeFeeTokensInterceptors() -> [ClientInterceptor<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest, Osmosis_Txfees_V1beta1_QueryFeeTokensResponse>]

  /// - Returns: Interceptors to use when invoking 'denomSpotPrice'.
  func makeDenomSpotPriceInterceptors() -> [ClientInterceptor<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest, Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'denomPoolId'.
  func makeDenomPoolIdInterceptors() -> [ClientInterceptor<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest, Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse>]

  /// - Returns: Interceptors to use when invoking 'baseDenom'.
  func makeBaseDenomInterceptors() -> [ClientInterceptor<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest, Osmosis_Txfees_V1beta1_QueryBaseDenomResponse>]
}

public enum Osmosis_Txfees_V1beta1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.txfees.v1beta1.Query",
    methods: [
      Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.feeTokens,
      Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomSpotPrice,
      Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomPoolId,
      Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.baseDenom,
    ]
  )

  public enum Methods {
    public static let feeTokens = GRPCMethodDescriptor(
      name: "FeeTokens",
      path: "/osmosis.txfees.v1beta1.Query/FeeTokens",
      type: GRPCCallType.unary
    )

    public static let denomSpotPrice = GRPCMethodDescriptor(
      name: "DenomSpotPrice",
      path: "/osmosis.txfees.v1beta1.Query/DenomSpotPrice",
      type: GRPCCallType.unary
    )

    public static let denomPoolId = GRPCMethodDescriptor(
      name: "DenomPoolId",
      path: "/osmosis.txfees.v1beta1.Query/DenomPoolId",
      type: GRPCCallType.unary
    )

    public static let baseDenom = GRPCMethodDescriptor(
      name: "BaseDenom",
      path: "/osmosis.txfees.v1beta1.Query/BaseDenom",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Osmosis_Txfees_V1beta1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Osmosis_Txfees_V1beta1_QueryTestClient: Osmosis_Txfees_V1beta1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the FeeTokens RPC. This must be called
  /// before calling 'feeTokens'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeFeeTokensResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest, Osmosis_Txfees_V1beta1_QueryFeeTokensResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.feeTokens.path, requestHandler: requestHandler)
  }

  public func enqueueFeeTokensResponse(
    _ response: Osmosis_Txfees_V1beta1_QueryFeeTokensResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest>) -> () = { _ in }
  ) {
    let stream = self.makeFeeTokensResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'FeeTokens'
  public var hasFeeTokensResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.feeTokens.path)
  }

  /// Make a unary response for the DenomSpotPrice RPC. This must be called
  /// before calling 'denomSpotPrice'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDenomSpotPriceResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest, Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomSpotPrice.path, requestHandler: requestHandler)
  }

  public func enqueueDenomSpotPriceResponse(
    _ response: Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDenomSpotPriceResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DenomSpotPrice'
  public var hasDenomSpotPriceResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomSpotPrice.path)
  }

  /// Make a unary response for the DenomPoolId RPC. This must be called
  /// before calling 'denomPoolId'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDenomPoolIdResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest, Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomPoolId.path, requestHandler: requestHandler)
  }

  public func enqueueDenomPoolIdResponse(
    _ response: Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDenomPoolIdResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DenomPoolId'
  public var hasDenomPoolIdResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.denomPoolId.path)
  }

  /// Make a unary response for the BaseDenom RPC. This must be called
  /// before calling 'baseDenom'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeBaseDenomResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest, Osmosis_Txfees_V1beta1_QueryBaseDenomResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.baseDenom.path, requestHandler: requestHandler)
  }

  public func enqueueBaseDenomResponse(
    _ response: Osmosis_Txfees_V1beta1_QueryBaseDenomResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest>) -> () = { _ in }
  ) {
    let stream = self.makeBaseDenomResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'BaseDenom'
  public var hasBaseDenomResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Txfees_V1beta1_QueryClientMetadata.Methods.baseDenom.path)
  }
}

