//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/incentives/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Osmosis_Incentives_QueryClient`, then call methods of this protocol to make API calls.
public protocol Osmosis_Incentives_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? { get }

  func moduleToDistributeCoins(
    _ request: Osmosis_Incentives_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse>

  func gaugeByID(
    _ request: Osmosis_Incentives_GaugeByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse>

  func gauges(
    _ request: Osmosis_Incentives_GaugesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse>

  func activeGauges(
    _ request: Osmosis_Incentives_ActiveGaugesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse>

  func activeGaugesPerDenom(
    _ request: Osmosis_Incentives_ActiveGaugesPerDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse>

  func upcomingGauges(
    _ request: Osmosis_Incentives_UpcomingGaugesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse>

  func upcomingGaugesPerDenom(
    _ request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse>

  func rewardsEst(
    _ request: Osmosis_Incentives_RewardsEstRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse>

  func lockableDurations(
    _ request: Osmosis_Incentives_QueryLockableDurationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse>
}

extension Osmosis_Incentives_QueryClientProtocol {
  public var serviceName: String {
    return "osmosis.incentives.Query"
  }

  /// ModuleToDistributeCoins returns coins that are going to be distributed
  ///
  /// - Parameters:
  ///   - request: Request to send to ModuleToDistributeCoins.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func moduleToDistributeCoins(
    _ request: Osmosis_Incentives_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.moduleToDistributeCoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? []
    )
  }

  /// GaugeByID returns gauges by their respective ID
  ///
  /// - Parameters:
  ///   - request: Request to send to GaugeByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func gaugeByID(
    _ request: Osmosis_Incentives_GaugeByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gaugeByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugeByIDInterceptors() ?? []
    )
  }

  /// Gauges returns both upcoming and active gauges
  ///
  /// - Parameters:
  ///   - request: Request to send to Gauges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func gauges(
    _ request: Osmosis_Incentives_GaugesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugesInterceptors() ?? []
    )
  }

  /// ActiveGauges returns active gauges
  ///
  /// - Parameters:
  ///   - request: Request to send to ActiveGauges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func activeGauges(
    _ request: Osmosis_Incentives_ActiveGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesInterceptors() ?? []
    )
  }

  /// ActiveGaugesPerDenom returns active gauges by denom
  ///
  /// - Parameters:
  ///   - request: Request to send to ActiveGaugesPerDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func activeGaugesPerDenom(
    _ request: Osmosis_Incentives_ActiveGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesPerDenomInterceptors() ?? []
    )
  }

  /// Returns scheduled gauges that have not yet occured
  ///
  /// - Parameters:
  ///   - request: Request to send to UpcomingGauges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func upcomingGauges(
    _ request: Osmosis_Incentives_UpcomingGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesInterceptors() ?? []
    )
  }

  /// UpcomingGaugesPerDenom returns scheduled gauges that have not yet occured
  /// by denom
  ///
  /// - Parameters:
  ///   - request: Request to send to UpcomingGaugesPerDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func upcomingGaugesPerDenom(
    _ request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesPerDenomInterceptors() ?? []
    )
  }

  /// RewardsEst returns an estimate of the rewards from now until a specified
  /// time in the future The querier either provides an address or a set of locks
  /// for which they want to find the associated rewards
  ///
  /// - Parameters:
  ///   - request: Request to send to RewardsEst.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func rewardsEst(
    _ request: Osmosis_Incentives_RewardsEstRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.rewardsEst.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsEstInterceptors() ?? []
    )
  }

  /// LockableDurations returns lockable durations that are valid to distribute
  /// incentives for
  ///
  /// - Parameters:
  ///   - request: Request to send to LockableDurations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func lockableDurations(
    _ request: Osmosis_Incentives_QueryLockableDurationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.lockableDurations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockableDurationsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Osmosis_Incentives_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Osmosis_Incentives_QueryNIOClient")
public final class Osmosis_Incentives_QueryClient: Osmosis_Incentives_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.incentives.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Osmosis_Incentives_QueryNIOClient: Osmosis_Incentives_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.incentives.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Osmosis_Incentives_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? { get }

  func makeModuleToDistributeCoinsCall(
    _ request: Osmosis_Incentives_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse>

  func makeGaugeByIDCall(
    _ request: Osmosis_Incentives_GaugeByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse>

  func makeGaugesCall(
    _ request: Osmosis_Incentives_GaugesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse>

  func makeActiveGaugesCall(
    _ request: Osmosis_Incentives_ActiveGaugesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse>

  func makeActiveGaugesPerDenomCall(
    _ request: Osmosis_Incentives_ActiveGaugesPerDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse>

  func makeUpcomingGaugesCall(
    _ request: Osmosis_Incentives_UpcomingGaugesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse>

  func makeUpcomingGaugesPerDenomCall(
    _ request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse>

  func makeRewardsEstCall(
    _ request: Osmosis_Incentives_RewardsEstRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse>

  func makeLockableDurationsCall(
    _ request: Osmosis_Incentives_QueryLockableDurationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Incentives_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Incentives_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeModuleToDistributeCoinsCall(
    _ request: Osmosis_Incentives_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.moduleToDistributeCoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? []
    )
  }

  public func makeGaugeByIDCall(
    _ request: Osmosis_Incentives_GaugeByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gaugeByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugeByIDInterceptors() ?? []
    )
  }

  public func makeGaugesCall(
    _ request: Osmosis_Incentives_GaugesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugesInterceptors() ?? []
    )
  }

  public func makeActiveGaugesCall(
    _ request: Osmosis_Incentives_ActiveGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesInterceptors() ?? []
    )
  }

  public func makeActiveGaugesPerDenomCall(
    _ request: Osmosis_Incentives_ActiveGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesPerDenomInterceptors() ?? []
    )
  }

  public func makeUpcomingGaugesCall(
    _ request: Osmosis_Incentives_UpcomingGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesInterceptors() ?? []
    )
  }

  public func makeUpcomingGaugesPerDenomCall(
    _ request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesPerDenomInterceptors() ?? []
    )
  }

  public func makeRewardsEstCall(
    _ request: Osmosis_Incentives_RewardsEstRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.rewardsEst.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsEstInterceptors() ?? []
    )
  }

  public func makeLockableDurationsCall(
    _ request: Osmosis_Incentives_QueryLockableDurationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.lockableDurations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockableDurationsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Incentives_QueryAsyncClientProtocol {
  public func moduleToDistributeCoins(
    _ request: Osmosis_Incentives_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_ModuleToDistributeCoinsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.moduleToDistributeCoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? []
    )
  }

  public func gaugeByID(
    _ request: Osmosis_Incentives_GaugeByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_GaugeByIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gaugeByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugeByIDInterceptors() ?? []
    )
  }

  public func gauges(
    _ request: Osmosis_Incentives_GaugesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_GaugesResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugesInterceptors() ?? []
    )
  }

  public func activeGauges(
    _ request: Osmosis_Incentives_ActiveGaugesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_ActiveGaugesResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesInterceptors() ?? []
    )
  }

  public func activeGaugesPerDenom(
    _ request: Osmosis_Incentives_ActiveGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_ActiveGaugesPerDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesPerDenomInterceptors() ?? []
    )
  }

  public func upcomingGauges(
    _ request: Osmosis_Incentives_UpcomingGaugesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_UpcomingGaugesResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesInterceptors() ?? []
    )
  }

  public func upcomingGaugesPerDenom(
    _ request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_UpcomingGaugesPerDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesPerDenomInterceptors() ?? []
    )
  }

  public func rewardsEst(
    _ request: Osmosis_Incentives_RewardsEstRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_RewardsEstResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.rewardsEst.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsEstInterceptors() ?? []
    )
  }

  public func lockableDurations(
    _ request: Osmosis_Incentives_QueryLockableDurationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_QueryLockableDurationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.lockableDurations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockableDurationsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Osmosis_Incentives_QueryAsyncClient: Osmosis_Incentives_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Osmosis_Incentives_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'moduleToDistributeCoins'.
  func makeModuleToDistributeCoinsInterceptors() -> [ClientInterceptor<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse>]

  /// - Returns: Interceptors to use when invoking 'gaugeByID'.
  func makeGaugeByIDInterceptors() -> [ClientInterceptor<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'gauges'.
  func makeGaugesInterceptors() -> [ClientInterceptor<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse>]

  /// - Returns: Interceptors to use when invoking 'activeGauges'.
  func makeActiveGaugesInterceptors() -> [ClientInterceptor<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse>]

  /// - Returns: Interceptors to use when invoking 'activeGaugesPerDenom'.
  func makeActiveGaugesPerDenomInterceptors() -> [ClientInterceptor<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'upcomingGauges'.
  func makeUpcomingGaugesInterceptors() -> [ClientInterceptor<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse>]

  /// - Returns: Interceptors to use when invoking 'upcomingGaugesPerDenom'.
  func makeUpcomingGaugesPerDenomInterceptors() -> [ClientInterceptor<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'rewardsEst'.
  func makeRewardsEstInterceptors() -> [ClientInterceptor<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse>]

  /// - Returns: Interceptors to use when invoking 'lockableDurations'.
  func makeLockableDurationsInterceptors() -> [ClientInterceptor<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse>]
}

public enum Osmosis_Incentives_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.incentives.Query",
    methods: [
      Osmosis_Incentives_QueryClientMetadata.Methods.moduleToDistributeCoins,
      Osmosis_Incentives_QueryClientMetadata.Methods.gaugeByID,
      Osmosis_Incentives_QueryClientMetadata.Methods.gauges,
      Osmosis_Incentives_QueryClientMetadata.Methods.activeGauges,
      Osmosis_Incentives_QueryClientMetadata.Methods.activeGaugesPerDenom,
      Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGauges,
      Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGaugesPerDenom,
      Osmosis_Incentives_QueryClientMetadata.Methods.rewardsEst,
      Osmosis_Incentives_QueryClientMetadata.Methods.lockableDurations,
    ]
  )

  public enum Methods {
    public static let moduleToDistributeCoins = GRPCMethodDescriptor(
      name: "ModuleToDistributeCoins",
      path: "/osmosis.incentives.Query/ModuleToDistributeCoins",
      type: GRPCCallType.unary
    )

    public static let gaugeByID = GRPCMethodDescriptor(
      name: "GaugeByID",
      path: "/osmosis.incentives.Query/GaugeByID",
      type: GRPCCallType.unary
    )

    public static let gauges = GRPCMethodDescriptor(
      name: "Gauges",
      path: "/osmosis.incentives.Query/Gauges",
      type: GRPCCallType.unary
    )

    public static let activeGauges = GRPCMethodDescriptor(
      name: "ActiveGauges",
      path: "/osmosis.incentives.Query/ActiveGauges",
      type: GRPCCallType.unary
    )

    public static let activeGaugesPerDenom = GRPCMethodDescriptor(
      name: "ActiveGaugesPerDenom",
      path: "/osmosis.incentives.Query/ActiveGaugesPerDenom",
      type: GRPCCallType.unary
    )

    public static let upcomingGauges = GRPCMethodDescriptor(
      name: "UpcomingGauges",
      path: "/osmosis.incentives.Query/UpcomingGauges",
      type: GRPCCallType.unary
    )

    public static let upcomingGaugesPerDenom = GRPCMethodDescriptor(
      name: "UpcomingGaugesPerDenom",
      path: "/osmosis.incentives.Query/UpcomingGaugesPerDenom",
      type: GRPCCallType.unary
    )

    public static let rewardsEst = GRPCMethodDescriptor(
      name: "RewardsEst",
      path: "/osmosis.incentives.Query/RewardsEst",
      type: GRPCCallType.unary
    )

    public static let lockableDurations = GRPCMethodDescriptor(
      name: "LockableDurations",
      path: "/osmosis.incentives.Query/LockableDurations",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Osmosis_Incentives_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Osmosis_Incentives_QueryTestClient: Osmosis_Incentives_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the ModuleToDistributeCoins RPC. This must be called
  /// before calling 'moduleToDistributeCoins'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeModuleToDistributeCoinsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_ModuleToDistributeCoinsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Incentives_QueryClientMetadata.Methods.moduleToDistributeCoins.path, requestHandler: requestHandler)
  }

  public func enqueueModuleToDistributeCoinsResponse(
    _ response: Osmosis_Incentives_ModuleToDistributeCoinsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_ModuleToDistributeCoinsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeModuleToDistributeCoinsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ModuleToDistributeCoins'
  public var hasModuleToDistributeCoinsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Incentives_QueryClientMetadata.Methods.moduleToDistributeCoins.path)
  }

  /// Make a unary response for the GaugeByID RPC. This must be called
  /// before calling 'gaugeByID'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGaugeByIDResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_GaugeByIDRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Incentives_QueryClientMetadata.Methods.gaugeByID.path, requestHandler: requestHandler)
  }

  public func enqueueGaugeByIDResponse(
    _ response: Osmosis_Incentives_GaugeByIDResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_GaugeByIDRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGaugeByIDResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GaugeByID'
  public var hasGaugeByIDResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Incentives_QueryClientMetadata.Methods.gaugeByID.path)
  }

  /// Make a unary response for the Gauges RPC. This must be called
  /// before calling 'gauges'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGaugesResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_GaugesRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Incentives_QueryClientMetadata.Methods.gauges.path, requestHandler: requestHandler)
  }

  public func enqueueGaugesResponse(
    _ response: Osmosis_Incentives_GaugesResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_GaugesRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGaugesResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Gauges'
  public var hasGaugesResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Incentives_QueryClientMetadata.Methods.gauges.path)
  }

  /// Make a unary response for the ActiveGauges RPC. This must be called
  /// before calling 'activeGauges'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeActiveGaugesResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_ActiveGaugesRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGauges.path, requestHandler: requestHandler)
  }

  public func enqueueActiveGaugesResponse(
    _ response: Osmosis_Incentives_ActiveGaugesResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_ActiveGaugesRequest>) -> () = { _ in }
  ) {
    let stream = self.makeActiveGaugesResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ActiveGauges'
  public var hasActiveGaugesResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Incentives_QueryClientMetadata.Methods.activeGauges.path)
  }

  /// Make a unary response for the ActiveGaugesPerDenom RPC. This must be called
  /// before calling 'activeGaugesPerDenom'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeActiveGaugesPerDenomResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_ActiveGaugesPerDenomRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGaugesPerDenom.path, requestHandler: requestHandler)
  }

  public func enqueueActiveGaugesPerDenomResponse(
    _ response: Osmosis_Incentives_ActiveGaugesPerDenomResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_ActiveGaugesPerDenomRequest>) -> () = { _ in }
  ) {
    let stream = self.makeActiveGaugesPerDenomResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ActiveGaugesPerDenom'
  public var hasActiveGaugesPerDenomResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Incentives_QueryClientMetadata.Methods.activeGaugesPerDenom.path)
  }

  /// Make a unary response for the UpcomingGauges RPC. This must be called
  /// before calling 'upcomingGauges'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpcomingGaugesResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_UpcomingGaugesRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGauges.path, requestHandler: requestHandler)
  }

  public func enqueueUpcomingGaugesResponse(
    _ response: Osmosis_Incentives_UpcomingGaugesResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_UpcomingGaugesRequest>) -> () = { _ in }
  ) {
    let stream = self.makeUpcomingGaugesResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpcomingGauges'
  public var hasUpcomingGaugesResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGauges.path)
  }

  /// Make a unary response for the UpcomingGaugesPerDenom RPC. This must be called
  /// before calling 'upcomingGaugesPerDenom'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpcomingGaugesPerDenomResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_UpcomingGaugesPerDenomRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGaugesPerDenom.path, requestHandler: requestHandler)
  }

  public func enqueueUpcomingGaugesPerDenomResponse(
    _ response: Osmosis_Incentives_UpcomingGaugesPerDenomResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_UpcomingGaugesPerDenomRequest>) -> () = { _ in }
  ) {
    let stream = self.makeUpcomingGaugesPerDenomResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpcomingGaugesPerDenom'
  public var hasUpcomingGaugesPerDenomResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGaugesPerDenom.path)
  }

  /// Make a unary response for the RewardsEst RPC. This must be called
  /// before calling 'rewardsEst'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeRewardsEstResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_RewardsEstRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Incentives_QueryClientMetadata.Methods.rewardsEst.path, requestHandler: requestHandler)
  }

  public func enqueueRewardsEstResponse(
    _ response: Osmosis_Incentives_RewardsEstResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_RewardsEstRequest>) -> () = { _ in }
  ) {
    let stream = self.makeRewardsEstResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'RewardsEst'
  public var hasRewardsEstResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Incentives_QueryClientMetadata.Methods.rewardsEst.path)
  }

  /// Make a unary response for the LockableDurations RPC. This must be called
  /// before calling 'lockableDurations'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeLockableDurationsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_QueryLockableDurationsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Incentives_QueryClientMetadata.Methods.lockableDurations.path, requestHandler: requestHandler)
  }

  public func enqueueLockableDurationsResponse(
    _ response: Osmosis_Incentives_QueryLockableDurationsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_QueryLockableDurationsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeLockableDurationsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'LockableDurations'
  public var hasLockableDurationsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Incentives_QueryClientMetadata.Methods.lockableDurations.path)
  }
}

