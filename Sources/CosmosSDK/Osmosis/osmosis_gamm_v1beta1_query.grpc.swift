//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/gamm/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Osmosis_Gamm_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Osmosis_Gamm_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func pools(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryPoolsRequest, Osmosis_Gamm_V1beta1_QueryPoolsResponse>

  func numPools(
    _ request: Osmosis_Gamm_V1beta1_QueryNumPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryNumPoolsRequest, Osmosis_Gamm_V1beta1_QueryNumPoolsResponse>

  func totalLiquidity(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalLiquidityResponse>

  func pool(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryPoolRequest, Osmosis_Gamm_V1beta1_QueryPoolResponse>

  func poolType(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolTypeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryPoolTypeRequest, Osmosis_Gamm_V1beta1_QueryPoolTypeResponse>

  func poolParams(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryPoolParamsRequest, Osmosis_Gamm_V1beta1_QueryPoolParamsResponse>

  func totalPoolLiquidity(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityResponse>

  func totalShares(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalSharesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryTotalSharesRequest, Osmosis_Gamm_V1beta1_QueryTotalSharesResponse>

  func spotPrice(
    _ request: Osmosis_Gamm_V1beta1_QuerySpotPriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QuerySpotPriceRequest, Osmosis_Gamm_V1beta1_QuerySpotPriceResponse>

  func estimateSwapExactAmountIn(
    _ request: Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountInResponse>

  func estimateSwapExactAmountOut(
    _ request: Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutResponse>
}

extension Osmosis_Gamm_V1beta1_QueryClientProtocol {
  public var serviceName: String {
    return "osmosis.gamm.v1beta1.Query"
  }

  /// Unary call to Pools
  ///
  /// - Parameters:
  ///   - request: Request to send to Pools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pools(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryPoolsRequest, Osmosis_Gamm_V1beta1_QueryPoolsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  /// Unary call to NumPools
  ///
  /// - Parameters:
  ///   - request: Request to send to NumPools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func numPools(
    _ request: Osmosis_Gamm_V1beta1_QueryNumPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryNumPoolsRequest, Osmosis_Gamm_V1beta1_QueryNumPoolsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.numPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumPoolsInterceptors() ?? []
    )
  }

  /// Unary call to TotalLiquidity
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalLiquidity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func totalLiquidity(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalLiquidityResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalLiquidityInterceptors() ?? []
    )
  }

  /// Per Pool gRPC Endpoints
  ///
  /// - Parameters:
  ///   - request: Request to send to Pool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pool(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryPoolRequest, Osmosis_Gamm_V1beta1_QueryPoolResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  /// PoolType returns the type of the pool.
  /// Returns "Balancer" as a string literal when the pool is a balancer pool.
  /// Errors if the pool is failed to be type caseted.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolType.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func poolType(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolTypeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryPoolTypeRequest, Osmosis_Gamm_V1beta1_QueryPoolTypeResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolTypeInterceptors() ?? []
    )
  }

  /// Unary call to PoolParams
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func poolParams(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryPoolParamsRequest, Osmosis_Gamm_V1beta1_QueryPoolParamsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolParamsInterceptors() ?? []
    )
  }

  /// Unary call to TotalPoolLiquidity
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalPoolLiquidity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func totalPoolLiquidity(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalPoolLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalPoolLiquidityInterceptors() ?? []
    )
  }

  /// Unary call to TotalShares
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalShares.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func totalShares(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalSharesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QueryTotalSharesRequest, Osmosis_Gamm_V1beta1_QueryTotalSharesResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSharesInterceptors() ?? []
    )
  }

  /// SpotPrice defines a gRPC query handler that returns the spot price given
  /// a base denomination and a quote denomination.
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func spotPrice(
    _ request: Osmosis_Gamm_V1beta1_QuerySpotPriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QuerySpotPriceRequest, Osmosis_Gamm_V1beta1_QuerySpotPriceResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.spotPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotPriceInterceptors() ?? []
    )
  }

  /// Estimate the swap.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateSwapExactAmountIn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func estimateSwapExactAmountIn(
    _ request: Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountInResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountInInterceptors() ?? []
    )
  }

  /// Unary call to EstimateSwapExactAmountOut
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateSwapExactAmountOut.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func estimateSwapExactAmountOut(
    _ request: Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountOutInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Osmosis_Gamm_V1beta1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Osmosis_Gamm_V1beta1_QueryNIOClient")
public final class Osmosis_Gamm_V1beta1_QueryClient: Osmosis_Gamm_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.gamm.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Osmosis_Gamm_V1beta1_QueryNIOClient: Osmosis_Gamm_V1beta1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.gamm.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Osmosis_Gamm_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makePoolsCall(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryPoolsRequest, Osmosis_Gamm_V1beta1_QueryPoolsResponse>

  func makeNumPoolsCall(
    _ request: Osmosis_Gamm_V1beta1_QueryNumPoolsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryNumPoolsRequest, Osmosis_Gamm_V1beta1_QueryNumPoolsResponse>

  func makeTotalLiquidityCall(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalLiquidityResponse>

  func makePoolCall(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryPoolRequest, Osmosis_Gamm_V1beta1_QueryPoolResponse>

  func makePoolTypeCall(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolTypeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryPoolTypeRequest, Osmosis_Gamm_V1beta1_QueryPoolTypeResponse>

  func makePoolParamsCall(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryPoolParamsRequest, Osmosis_Gamm_V1beta1_QueryPoolParamsResponse>

  func makeTotalPoolLiquidityCall(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityResponse>

  func makeTotalSharesCall(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalSharesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryTotalSharesRequest, Osmosis_Gamm_V1beta1_QueryTotalSharesResponse>

  func makeSpotPriceCall(
    _ request: Osmosis_Gamm_V1beta1_QuerySpotPriceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QuerySpotPriceRequest, Osmosis_Gamm_V1beta1_QuerySpotPriceResponse>

  func makeEstimateSwapExactAmountInCall(
    _ request: Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountInResponse>

  func makeEstimateSwapExactAmountOutCall(
    _ request: Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Gamm_V1beta1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Gamm_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePoolsCall(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryPoolsRequest, Osmosis_Gamm_V1beta1_QueryPoolsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  public func makeNumPoolsCall(
    _ request: Osmosis_Gamm_V1beta1_QueryNumPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryNumPoolsRequest, Osmosis_Gamm_V1beta1_QueryNumPoolsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.numPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumPoolsInterceptors() ?? []
    )
  }

  public func makeTotalLiquidityCall(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalLiquidityResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalLiquidityInterceptors() ?? []
    )
  }

  public func makePoolCall(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryPoolRequest, Osmosis_Gamm_V1beta1_QueryPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  public func makePoolTypeCall(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolTypeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryPoolTypeRequest, Osmosis_Gamm_V1beta1_QueryPoolTypeResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolTypeInterceptors() ?? []
    )
  }

  public func makePoolParamsCall(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryPoolParamsRequest, Osmosis_Gamm_V1beta1_QueryPoolParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolParamsInterceptors() ?? []
    )
  }

  public func makeTotalPoolLiquidityCall(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalPoolLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalPoolLiquidityInterceptors() ?? []
    )
  }

  public func makeTotalSharesCall(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalSharesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QueryTotalSharesRequest, Osmosis_Gamm_V1beta1_QueryTotalSharesResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSharesInterceptors() ?? []
    )
  }

  public func makeSpotPriceCall(
    _ request: Osmosis_Gamm_V1beta1_QuerySpotPriceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QuerySpotPriceRequest, Osmosis_Gamm_V1beta1_QuerySpotPriceResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.spotPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotPriceInterceptors() ?? []
    )
  }

  public func makeEstimateSwapExactAmountInCall(
    _ request: Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountInResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountInInterceptors() ?? []
    )
  }

  public func makeEstimateSwapExactAmountOutCall(
    _ request: Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountOutInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Gamm_V1beta1_QueryAsyncClientProtocol {
  public func pools(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_QueryPoolsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  public func numPools(
    _ request: Osmosis_Gamm_V1beta1_QueryNumPoolsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_QueryNumPoolsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.numPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumPoolsInterceptors() ?? []
    )
  }

  public func totalLiquidity(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_QueryTotalLiquidityResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalLiquidityInterceptors() ?? []
    )
  }

  public func pool(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_QueryPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  public func poolType(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolTypeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_QueryPoolTypeResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolTypeInterceptors() ?? []
    )
  }

  public func poolParams(
    _ request: Osmosis_Gamm_V1beta1_QueryPoolParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_QueryPoolParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolParamsInterceptors() ?? []
    )
  }

  public func totalPoolLiquidity(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalPoolLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalPoolLiquidityInterceptors() ?? []
    )
  }

  public func totalShares(
    _ request: Osmosis_Gamm_V1beta1_QueryTotalSharesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_QueryTotalSharesResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSharesInterceptors() ?? []
    )
  }

  public func spotPrice(
    _ request: Osmosis_Gamm_V1beta1_QuerySpotPriceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_QuerySpotPriceResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.spotPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotPriceInterceptors() ?? []
    )
  }

  public func estimateSwapExactAmountIn(
    _ request: Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_QuerySwapExactAmountInResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountInInterceptors() ?? []
    )
  }

  public func estimateSwapExactAmountOut(
    _ request: Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountOutInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Osmosis_Gamm_V1beta1_QueryAsyncClient: Osmosis_Gamm_V1beta1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'pools'.
  func makePoolsInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_QueryPoolsRequest, Osmosis_Gamm_V1beta1_QueryPoolsResponse>]

  /// - Returns: Interceptors to use when invoking 'numPools'.
  func makeNumPoolsInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_QueryNumPoolsRequest, Osmosis_Gamm_V1beta1_QueryNumPoolsResponse>]

  /// - Returns: Interceptors to use when invoking 'totalLiquidity'.
  func makeTotalLiquidityInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalLiquidityResponse>]

  /// - Returns: Interceptors to use when invoking 'pool'.
  func makePoolInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_QueryPoolRequest, Osmosis_Gamm_V1beta1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'poolType'.
  func makePoolTypeInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_QueryPoolTypeRequest, Osmosis_Gamm_V1beta1_QueryPoolTypeResponse>]

  /// - Returns: Interceptors to use when invoking 'poolParams'.
  func makePoolParamsInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_QueryPoolParamsRequest, Osmosis_Gamm_V1beta1_QueryPoolParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'totalPoolLiquidity'.
  func makeTotalPoolLiquidityInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityResponse>]

  /// - Returns: Interceptors to use when invoking 'totalShares'.
  func makeTotalSharesInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_QueryTotalSharesRequest, Osmosis_Gamm_V1beta1_QueryTotalSharesResponse>]

  /// - Returns: Interceptors to use when invoking 'spotPrice'.
  func makeSpotPriceInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_QuerySpotPriceRequest, Osmosis_Gamm_V1beta1_QuerySpotPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateSwapExactAmountIn'.
  func makeEstimateSwapExactAmountInInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountInResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateSwapExactAmountOut'.
  func makeEstimateSwapExactAmountOutInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutResponse>]
}

public enum Osmosis_Gamm_V1beta1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.gamm.v1beta1.Query",
    methods: [
      Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pools,
      Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.numPools,
      Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalLiquidity,
      Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pool,
      Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolType,
      Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolParams,
      Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalPoolLiquidity,
      Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalShares,
      Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.spotPrice,
      Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountIn,
      Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountOut,
    ]
  )

  public enum Methods {
    public static let pools = GRPCMethodDescriptor(
      name: "Pools",
      path: "/osmosis.gamm.v1beta1.Query/Pools",
      type: GRPCCallType.unary
    )

    public static let numPools = GRPCMethodDescriptor(
      name: "NumPools",
      path: "/osmosis.gamm.v1beta1.Query/NumPools",
      type: GRPCCallType.unary
    )

    public static let totalLiquidity = GRPCMethodDescriptor(
      name: "TotalLiquidity",
      path: "/osmosis.gamm.v1beta1.Query/TotalLiquidity",
      type: GRPCCallType.unary
    )

    public static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/osmosis.gamm.v1beta1.Query/Pool",
      type: GRPCCallType.unary
    )

    public static let poolType = GRPCMethodDescriptor(
      name: "PoolType",
      path: "/osmosis.gamm.v1beta1.Query/PoolType",
      type: GRPCCallType.unary
    )

    public static let poolParams = GRPCMethodDescriptor(
      name: "PoolParams",
      path: "/osmosis.gamm.v1beta1.Query/PoolParams",
      type: GRPCCallType.unary
    )

    public static let totalPoolLiquidity = GRPCMethodDescriptor(
      name: "TotalPoolLiquidity",
      path: "/osmosis.gamm.v1beta1.Query/TotalPoolLiquidity",
      type: GRPCCallType.unary
    )

    public static let totalShares = GRPCMethodDescriptor(
      name: "TotalShares",
      path: "/osmosis.gamm.v1beta1.Query/TotalShares",
      type: GRPCCallType.unary
    )

    public static let spotPrice = GRPCMethodDescriptor(
      name: "SpotPrice",
      path: "/osmosis.gamm.v1beta1.Query/SpotPrice",
      type: GRPCCallType.unary
    )

    public static let estimateSwapExactAmountIn = GRPCMethodDescriptor(
      name: "EstimateSwapExactAmountIn",
      path: "/osmosis.gamm.v1beta1.Query/EstimateSwapExactAmountIn",
      type: GRPCCallType.unary
    )

    public static let estimateSwapExactAmountOut = GRPCMethodDescriptor(
      name: "EstimateSwapExactAmountOut",
      path: "/osmosis.gamm.v1beta1.Query/EstimateSwapExactAmountOut",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Osmosis_Gamm_V1beta1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Osmosis_Gamm_V1beta1_QueryTestClient: Osmosis_Gamm_V1beta1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Gamm_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Pools RPC. This must be called
  /// before calling 'pools'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makePoolsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryPoolsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_QueryPoolsRequest, Osmosis_Gamm_V1beta1_QueryPoolsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pools.path, requestHandler: requestHandler)
  }

  public func enqueuePoolsResponse(
    _ response: Osmosis_Gamm_V1beta1_QueryPoolsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryPoolsRequest>) -> () = { _ in }
  ) {
    let stream = self.makePoolsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Pools'
  public var hasPoolsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pools.path)
  }

  /// Make a unary response for the NumPools RPC. This must be called
  /// before calling 'numPools'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeNumPoolsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryNumPoolsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_QueryNumPoolsRequest, Osmosis_Gamm_V1beta1_QueryNumPoolsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.numPools.path, requestHandler: requestHandler)
  }

  public func enqueueNumPoolsResponse(
    _ response: Osmosis_Gamm_V1beta1_QueryNumPoolsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryNumPoolsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeNumPoolsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'NumPools'
  public var hasNumPoolsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.numPools.path)
  }

  /// Make a unary response for the TotalLiquidity RPC. This must be called
  /// before calling 'totalLiquidity'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeTotalLiquidityResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalLiquidityResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalLiquidity.path, requestHandler: requestHandler)
  }

  public func enqueueTotalLiquidityResponse(
    _ response: Osmosis_Gamm_V1beta1_QueryTotalLiquidityResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryTotalLiquidityRequest>) -> () = { _ in }
  ) {
    let stream = self.makeTotalLiquidityResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TotalLiquidity'
  public var hasTotalLiquidityResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalLiquidity.path)
  }

  /// Make a unary response for the Pool RPC. This must be called
  /// before calling 'pool'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makePoolResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryPoolRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_QueryPoolRequest, Osmosis_Gamm_V1beta1_QueryPoolResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pool.path, requestHandler: requestHandler)
  }

  public func enqueuePoolResponse(
    _ response: Osmosis_Gamm_V1beta1_QueryPoolResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryPoolRequest>) -> () = { _ in }
  ) {
    let stream = self.makePoolResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Pool'
  public var hasPoolResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.pool.path)
  }

  /// Make a unary response for the PoolType RPC. This must be called
  /// before calling 'poolType'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makePoolTypeResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryPoolTypeRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_QueryPoolTypeRequest, Osmosis_Gamm_V1beta1_QueryPoolTypeResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolType.path, requestHandler: requestHandler)
  }

  public func enqueuePoolTypeResponse(
    _ response: Osmosis_Gamm_V1beta1_QueryPoolTypeResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryPoolTypeRequest>) -> () = { _ in }
  ) {
    let stream = self.makePoolTypeResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'PoolType'
  public var hasPoolTypeResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolType.path)
  }

  /// Make a unary response for the PoolParams RPC. This must be called
  /// before calling 'poolParams'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makePoolParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryPoolParamsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_QueryPoolParamsRequest, Osmosis_Gamm_V1beta1_QueryPoolParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolParams.path, requestHandler: requestHandler)
  }

  public func enqueuePoolParamsResponse(
    _ response: Osmosis_Gamm_V1beta1_QueryPoolParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryPoolParamsRequest>) -> () = { _ in }
  ) {
    let stream = self.makePoolParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'PoolParams'
  public var hasPoolParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.poolParams.path)
  }

  /// Make a unary response for the TotalPoolLiquidity RPC. This must be called
  /// before calling 'totalPoolLiquidity'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeTotalPoolLiquidityResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest, Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalPoolLiquidity.path, requestHandler: requestHandler)
  }

  public func enqueueTotalPoolLiquidityResponse(
    _ response: Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryTotalPoolLiquidityRequest>) -> () = { _ in }
  ) {
    let stream = self.makeTotalPoolLiquidityResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TotalPoolLiquidity'
  public var hasTotalPoolLiquidityResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalPoolLiquidity.path)
  }

  /// Make a unary response for the TotalShares RPC. This must be called
  /// before calling 'totalShares'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeTotalSharesResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryTotalSharesRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_QueryTotalSharesRequest, Osmosis_Gamm_V1beta1_QueryTotalSharesResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalShares.path, requestHandler: requestHandler)
  }

  public func enqueueTotalSharesResponse(
    _ response: Osmosis_Gamm_V1beta1_QueryTotalSharesResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QueryTotalSharesRequest>) -> () = { _ in }
  ) {
    let stream = self.makeTotalSharesResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TotalShares'
  public var hasTotalSharesResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.totalShares.path)
  }

  /// Make a unary response for the SpotPrice RPC. This must be called
  /// before calling 'spotPrice'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSpotPriceResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QuerySpotPriceRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_QuerySpotPriceRequest, Osmosis_Gamm_V1beta1_QuerySpotPriceResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.spotPrice.path, requestHandler: requestHandler)
  }

  public func enqueueSpotPriceResponse(
    _ response: Osmosis_Gamm_V1beta1_QuerySpotPriceResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QuerySpotPriceRequest>) -> () = { _ in }
  ) {
    let stream = self.makeSpotPriceResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SpotPrice'
  public var hasSpotPriceResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.spotPrice.path)
  }

  /// Make a unary response for the EstimateSwapExactAmountIn RPC. This must be called
  /// before calling 'estimateSwapExactAmountIn'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeEstimateSwapExactAmountInResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountInResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountIn.path, requestHandler: requestHandler)
  }

  public func enqueueEstimateSwapExactAmountInResponse(
    _ response: Osmosis_Gamm_V1beta1_QuerySwapExactAmountInResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QuerySwapExactAmountInRequest>) -> () = { _ in }
  ) {
    let stream = self.makeEstimateSwapExactAmountInResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'EstimateSwapExactAmountIn'
  public var hasEstimateSwapExactAmountInResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountIn.path)
  }

  /// Make a unary response for the EstimateSwapExactAmountOut RPC. This must be called
  /// before calling 'estimateSwapExactAmountOut'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeEstimateSwapExactAmountOutResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest, Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountOut.path, requestHandler: requestHandler)
  }

  public func enqueueEstimateSwapExactAmountOutResponse(
    _ response: Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_QuerySwapExactAmountOutRequest>) -> () = { _ in }
  ) {
    let stream = self.makeEstimateSwapExactAmountOutResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'EstimateSwapExactAmountOut'
  public var hasEstimateSwapExactAmountOutResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountOut.path)
  }
}

