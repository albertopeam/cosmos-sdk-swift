//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/incentives/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Osmosis_Incentives_MsgClient`, then call methods of this protocol to make API calls.
public protocol Osmosis_Incentives_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol? { get }

  func createGauge(
    _ request: Osmosis_Incentives_MsgCreateGauge,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_MsgCreateGauge, Osmosis_Incentives_MsgCreateGaugeResponse>

  func addToGauge(
    _ request: Osmosis_Incentives_MsgAddToGauge,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_MsgAddToGauge, Osmosis_Incentives_MsgAddToGaugeResponse>
}

extension Osmosis_Incentives_MsgClientProtocol {
  public var serviceName: String {
    return "osmosis.incentives.Msg"
  }

  /// Unary call to CreateGauge
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGauge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createGauge(
    _ request: Osmosis_Incentives_MsgCreateGauge,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_MsgCreateGauge, Osmosis_Incentives_MsgCreateGaugeResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_MsgClientMetadata.Methods.createGauge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGaugeInterceptors() ?? []
    )
  }

  /// Unary call to AddToGauge
  ///
  /// - Parameters:
  ///   - request: Request to send to AddToGauge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addToGauge(
    _ request: Osmosis_Incentives_MsgAddToGauge,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_MsgAddToGauge, Osmosis_Incentives_MsgAddToGaugeResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_MsgClientMetadata.Methods.addToGauge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToGaugeInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Osmosis_Incentives_MsgClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Osmosis_Incentives_MsgNIOClient")
public final class Osmosis_Incentives_MsgClient: Osmosis_Incentives_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.incentives.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Osmosis_Incentives_MsgNIOClient: Osmosis_Incentives_MsgClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.incentives.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Osmosis_Incentives_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateGaugeCall(
    _ request: Osmosis_Incentives_MsgCreateGauge,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_MsgCreateGauge, Osmosis_Incentives_MsgCreateGaugeResponse>

  func makeAddToGaugeCall(
    _ request: Osmosis_Incentives_MsgAddToGauge,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_MsgAddToGauge, Osmosis_Incentives_MsgAddToGaugeResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Incentives_MsgAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Incentives_MsgClientMetadata.serviceDescriptor
  }

  public var interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateGaugeCall(
    _ request: Osmosis_Incentives_MsgCreateGauge,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_MsgCreateGauge, Osmosis_Incentives_MsgCreateGaugeResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_MsgClientMetadata.Methods.createGauge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGaugeInterceptors() ?? []
    )
  }

  public func makeAddToGaugeCall(
    _ request: Osmosis_Incentives_MsgAddToGauge,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_MsgAddToGauge, Osmosis_Incentives_MsgAddToGaugeResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_MsgClientMetadata.Methods.addToGauge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToGaugeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Incentives_MsgAsyncClientProtocol {
  public func createGauge(
    _ request: Osmosis_Incentives_MsgCreateGauge,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_MsgCreateGaugeResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_MsgClientMetadata.Methods.createGauge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGaugeInterceptors() ?? []
    )
  }

  public func addToGauge(
    _ request: Osmosis_Incentives_MsgAddToGauge,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_MsgAddToGaugeResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_MsgClientMetadata.Methods.addToGauge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToGaugeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Osmosis_Incentives_MsgAsyncClient: Osmosis_Incentives_MsgAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Osmosis_Incentives_MsgClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'createGauge'.
  func makeCreateGaugeInterceptors() -> [ClientInterceptor<Osmosis_Incentives_MsgCreateGauge, Osmosis_Incentives_MsgCreateGaugeResponse>]

  /// - Returns: Interceptors to use when invoking 'addToGauge'.
  func makeAddToGaugeInterceptors() -> [ClientInterceptor<Osmosis_Incentives_MsgAddToGauge, Osmosis_Incentives_MsgAddToGaugeResponse>]
}

public enum Osmosis_Incentives_MsgClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "osmosis.incentives.Msg",
    methods: [
      Osmosis_Incentives_MsgClientMetadata.Methods.createGauge,
      Osmosis_Incentives_MsgClientMetadata.Methods.addToGauge,
    ]
  )

  public enum Methods {
    public static let createGauge = GRPCMethodDescriptor(
      name: "CreateGauge",
      path: "/osmosis.incentives.Msg/CreateGauge",
      type: GRPCCallType.unary
    )

    public static let addToGauge = GRPCMethodDescriptor(
      name: "AddToGauge",
      path: "/osmosis.incentives.Msg/AddToGauge",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Osmosis_Incentives_MsgTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Osmosis_Incentives_MsgTestClient: Osmosis_Incentives_MsgClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Incentives_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the CreateGauge RPC. This must be called
  /// before calling 'createGauge'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCreateGaugeResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_MsgCreateGauge>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Incentives_MsgCreateGauge, Osmosis_Incentives_MsgCreateGaugeResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Incentives_MsgClientMetadata.Methods.createGauge.path, requestHandler: requestHandler)
  }

  public func enqueueCreateGaugeResponse(
    _ response: Osmosis_Incentives_MsgCreateGaugeResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_MsgCreateGauge>) -> () = { _ in }
  ) {
    let stream = self.makeCreateGaugeResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateGauge'
  public var hasCreateGaugeResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Incentives_MsgClientMetadata.Methods.createGauge.path)
  }

  /// Make a unary response for the AddToGauge RPC. This must be called
  /// before calling 'addToGauge'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAddToGaugeResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_MsgAddToGauge>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Incentives_MsgAddToGauge, Osmosis_Incentives_MsgAddToGaugeResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Incentives_MsgClientMetadata.Methods.addToGauge.path, requestHandler: requestHandler)
  }

  public func enqueueAddToGaugeResponse(
    _ response: Osmosis_Incentives_MsgAddToGaugeResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Incentives_MsgAddToGauge>) -> () = { _ in }
  ) {
    let stream = self.makeAddToGaugeResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AddToGauge'
  public var hasAddToGaugeResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Incentives_MsgClientMetadata.Methods.addToGauge.path)
  }
}

