//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/gamm/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Osmosis_Gamm_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
public protocol Osmosis_Gamm_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func joinPool(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinPool,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgJoinPool, Osmosis_Gamm_V1beta1_MsgJoinPoolResponse>

  func exitPool(
    _ request: Osmosis_Gamm_V1beta1_MsgExitPool,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgExitPool, Osmosis_Gamm_V1beta1_MsgExitPoolResponse>

  func swapExactAmountIn(
    _ request: Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn, Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse>

  func swapExactAmountOut(
    _ request: Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut, Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse>

  func joinSwapExternAmountIn(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn, Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse>

  func joinSwapShareAmountOut(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut, Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse>

  func exitSwapExternAmountOut(
    _ request: Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut, Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse>

  func exitSwapShareAmountIn(
    _ request: Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn, Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse>
}

extension Osmosis_Gamm_V1beta1_MsgClientProtocol {
  public var serviceName: String {
    return "osmosis.gamm.v1beta1.Msg"
  }

  /// Unary call to JoinPool
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func joinPool(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinPool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgJoinPool, Osmosis_Gamm_V1beta1_MsgJoinPoolResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinPoolInterceptors() ?? []
    )
  }

  /// Unary call to ExitPool
  ///
  /// - Parameters:
  ///   - request: Request to send to ExitPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exitPool(
    _ request: Osmosis_Gamm_V1beta1_MsgExitPool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgExitPool, Osmosis_Gamm_V1beta1_MsgExitPoolResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitPoolInterceptors() ?? []
    )
  }

  /// Unary call to SwapExactAmountIn
  ///
  /// - Parameters:
  ///   - request: Request to send to SwapExactAmountIn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func swapExactAmountIn(
    _ request: Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn, Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapExactAmountInInterceptors() ?? []
    )
  }

  /// Unary call to SwapExactAmountOut
  ///
  /// - Parameters:
  ///   - request: Request to send to SwapExactAmountOut.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func swapExactAmountOut(
    _ request: Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut, Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapExactAmountOutInterceptors() ?? []
    )
  }

  /// Unary call to JoinSwapExternAmountIn
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinSwapExternAmountIn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func joinSwapExternAmountIn(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn, Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapExternAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinSwapExternAmountInInterceptors() ?? []
    )
  }

  /// Unary call to JoinSwapShareAmountOut
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinSwapShareAmountOut.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func joinSwapShareAmountOut(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut, Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapShareAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinSwapShareAmountOutInterceptors() ?? []
    )
  }

  /// Unary call to ExitSwapExternAmountOut
  ///
  /// - Parameters:
  ///   - request: Request to send to ExitSwapExternAmountOut.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exitSwapExternAmountOut(
    _ request: Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut, Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapExternAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitSwapExternAmountOutInterceptors() ?? []
    )
  }

  /// Unary call to ExitSwapShareAmountIn
  ///
  /// - Parameters:
  ///   - request: Request to send to ExitSwapShareAmountIn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exitSwapShareAmountIn(
    _ request: Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn, Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapShareAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitSwapShareAmountInInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Osmosis_Gamm_V1beta1_MsgClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Osmosis_Gamm_V1beta1_MsgNIOClient")
public final class Osmosis_Gamm_V1beta1_MsgClient: Osmosis_Gamm_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.gamm.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Osmosis_Gamm_V1beta1_MsgNIOClient: Osmosis_Gamm_V1beta1_MsgClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.gamm.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Osmosis_Gamm_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeJoinPoolCall(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinPool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgJoinPool, Osmosis_Gamm_V1beta1_MsgJoinPoolResponse>

  func makeExitPoolCall(
    _ request: Osmosis_Gamm_V1beta1_MsgExitPool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgExitPool, Osmosis_Gamm_V1beta1_MsgExitPoolResponse>

  func makeSwapExactAmountInCall(
    _ request: Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn, Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse>

  func makeSwapExactAmountOutCall(
    _ request: Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut, Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse>

  func makeJoinSwapExternAmountInCall(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn, Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse>

  func makeJoinSwapShareAmountOutCall(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut, Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse>

  func makeExitSwapExternAmountOutCall(
    _ request: Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut, Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse>

  func makeExitSwapShareAmountInCall(
    _ request: Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn, Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Gamm_V1beta1_MsgAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Gamm_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  public var interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeJoinPoolCall(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinPool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgJoinPool, Osmosis_Gamm_V1beta1_MsgJoinPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinPoolInterceptors() ?? []
    )
  }

  public func makeExitPoolCall(
    _ request: Osmosis_Gamm_V1beta1_MsgExitPool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgExitPool, Osmosis_Gamm_V1beta1_MsgExitPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitPoolInterceptors() ?? []
    )
  }

  public func makeSwapExactAmountInCall(
    _ request: Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn, Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapExactAmountInInterceptors() ?? []
    )
  }

  public func makeSwapExactAmountOutCall(
    _ request: Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut, Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapExactAmountOutInterceptors() ?? []
    )
  }

  public func makeJoinSwapExternAmountInCall(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn, Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapExternAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinSwapExternAmountInInterceptors() ?? []
    )
  }

  public func makeJoinSwapShareAmountOutCall(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut, Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapShareAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinSwapShareAmountOutInterceptors() ?? []
    )
  }

  public func makeExitSwapExternAmountOutCall(
    _ request: Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut, Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapExternAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitSwapExternAmountOutInterceptors() ?? []
    )
  }

  public func makeExitSwapShareAmountInCall(
    _ request: Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn, Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapShareAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitSwapShareAmountInInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Gamm_V1beta1_MsgAsyncClientProtocol {
  public func joinPool(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinPool,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_MsgJoinPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinPoolInterceptors() ?? []
    )
  }

  public func exitPool(
    _ request: Osmosis_Gamm_V1beta1_MsgExitPool,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_MsgExitPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitPoolInterceptors() ?? []
    )
  }

  public func swapExactAmountIn(
    _ request: Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapExactAmountInInterceptors() ?? []
    )
  }

  public func swapExactAmountOut(
    _ request: Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapExactAmountOutInterceptors() ?? []
    )
  }

  public func joinSwapExternAmountIn(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapExternAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinSwapExternAmountInInterceptors() ?? []
    )
  }

  public func joinSwapShareAmountOut(
    _ request: Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapShareAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinSwapShareAmountOutInterceptors() ?? []
    )
  }

  public func exitSwapExternAmountOut(
    _ request: Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapExternAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitSwapExternAmountOutInterceptors() ?? []
    )
  }

  public func exitSwapShareAmountIn(
    _ request: Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapShareAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExitSwapShareAmountInInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Osmosis_Gamm_V1beta1_MsgAsyncClient: Osmosis_Gamm_V1beta1_MsgAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'joinPool'.
  func makeJoinPoolInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_MsgJoinPool, Osmosis_Gamm_V1beta1_MsgJoinPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'exitPool'.
  func makeExitPoolInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_MsgExitPool, Osmosis_Gamm_V1beta1_MsgExitPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'swapExactAmountIn'.
  func makeSwapExactAmountInInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn, Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse>]

  /// - Returns: Interceptors to use when invoking 'swapExactAmountOut'.
  func makeSwapExactAmountOutInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut, Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse>]

  /// - Returns: Interceptors to use when invoking 'joinSwapExternAmountIn'.
  func makeJoinSwapExternAmountInInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn, Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse>]

  /// - Returns: Interceptors to use when invoking 'joinSwapShareAmountOut'.
  func makeJoinSwapShareAmountOutInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut, Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse>]

  /// - Returns: Interceptors to use when invoking 'exitSwapExternAmountOut'.
  func makeExitSwapExternAmountOutInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut, Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse>]

  /// - Returns: Interceptors to use when invoking 'exitSwapShareAmountIn'.
  func makeExitSwapShareAmountInInterceptors() -> [ClientInterceptor<Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn, Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse>]
}

public enum Osmosis_Gamm_V1beta1_MsgClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "osmosis.gamm.v1beta1.Msg",
    methods: [
      Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinPool,
      Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitPool,
      Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountIn,
      Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountOut,
      Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapExternAmountIn,
      Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapShareAmountOut,
      Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapExternAmountOut,
      Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapShareAmountIn,
    ]
  )

  public enum Methods {
    public static let joinPool = GRPCMethodDescriptor(
      name: "JoinPool",
      path: "/osmosis.gamm.v1beta1.Msg/JoinPool",
      type: GRPCCallType.unary
    )

    public static let exitPool = GRPCMethodDescriptor(
      name: "ExitPool",
      path: "/osmosis.gamm.v1beta1.Msg/ExitPool",
      type: GRPCCallType.unary
    )

    public static let swapExactAmountIn = GRPCMethodDescriptor(
      name: "SwapExactAmountIn",
      path: "/osmosis.gamm.v1beta1.Msg/SwapExactAmountIn",
      type: GRPCCallType.unary
    )

    public static let swapExactAmountOut = GRPCMethodDescriptor(
      name: "SwapExactAmountOut",
      path: "/osmosis.gamm.v1beta1.Msg/SwapExactAmountOut",
      type: GRPCCallType.unary
    )

    public static let joinSwapExternAmountIn = GRPCMethodDescriptor(
      name: "JoinSwapExternAmountIn",
      path: "/osmosis.gamm.v1beta1.Msg/JoinSwapExternAmountIn",
      type: GRPCCallType.unary
    )

    public static let joinSwapShareAmountOut = GRPCMethodDescriptor(
      name: "JoinSwapShareAmountOut",
      path: "/osmosis.gamm.v1beta1.Msg/JoinSwapShareAmountOut",
      type: GRPCCallType.unary
    )

    public static let exitSwapExternAmountOut = GRPCMethodDescriptor(
      name: "ExitSwapExternAmountOut",
      path: "/osmosis.gamm.v1beta1.Msg/ExitSwapExternAmountOut",
      type: GRPCCallType.unary
    )

    public static let exitSwapShareAmountIn = GRPCMethodDescriptor(
      name: "ExitSwapShareAmountIn",
      path: "/osmosis.gamm.v1beta1.Msg/ExitSwapShareAmountIn",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Osmosis_Gamm_V1beta1_MsgTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Osmosis_Gamm_V1beta1_MsgTestClient: Osmosis_Gamm_V1beta1_MsgClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Gamm_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the JoinPool RPC. This must be called
  /// before calling 'joinPool'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeJoinPoolResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgJoinPool>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_MsgJoinPool, Osmosis_Gamm_V1beta1_MsgJoinPoolResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinPool.path, requestHandler: requestHandler)
  }

  public func enqueueJoinPoolResponse(
    _ response: Osmosis_Gamm_V1beta1_MsgJoinPoolResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgJoinPool>) -> () = { _ in }
  ) {
    let stream = self.makeJoinPoolResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'JoinPool'
  public var hasJoinPoolResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinPool.path)
  }

  /// Make a unary response for the ExitPool RPC. This must be called
  /// before calling 'exitPool'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeExitPoolResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgExitPool>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_MsgExitPool, Osmosis_Gamm_V1beta1_MsgExitPoolResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitPool.path, requestHandler: requestHandler)
  }

  public func enqueueExitPoolResponse(
    _ response: Osmosis_Gamm_V1beta1_MsgExitPoolResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgExitPool>) -> () = { _ in }
  ) {
    let stream = self.makeExitPoolResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ExitPool'
  public var hasExitPoolResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitPool.path)
  }

  /// Make a unary response for the SwapExactAmountIn RPC. This must be called
  /// before calling 'swapExactAmountIn'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSwapExactAmountInResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn, Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountIn.path, requestHandler: requestHandler)
  }

  public func enqueueSwapExactAmountInResponse(
    _ response: Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn>) -> () = { _ in }
  ) {
    let stream = self.makeSwapExactAmountInResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SwapExactAmountIn'
  public var hasSwapExactAmountInResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountIn.path)
  }

  /// Make a unary response for the SwapExactAmountOut RPC. This must be called
  /// before calling 'swapExactAmountOut'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSwapExactAmountOutResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut, Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountOut.path, requestHandler: requestHandler)
  }

  public func enqueueSwapExactAmountOutResponse(
    _ response: Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut>) -> () = { _ in }
  ) {
    let stream = self.makeSwapExactAmountOutResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SwapExactAmountOut'
  public var hasSwapExactAmountOutResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.swapExactAmountOut.path)
  }

  /// Make a unary response for the JoinSwapExternAmountIn RPC. This must be called
  /// before calling 'joinSwapExternAmountIn'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeJoinSwapExternAmountInResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn, Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapExternAmountIn.path, requestHandler: requestHandler)
  }

  public func enqueueJoinSwapExternAmountInResponse(
    _ response: Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn>) -> () = { _ in }
  ) {
    let stream = self.makeJoinSwapExternAmountInResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'JoinSwapExternAmountIn'
  public var hasJoinSwapExternAmountInResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapExternAmountIn.path)
  }

  /// Make a unary response for the JoinSwapShareAmountOut RPC. This must be called
  /// before calling 'joinSwapShareAmountOut'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeJoinSwapShareAmountOutResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut, Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapShareAmountOut.path, requestHandler: requestHandler)
  }

  public func enqueueJoinSwapShareAmountOutResponse(
    _ response: Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut>) -> () = { _ in }
  ) {
    let stream = self.makeJoinSwapShareAmountOutResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'JoinSwapShareAmountOut'
  public var hasJoinSwapShareAmountOutResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.joinSwapShareAmountOut.path)
  }

  /// Make a unary response for the ExitSwapExternAmountOut RPC. This must be called
  /// before calling 'exitSwapExternAmountOut'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeExitSwapExternAmountOutResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut, Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapExternAmountOut.path, requestHandler: requestHandler)
  }

  public func enqueueExitSwapExternAmountOutResponse(
    _ response: Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut>) -> () = { _ in }
  ) {
    let stream = self.makeExitSwapExternAmountOutResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ExitSwapExternAmountOut'
  public var hasExitSwapExternAmountOutResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapExternAmountOut.path)
  }

  /// Make a unary response for the ExitSwapShareAmountIn RPC. This must be called
  /// before calling 'exitSwapShareAmountIn'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeExitSwapShareAmountInResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn, Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapShareAmountIn.path, requestHandler: requestHandler)
  }

  public func enqueueExitSwapShareAmountInResponse(
    _ response: Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn>) -> () = { _ in }
  ) {
    let stream = self.makeExitSwapShareAmountInResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ExitSwapShareAmountIn'
  public var hasExitSwapShareAmountInResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Gamm_V1beta1_MsgClientMetadata.Methods.exitSwapShareAmountIn.path)
  }
}

