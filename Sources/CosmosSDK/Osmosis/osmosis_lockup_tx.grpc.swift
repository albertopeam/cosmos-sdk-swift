//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/lockup/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Osmosis_Lockup_MsgClient`, then call methods of this protocol to make API calls.
public protocol Osmosis_Lockup_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol? { get }

  func lockTokens(
    _ request: Osmosis_Lockup_MsgLockTokens,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Lockup_MsgLockTokens, Osmosis_Lockup_MsgLockTokensResponse>

  func beginUnlockingAll(
    _ request: Osmosis_Lockup_MsgBeginUnlockingAll,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Lockup_MsgBeginUnlockingAll, Osmosis_Lockup_MsgBeginUnlockingAllResponse>

  func beginUnlocking(
    _ request: Osmosis_Lockup_MsgBeginUnlocking,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Lockup_MsgBeginUnlocking, Osmosis_Lockup_MsgBeginUnlockingResponse>

  func extendLockup(
    _ request: Osmosis_Lockup_MsgExtendLockup,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Lockup_MsgExtendLockup, Osmosis_Lockup_MsgExtendLockupResponse>
}

extension Osmosis_Lockup_MsgClientProtocol {
  public var serviceName: String {
    return "osmosis.lockup.Msg"
  }

  /// LockTokens lock tokens
  ///
  /// - Parameters:
  ///   - request: Request to send to LockTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func lockTokens(
    _ request: Osmosis_Lockup_MsgLockTokens,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Lockup_MsgLockTokens, Osmosis_Lockup_MsgLockTokensResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.lockTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockTokensInterceptors() ?? []
    )
  }

  /// BeginUnlockingAll begin unlocking all tokens
  ///
  /// - Parameters:
  ///   - request: Request to send to BeginUnlockingAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func beginUnlockingAll(
    _ request: Osmosis_Lockup_MsgBeginUnlockingAll,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Lockup_MsgBeginUnlockingAll, Osmosis_Lockup_MsgBeginUnlockingAllResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlockingAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginUnlockingAllInterceptors() ?? []
    )
  }

  /// MsgBeginUnlocking begins unlocking tokens by lock ID
  ///
  /// - Parameters:
  ///   - request: Request to send to BeginUnlocking.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func beginUnlocking(
    _ request: Osmosis_Lockup_MsgBeginUnlocking,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Lockup_MsgBeginUnlocking, Osmosis_Lockup_MsgBeginUnlockingResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlocking.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginUnlockingInterceptors() ?? []
    )
  }

  /// MsgEditLockup edits the existing lockups by lock ID
  ///
  /// - Parameters:
  ///   - request: Request to send to ExtendLockup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func extendLockup(
    _ request: Osmosis_Lockup_MsgExtendLockup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Lockup_MsgExtendLockup, Osmosis_Lockup_MsgExtendLockupResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.extendLockup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExtendLockupInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Osmosis_Lockup_MsgClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Osmosis_Lockup_MsgNIOClient")
public final class Osmosis_Lockup_MsgClient: Osmosis_Lockup_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.lockup.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Osmosis_Lockup_MsgNIOClient: Osmosis_Lockup_MsgClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.lockup.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Osmosis_Lockup_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol? { get }

  func makeLockTokensCall(
    _ request: Osmosis_Lockup_MsgLockTokens,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Lockup_MsgLockTokens, Osmosis_Lockup_MsgLockTokensResponse>

  func makeBeginUnlockingAllCall(
    _ request: Osmosis_Lockup_MsgBeginUnlockingAll,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Lockup_MsgBeginUnlockingAll, Osmosis_Lockup_MsgBeginUnlockingAllResponse>

  func makeBeginUnlockingCall(
    _ request: Osmosis_Lockup_MsgBeginUnlocking,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Lockup_MsgBeginUnlocking, Osmosis_Lockup_MsgBeginUnlockingResponse>

  func makeExtendLockupCall(
    _ request: Osmosis_Lockup_MsgExtendLockup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Lockup_MsgExtendLockup, Osmosis_Lockup_MsgExtendLockupResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Lockup_MsgAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Lockup_MsgClientMetadata.serviceDescriptor
  }

  public var interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeLockTokensCall(
    _ request: Osmosis_Lockup_MsgLockTokens,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Lockup_MsgLockTokens, Osmosis_Lockup_MsgLockTokensResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.lockTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockTokensInterceptors() ?? []
    )
  }

  public func makeBeginUnlockingAllCall(
    _ request: Osmosis_Lockup_MsgBeginUnlockingAll,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Lockup_MsgBeginUnlockingAll, Osmosis_Lockup_MsgBeginUnlockingAllResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlockingAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginUnlockingAllInterceptors() ?? []
    )
  }

  public func makeBeginUnlockingCall(
    _ request: Osmosis_Lockup_MsgBeginUnlocking,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Lockup_MsgBeginUnlocking, Osmosis_Lockup_MsgBeginUnlockingResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlocking.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginUnlockingInterceptors() ?? []
    )
  }

  public func makeExtendLockupCall(
    _ request: Osmosis_Lockup_MsgExtendLockup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Lockup_MsgExtendLockup, Osmosis_Lockup_MsgExtendLockupResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.extendLockup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExtendLockupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Lockup_MsgAsyncClientProtocol {
  public func lockTokens(
    _ request: Osmosis_Lockup_MsgLockTokens,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Lockup_MsgLockTokensResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.lockTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockTokensInterceptors() ?? []
    )
  }

  public func beginUnlockingAll(
    _ request: Osmosis_Lockup_MsgBeginUnlockingAll,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Lockup_MsgBeginUnlockingAllResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlockingAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginUnlockingAllInterceptors() ?? []
    )
  }

  public func beginUnlocking(
    _ request: Osmosis_Lockup_MsgBeginUnlocking,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Lockup_MsgBeginUnlockingResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlocking.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginUnlockingInterceptors() ?? []
    )
  }

  public func extendLockup(
    _ request: Osmosis_Lockup_MsgExtendLockup,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Lockup_MsgExtendLockupResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Lockup_MsgClientMetadata.Methods.extendLockup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExtendLockupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Osmosis_Lockup_MsgAsyncClient: Osmosis_Lockup_MsgAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Osmosis_Lockup_MsgClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'lockTokens'.
  func makeLockTokensInterceptors() -> [ClientInterceptor<Osmosis_Lockup_MsgLockTokens, Osmosis_Lockup_MsgLockTokensResponse>]

  /// - Returns: Interceptors to use when invoking 'beginUnlockingAll'.
  func makeBeginUnlockingAllInterceptors() -> [ClientInterceptor<Osmosis_Lockup_MsgBeginUnlockingAll, Osmosis_Lockup_MsgBeginUnlockingAllResponse>]

  /// - Returns: Interceptors to use when invoking 'beginUnlocking'.
  func makeBeginUnlockingInterceptors() -> [ClientInterceptor<Osmosis_Lockup_MsgBeginUnlocking, Osmosis_Lockup_MsgBeginUnlockingResponse>]

  /// - Returns: Interceptors to use when invoking 'extendLockup'.
  func makeExtendLockupInterceptors() -> [ClientInterceptor<Osmosis_Lockup_MsgExtendLockup, Osmosis_Lockup_MsgExtendLockupResponse>]
}

public enum Osmosis_Lockup_MsgClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "osmosis.lockup.Msg",
    methods: [
      Osmosis_Lockup_MsgClientMetadata.Methods.lockTokens,
      Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlockingAll,
      Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlocking,
      Osmosis_Lockup_MsgClientMetadata.Methods.extendLockup,
    ]
  )

  public enum Methods {
    public static let lockTokens = GRPCMethodDescriptor(
      name: "LockTokens",
      path: "/osmosis.lockup.Msg/LockTokens",
      type: GRPCCallType.unary
    )

    public static let beginUnlockingAll = GRPCMethodDescriptor(
      name: "BeginUnlockingAll",
      path: "/osmosis.lockup.Msg/BeginUnlockingAll",
      type: GRPCCallType.unary
    )

    public static let beginUnlocking = GRPCMethodDescriptor(
      name: "BeginUnlocking",
      path: "/osmosis.lockup.Msg/BeginUnlocking",
      type: GRPCCallType.unary
    )

    public static let extendLockup = GRPCMethodDescriptor(
      name: "ExtendLockup",
      path: "/osmosis.lockup.Msg/ExtendLockup",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Osmosis_Lockup_MsgTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Osmosis_Lockup_MsgTestClient: Osmosis_Lockup_MsgClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Lockup_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the LockTokens RPC. This must be called
  /// before calling 'lockTokens'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeLockTokensResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Lockup_MsgLockTokens>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Lockup_MsgLockTokens, Osmosis_Lockup_MsgLockTokensResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Lockup_MsgClientMetadata.Methods.lockTokens.path, requestHandler: requestHandler)
  }

  public func enqueueLockTokensResponse(
    _ response: Osmosis_Lockup_MsgLockTokensResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Lockup_MsgLockTokens>) -> () = { _ in }
  ) {
    let stream = self.makeLockTokensResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'LockTokens'
  public var hasLockTokensResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Lockup_MsgClientMetadata.Methods.lockTokens.path)
  }

  /// Make a unary response for the BeginUnlockingAll RPC. This must be called
  /// before calling 'beginUnlockingAll'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeBeginUnlockingAllResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Lockup_MsgBeginUnlockingAll>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Lockup_MsgBeginUnlockingAll, Osmosis_Lockup_MsgBeginUnlockingAllResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlockingAll.path, requestHandler: requestHandler)
  }

  public func enqueueBeginUnlockingAllResponse(
    _ response: Osmosis_Lockup_MsgBeginUnlockingAllResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Lockup_MsgBeginUnlockingAll>) -> () = { _ in }
  ) {
    let stream = self.makeBeginUnlockingAllResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'BeginUnlockingAll'
  public var hasBeginUnlockingAllResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlockingAll.path)
  }

  /// Make a unary response for the BeginUnlocking RPC. This must be called
  /// before calling 'beginUnlocking'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeBeginUnlockingResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Lockup_MsgBeginUnlocking>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Lockup_MsgBeginUnlocking, Osmosis_Lockup_MsgBeginUnlockingResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlocking.path, requestHandler: requestHandler)
  }

  public func enqueueBeginUnlockingResponse(
    _ response: Osmosis_Lockup_MsgBeginUnlockingResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Lockup_MsgBeginUnlocking>) -> () = { _ in }
  ) {
    let stream = self.makeBeginUnlockingResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'BeginUnlocking'
  public var hasBeginUnlockingResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Lockup_MsgClientMetadata.Methods.beginUnlocking.path)
  }

  /// Make a unary response for the ExtendLockup RPC. This must be called
  /// before calling 'extendLockup'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeExtendLockupResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Lockup_MsgExtendLockup>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Lockup_MsgExtendLockup, Osmosis_Lockup_MsgExtendLockupResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Lockup_MsgClientMetadata.Methods.extendLockup.path, requestHandler: requestHandler)
  }

  public func enqueueExtendLockupResponse(
    _ response: Osmosis_Lockup_MsgExtendLockupResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Lockup_MsgExtendLockup>) -> () = { _ in }
  ) {
    let stream = self.makeExtendLockupResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ExtendLockup'
  public var hasExtendLockupResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Lockup_MsgClientMetadata.Methods.extendLockup.path)
  }
}

