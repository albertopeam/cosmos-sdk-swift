//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/superfluid/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Osmosis_Superfluid_QueryClient`, then call methods of this protocol to make API calls.
public protocol Osmosis_Superfluid_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse>

  func assetType(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse>

  func allAssets(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse>

  func assetMultiplier(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse>

  func allIntermediaryAccounts(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse>

  func connectedIntermediaryAccount(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>

  func totalSuperfluidDelegations(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>

  func superfluidDelegationAmount(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse>

  func superfluidDelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>

  func superfluidUndelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>

  func superfluidDelegationsByValidatorDenom(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>

  func estimateSuperfluidDelegatedAmountByValidatorDenom(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>

  func totalDelegationByDelegator(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse>
}

extension Osmosis_Superfluid_QueryClientProtocol {
  public var serviceName: String {
    return "osmosis.superfluid.Query"
  }

  /// Params returns the total set of superfluid parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func params(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Returns superfluid asset type, whether if it's a native asset or an lp
  /// share.
  ///
  /// - Parameters:
  ///   - request: Request to send to AssetType.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func assetType(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetTypeInterceptors() ?? []
    )
  }

  /// Returns all registered superfluid assets.
  ///
  /// - Parameters:
  ///   - request: Request to send to AllAssets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func allAssets(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allAssets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllAssetsInterceptors() ?? []
    )
  }

  /// Returns the osmo equivalent multiplier used in the most recent epoch.
  ///
  /// - Parameters:
  ///   - request: Request to send to AssetMultiplier.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func assetMultiplier(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetMultiplier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetMultiplierInterceptors() ?? []
    )
  }

  /// Returns all superfluid intermediary accounts.
  ///
  /// - Parameters:
  ///   - request: Request to send to AllIntermediaryAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func allIntermediaryAccounts(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allIntermediaryAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllIntermediaryAccountsInterceptors() ?? []
    )
  }

  /// Returns intermediary account connected to a superfluid staked lock by id
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectedIntermediaryAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func connectedIntermediaryAccount(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.connectedIntermediaryAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectedIntermediaryAccountInterceptors() ?? []
    )
  }

  /// Returns the total amount of osmo superfluidly staked.
  /// Response is denominated in uosmo.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalSuperfluidDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func totalSuperfluidDelegations(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalSuperfluidDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSuperfluidDelegationsInterceptors() ?? []
    )
  }

  /// Returns the coins superfluid delegated for the delegator, validator, denom
  /// triplet
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidDelegationAmount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func superfluidDelegationAmount(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationAmount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationAmountInterceptors() ?? []
    )
  }

  /// Returns all the delegated superfluid poistions for a specific delegator.
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidDelegationsByDelegator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func superfluidDelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByDelegatorInterceptors() ?? []
    )
  }

  /// Returns all the undelegating superfluid poistions for a specific delegator.
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidUndelegationsByDelegator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func superfluidUndelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidUndelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegationsByDelegatorInterceptors() ?? []
    )
  }

  /// Returns all the superfluid positions of a specific denom delegated to one
  /// validator
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidDelegationsByValidatorDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func superfluidDelegationsByValidatorDenom(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByValidatorDenomInterceptors() ?? []
    )
  }

  /// Returns the amount of a specific denom delegated to a specific validator
  /// This is labeled an estimate, because the way it calculates the amount can
  /// lead rounding errors from the true delegated amount
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateSuperfluidDelegatedAmountByValidatorDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func estimateSuperfluidDelegatedAmountByValidatorDenom(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.estimateSuperfluidDelegatedAmountByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() ?? []
    )
  }

  /// Returns the specified delegations for a specific delegator
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalDelegationByDelegator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func totalDelegationByDelegator(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalDelegationByDelegatorInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Osmosis_Superfluid_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Osmosis_Superfluid_QueryNIOClient")
public final class Osmosis_Superfluid_QueryClient: Osmosis_Superfluid_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.superfluid.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Osmosis_Superfluid_QueryNIOClient: Osmosis_Superfluid_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.superfluid.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Osmosis_Superfluid_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse>

  func makeAssetTypeCall(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse>

  func makeAllAssetsCall(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse>

  func makeAssetMultiplierCall(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse>

  func makeAllIntermediaryAccountsCall(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse>

  func makeConnectedIntermediaryAccountCall(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>

  func makeTotalSuperfluidDelegationsCall(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>

  func makeSuperfluidDelegationAmountCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse>

  func makeSuperfluidDelegationsByDelegatorCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>

  func makeSuperfluidUndelegationsByDelegatorCall(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>

  func makeSuperfluidDelegationsByValidatorDenomCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>

  func makeEstimateSuperfluidDelegatedAmountByValidatorDenomCall(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>

  func makeTotalDelegationByDelegatorCall(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Superfluid_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Superfluid_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeParamsCall(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func makeAssetTypeCall(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetTypeInterceptors() ?? []
    )
  }

  public func makeAllAssetsCall(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allAssets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllAssetsInterceptors() ?? []
    )
  }

  public func makeAssetMultiplierCall(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetMultiplier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetMultiplierInterceptors() ?? []
    )
  }

  public func makeAllIntermediaryAccountsCall(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allIntermediaryAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllIntermediaryAccountsInterceptors() ?? []
    )
  }

  public func makeConnectedIntermediaryAccountCall(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.connectedIntermediaryAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectedIntermediaryAccountInterceptors() ?? []
    )
  }

  public func makeTotalSuperfluidDelegationsCall(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalSuperfluidDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSuperfluidDelegationsInterceptors() ?? []
    )
  }

  public func makeSuperfluidDelegationAmountCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationAmount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationAmountInterceptors() ?? []
    )
  }

  public func makeSuperfluidDelegationsByDelegatorCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByDelegatorInterceptors() ?? []
    )
  }

  public func makeSuperfluidUndelegationsByDelegatorCall(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidUndelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegationsByDelegatorInterceptors() ?? []
    )
  }

  public func makeSuperfluidDelegationsByValidatorDenomCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByValidatorDenomInterceptors() ?? []
    )
  }

  public func makeEstimateSuperfluidDelegatedAmountByValidatorDenomCall(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.estimateSuperfluidDelegatedAmountByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() ?? []
    )
  }

  public func makeTotalDelegationByDelegatorCall(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalDelegationByDelegatorInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Superfluid_QueryAsyncClientProtocol {
  public func params(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func assetType(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_AssetTypeResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetTypeInterceptors() ?? []
    )
  }

  public func allAssets(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_AllAssetsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allAssets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllAssetsInterceptors() ?? []
    )
  }

  public func assetMultiplier(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_AssetMultiplierResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetMultiplier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetMultiplierInterceptors() ?? []
    )
  }

  public func allIntermediaryAccounts(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_AllIntermediaryAccountsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allIntermediaryAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllIntermediaryAccountsInterceptors() ?? []
    )
  }

  public func connectedIntermediaryAccount(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_ConnectedIntermediaryAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.connectedIntermediaryAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectedIntermediaryAccountInterceptors() ?? []
    )
  }

  public func totalSuperfluidDelegations(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_TotalSuperfluidDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalSuperfluidDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSuperfluidDelegationsInterceptors() ?? []
    )
  }

  public func superfluidDelegationAmount(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_SuperfluidDelegationAmountResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationAmount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationAmountInterceptors() ?? []
    )
  }

  public func superfluidDelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByDelegatorInterceptors() ?? []
    )
  }

  public func superfluidUndelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidUndelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegationsByDelegatorInterceptors() ?? []
    )
  }

  public func superfluidDelegationsByValidatorDenom(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByValidatorDenomInterceptors() ?? []
    )
  }

  public func estimateSuperfluidDelegatedAmountByValidatorDenom(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.estimateSuperfluidDelegatedAmountByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() ?? []
    )
  }

  public func totalDelegationByDelegator(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalDelegationByDelegatorInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Osmosis_Superfluid_QueryAsyncClient: Osmosis_Superfluid_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'assetType'.
  func makeAssetTypeInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse>]

  /// - Returns: Interceptors to use when invoking 'allAssets'.
  func makeAllAssetsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse>]

  /// - Returns: Interceptors to use when invoking 'assetMultiplier'.
  func makeAssetMultiplierInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse>]

  /// - Returns: Interceptors to use when invoking 'allIntermediaryAccounts'.
  func makeAllIntermediaryAccountsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'connectedIntermediaryAccount'.
  func makeConnectedIntermediaryAccountInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'totalSuperfluidDelegations'.
  func makeTotalSuperfluidDelegationsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidDelegationAmount'.
  func makeSuperfluidDelegationAmountInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidDelegationsByDelegator'.
  func makeSuperfluidDelegationsByDelegatorInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidUndelegationsByDelegator'.
  func makeSuperfluidUndelegationsByDelegatorInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidDelegationsByValidatorDenom'.
  func makeSuperfluidDelegationsByValidatorDenomInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateSuperfluidDelegatedAmountByValidatorDenom'.
  func makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'totalDelegationByDelegator'.
  func makeTotalDelegationByDelegatorInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse>]
}

public enum Osmosis_Superfluid_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.superfluid.Query",
    methods: [
      Osmosis_Superfluid_QueryClientMetadata.Methods.params,
      Osmosis_Superfluid_QueryClientMetadata.Methods.assetType,
      Osmosis_Superfluid_QueryClientMetadata.Methods.allAssets,
      Osmosis_Superfluid_QueryClientMetadata.Methods.assetMultiplier,
      Osmosis_Superfluid_QueryClientMetadata.Methods.allIntermediaryAccounts,
      Osmosis_Superfluid_QueryClientMetadata.Methods.connectedIntermediaryAccount,
      Osmosis_Superfluid_QueryClientMetadata.Methods.totalSuperfluidDelegations,
      Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationAmount,
      Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByDelegator,
      Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidUndelegationsByDelegator,
      Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByValidatorDenom,
      Osmosis_Superfluid_QueryClientMetadata.Methods.estimateSuperfluidDelegatedAmountByValidatorDenom,
      Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByDelegator,
    ]
  )

  public enum Methods {
    public static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.superfluid.Query/Params",
      type: GRPCCallType.unary
    )

    public static let assetType = GRPCMethodDescriptor(
      name: "AssetType",
      path: "/osmosis.superfluid.Query/AssetType",
      type: GRPCCallType.unary
    )

    public static let allAssets = GRPCMethodDescriptor(
      name: "AllAssets",
      path: "/osmosis.superfluid.Query/AllAssets",
      type: GRPCCallType.unary
    )

    public static let assetMultiplier = GRPCMethodDescriptor(
      name: "AssetMultiplier",
      path: "/osmosis.superfluid.Query/AssetMultiplier",
      type: GRPCCallType.unary
    )

    public static let allIntermediaryAccounts = GRPCMethodDescriptor(
      name: "AllIntermediaryAccounts",
      path: "/osmosis.superfluid.Query/AllIntermediaryAccounts",
      type: GRPCCallType.unary
    )

    public static let connectedIntermediaryAccount = GRPCMethodDescriptor(
      name: "ConnectedIntermediaryAccount",
      path: "/osmosis.superfluid.Query/ConnectedIntermediaryAccount",
      type: GRPCCallType.unary
    )

    public static let totalSuperfluidDelegations = GRPCMethodDescriptor(
      name: "TotalSuperfluidDelegations",
      path: "/osmosis.superfluid.Query/TotalSuperfluidDelegations",
      type: GRPCCallType.unary
    )

    public static let superfluidDelegationAmount = GRPCMethodDescriptor(
      name: "SuperfluidDelegationAmount",
      path: "/osmosis.superfluid.Query/SuperfluidDelegationAmount",
      type: GRPCCallType.unary
    )

    public static let superfluidDelegationsByDelegator = GRPCMethodDescriptor(
      name: "SuperfluidDelegationsByDelegator",
      path: "/osmosis.superfluid.Query/SuperfluidDelegationsByDelegator",
      type: GRPCCallType.unary
    )

    public static let superfluidUndelegationsByDelegator = GRPCMethodDescriptor(
      name: "SuperfluidUndelegationsByDelegator",
      path: "/osmosis.superfluid.Query/SuperfluidUndelegationsByDelegator",
      type: GRPCCallType.unary
    )

    public static let superfluidDelegationsByValidatorDenom = GRPCMethodDescriptor(
      name: "SuperfluidDelegationsByValidatorDenom",
      path: "/osmosis.superfluid.Query/SuperfluidDelegationsByValidatorDenom",
      type: GRPCCallType.unary
    )

    public static let estimateSuperfluidDelegatedAmountByValidatorDenom = GRPCMethodDescriptor(
      name: "EstimateSuperfluidDelegatedAmountByValidatorDenom",
      path: "/osmosis.superfluid.Query/EstimateSuperfluidDelegatedAmountByValidatorDenom",
      type: GRPCCallType.unary
    )

    public static let totalDelegationByDelegator = GRPCMethodDescriptor(
      name: "TotalDelegationByDelegator",
      path: "/osmosis.superfluid.Query/TotalDelegationByDelegator",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Osmosis_Superfluid_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Osmosis_Superfluid_QueryTestClient: Osmosis_Superfluid_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Params RPC. This must be called
  /// before calling 'params'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_QueryParamsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.params.path, requestHandler: requestHandler)
  }

  public func enqueueParamsResponse(
    _ response: Osmosis_Superfluid_QueryParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_QueryParamsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Params'
  public var hasParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.params.path)
  }

  /// Make a unary response for the AssetType RPC. This must be called
  /// before calling 'assetType'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAssetTypeResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_AssetTypeRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetType.path, requestHandler: requestHandler)
  }

  public func enqueueAssetTypeResponse(
    _ response: Osmosis_Superfluid_AssetTypeResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_AssetTypeRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAssetTypeResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AssetType'
  public var hasAssetTypeResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.assetType.path)
  }

  /// Make a unary response for the AllAssets RPC. This must be called
  /// before calling 'allAssets'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAllAssetsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_AllAssetsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.allAssets.path, requestHandler: requestHandler)
  }

  public func enqueueAllAssetsResponse(
    _ response: Osmosis_Superfluid_AllAssetsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_AllAssetsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAllAssetsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AllAssets'
  public var hasAllAssetsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.allAssets.path)
  }

  /// Make a unary response for the AssetMultiplier RPC. This must be called
  /// before calling 'assetMultiplier'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAssetMultiplierResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_AssetMultiplierRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetMultiplier.path, requestHandler: requestHandler)
  }

  public func enqueueAssetMultiplierResponse(
    _ response: Osmosis_Superfluid_AssetMultiplierResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_AssetMultiplierRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAssetMultiplierResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AssetMultiplier'
  public var hasAssetMultiplierResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.assetMultiplier.path)
  }

  /// Make a unary response for the AllIntermediaryAccounts RPC. This must be called
  /// before calling 'allIntermediaryAccounts'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAllIntermediaryAccountsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_AllIntermediaryAccountsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.allIntermediaryAccounts.path, requestHandler: requestHandler)
  }

  public func enqueueAllIntermediaryAccountsResponse(
    _ response: Osmosis_Superfluid_AllIntermediaryAccountsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_AllIntermediaryAccountsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAllIntermediaryAccountsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AllIntermediaryAccounts'
  public var hasAllIntermediaryAccountsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.allIntermediaryAccounts.path)
  }

  /// Make a unary response for the ConnectedIntermediaryAccount RPC. This must be called
  /// before calling 'connectedIntermediaryAccount'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeConnectedIntermediaryAccountResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.connectedIntermediaryAccount.path, requestHandler: requestHandler)
  }

  public func enqueueConnectedIntermediaryAccountResponse(
    _ response: Osmosis_Superfluid_ConnectedIntermediaryAccountResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest>) -> () = { _ in }
  ) {
    let stream = self.makeConnectedIntermediaryAccountResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ConnectedIntermediaryAccount'
  public var hasConnectedIntermediaryAccountResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.connectedIntermediaryAccount.path)
  }

  /// Make a unary response for the TotalSuperfluidDelegations RPC. This must be called
  /// before calling 'totalSuperfluidDelegations'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeTotalSuperfluidDelegationsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalSuperfluidDelegations.path, requestHandler: requestHandler)
  }

  public func enqueueTotalSuperfluidDelegationsResponse(
    _ response: Osmosis_Superfluid_TotalSuperfluidDelegationsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeTotalSuperfluidDelegationsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TotalSuperfluidDelegations'
  public var hasTotalSuperfluidDelegationsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.totalSuperfluidDelegations.path)
  }

  /// Make a unary response for the SuperfluidDelegationAmount RPC. This must be called
  /// before calling 'superfluidDelegationAmount'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSuperfluidDelegationAmountResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_SuperfluidDelegationAmountRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationAmount.path, requestHandler: requestHandler)
  }

  public func enqueueSuperfluidDelegationAmountResponse(
    _ response: Osmosis_Superfluid_SuperfluidDelegationAmountResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_SuperfluidDelegationAmountRequest>) -> () = { _ in }
  ) {
    let stream = self.makeSuperfluidDelegationAmountResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SuperfluidDelegationAmount'
  public var hasSuperfluidDelegationAmountResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationAmount.path)
  }

  /// Make a unary response for the SuperfluidDelegationsByDelegator RPC. This must be called
  /// before calling 'superfluidDelegationsByDelegator'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSuperfluidDelegationsByDelegatorResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByDelegator.path, requestHandler: requestHandler)
  }

  public func enqueueSuperfluidDelegationsByDelegatorResponse(
    _ response: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest>) -> () = { _ in }
  ) {
    let stream = self.makeSuperfluidDelegationsByDelegatorResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SuperfluidDelegationsByDelegator'
  public var hasSuperfluidDelegationsByDelegatorResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByDelegator.path)
  }

  /// Make a unary response for the SuperfluidUndelegationsByDelegator RPC. This must be called
  /// before calling 'superfluidUndelegationsByDelegator'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSuperfluidUndelegationsByDelegatorResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidUndelegationsByDelegator.path, requestHandler: requestHandler)
  }

  public func enqueueSuperfluidUndelegationsByDelegatorResponse(
    _ response: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest>) -> () = { _ in }
  ) {
    let stream = self.makeSuperfluidUndelegationsByDelegatorResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SuperfluidUndelegationsByDelegator'
  public var hasSuperfluidUndelegationsByDelegatorResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidUndelegationsByDelegator.path)
  }

  /// Make a unary response for the SuperfluidDelegationsByValidatorDenom RPC. This must be called
  /// before calling 'superfluidDelegationsByValidatorDenom'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSuperfluidDelegationsByValidatorDenomResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByValidatorDenom.path, requestHandler: requestHandler)
  }

  public func enqueueSuperfluidDelegationsByValidatorDenomResponse(
    _ response: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest>) -> () = { _ in }
  ) {
    let stream = self.makeSuperfluidDelegationsByValidatorDenomResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SuperfluidDelegationsByValidatorDenom'
  public var hasSuperfluidDelegationsByValidatorDenomResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByValidatorDenom.path)
  }

  /// Make a unary response for the EstimateSuperfluidDelegatedAmountByValidatorDenom RPC. This must be called
  /// before calling 'estimateSuperfluidDelegatedAmountByValidatorDenom'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeEstimateSuperfluidDelegatedAmountByValidatorDenomResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.estimateSuperfluidDelegatedAmountByValidatorDenom.path, requestHandler: requestHandler)
  }

  public func enqueueEstimateSuperfluidDelegatedAmountByValidatorDenomResponse(
    _ response: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest>) -> () = { _ in }
  ) {
    let stream = self.makeEstimateSuperfluidDelegatedAmountByValidatorDenomResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'EstimateSuperfluidDelegatedAmountByValidatorDenom'
  public var hasEstimateSuperfluidDelegatedAmountByValidatorDenomResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.estimateSuperfluidDelegatedAmountByValidatorDenom.path)
  }

  /// Make a unary response for the TotalDelegationByDelegator RPC. This must be called
  /// before calling 'totalDelegationByDelegator'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeTotalDelegationByDelegatorResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByDelegator.path, requestHandler: requestHandler)
  }

  public func enqueueTotalDelegationByDelegatorResponse(
    _ response: Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse,
    _ requestHandler: @escaping (FakeRequestPart<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest>) -> () = { _ in }
  ) {
    let stream = self.makeTotalDelegationByDelegatorResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TotalDelegationByDelegator'
  public var hasTotalDelegationByDelegatorResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByDelegator.path)
  }
}

