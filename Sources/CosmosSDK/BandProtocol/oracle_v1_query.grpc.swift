//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: oracle/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Oracle_V1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Oracle_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol? { get }

  func counts(
    _ request: Oracle_V1_QueryCountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryCountsRequest, Oracle_V1_QueryCountsResponse>

  func data(
    _ request: Oracle_V1_QueryDataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryDataRequest, Oracle_V1_QueryDataResponse>

  func dataSource(
    _ request: Oracle_V1_QueryDataSourceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryDataSourceRequest, Oracle_V1_QueryDataSourceResponse>

  func oracleScript(
    _ request: Oracle_V1_QueryOracleScriptRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryOracleScriptRequest, Oracle_V1_QueryOracleScriptResponse>

  func request(
    _ request: Oracle_V1_QueryRequestRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryRequestRequest, Oracle_V1_QueryRequestResponse>

  func pendingRequests(
    _ request: Oracle_V1_QueryPendingRequestsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryPendingRequestsRequest, Oracle_V1_QueryPendingRequestsResponse>

  func validator(
    _ request: Oracle_V1_QueryValidatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryValidatorRequest, Oracle_V1_QueryValidatorResponse>

  func isReporter(
    _ request: Oracle_V1_QueryIsReporterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryIsReporterRequest, Oracle_V1_QueryIsReporterResponse>

  func reporters(
    _ request: Oracle_V1_QueryReportersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryReportersRequest, Oracle_V1_QueryReportersResponse>

  func activeValidators(
    _ request: Oracle_V1_QueryActiveValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryActiveValidatorsRequest, Oracle_V1_QueryActiveValidatorsResponse>

  func params(
    _ request: Oracle_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryParamsRequest, Oracle_V1_QueryParamsResponse>

  func requestSearch(
    _ request: Oracle_V1_QueryRequestSearchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryRequestSearchRequest, Oracle_V1_QueryRequestSearchResponse>

  func requestPrice(
    _ request: Oracle_V1_QueryRequestPriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryRequestPriceRequest, Oracle_V1_QueryRequestPriceResponse>

  func requestVerification(
    _ request: Oracle_V1_QueryRequestVerificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_QueryRequestVerificationRequest, Oracle_V1_QueryRequestVerificationResponse>
}

extension Oracle_V1_QueryClientProtocol {
  public var serviceName: String {
    return "oracle.v1.Query"
  }

  /// Counts queries the number of existing data sources, oracle scripts, and
  /// requests.
  ///
  /// - Parameters:
  ///   - request: Request to send to Counts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func counts(
    _ request: Oracle_V1_QueryCountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryCountsRequest, Oracle_V1_QueryCountsResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.counts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCountsInterceptors() ?? []
    )
  }

  /// Data queries content of the data source or oracle script for given SHA256
  /// file hash.
  ///
  /// - Parameters:
  ///   - request: Request to send to Data.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func data(
    _ request: Oracle_V1_QueryDataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryDataRequest, Oracle_V1_QueryDataResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.data.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataInterceptors() ?? []
    )
  }

  /// DataSource queries data source summary info for given data source id.
  ///
  /// - Parameters:
  ///   - request: Request to send to DataSource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dataSource(
    _ request: Oracle_V1_QueryDataSourceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryDataSourceRequest, Oracle_V1_QueryDataSourceResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.dataSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataSourceInterceptors() ?? []
    )
  }

  /// OracleScript queries oracle script summary info for given oracle script id.
  ///
  /// - Parameters:
  ///   - request: Request to send to OracleScript.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func oracleScript(
    _ request: Oracle_V1_QueryOracleScriptRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryOracleScriptRequest, Oracle_V1_QueryOracleScriptResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.oracleScript.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleScriptInterceptors() ?? []
    )
  }

  /// Request queries request info for given request id.
  ///
  /// - Parameters:
  ///   - request: Request to send to Request.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func request(
    _ request: Oracle_V1_QueryRequestRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryRequestRequest, Oracle_V1_QueryRequestResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.request.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestInterceptors() ?? []
    )
  }

  /// PendingRequests queries list of pending request IDs assigned to given
  /// validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to PendingRequests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pendingRequests(
    _ request: Oracle_V1_QueryPendingRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryPendingRequestsRequest, Oracle_V1_QueryPendingRequestsResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.pendingRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingRequestsInterceptors() ?? []
    )
  }

  /// Validator queries properties of given validator address.
  ///
  /// - Parameters:
  ///   - request: Request to send to Validator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validator(
    _ request: Oracle_V1_QueryValidatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryValidatorRequest, Oracle_V1_QueryValidatorResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.validator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInterceptors() ?? []
    )
  }

  /// IsReporter queries grant of account on this validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to IsReporter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func isReporter(
    _ request: Oracle_V1_QueryIsReporterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryIsReporterRequest, Oracle_V1_QueryIsReporterResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.isReporter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsReporterInterceptors() ?? []
    )
  }

  /// Reporters queries all reporters associated with given validator address.
  ///
  /// - Parameters:
  ///   - request: Request to send to Reporters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func reporters(
    _ request: Oracle_V1_QueryReportersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryReportersRequest, Oracle_V1_QueryReportersResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.reporters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReportersInterceptors() ?? []
    )
  }

  /// ActiveValidators queries all active oracle validators.
  ///
  /// - Parameters:
  ///   - request: Request to send to ActiveValidators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func activeValidators(
    _ request: Oracle_V1_QueryActiveValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryActiveValidatorsRequest, Oracle_V1_QueryActiveValidatorsResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.activeValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveValidatorsInterceptors() ?? []
    )
  }

  /// Params queries parameters used for runnning bandchain network.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func params(
    _ request: Oracle_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryParamsRequest, Oracle_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// RequestSearch queries the latest request that match search criteria.
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestSearch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func requestSearch(
    _ request: Oracle_V1_QueryRequestSearchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryRequestSearchRequest, Oracle_V1_QueryRequestSearchResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.requestSearch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestSearchInterceptors() ?? []
    )
  }

  /// RequestPrice queries the latest price on standard price reference oracle
  /// script.
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func requestPrice(
    _ request: Oracle_V1_QueryRequestPriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryRequestPriceRequest, Oracle_V1_QueryRequestPriceResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.requestPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestPriceInterceptors() ?? []
    )
  }

  /// RequestVerification verifies a request to make sure that
  /// all information that will be used to report the data is valid
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestVerification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func requestVerification(
    _ request: Oracle_V1_QueryRequestVerificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_QueryRequestVerificationRequest, Oracle_V1_QueryRequestVerificationResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.requestVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestVerificationInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Oracle_V1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Oracle_V1_QueryNIOClient")
public final class Oracle_V1_QueryClient: Oracle_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the oracle.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Oracle_V1_QueryNIOClient: Oracle_V1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the oracle.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Oracle_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeCountsCall(
    _ request: Oracle_V1_QueryCountsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryCountsRequest, Oracle_V1_QueryCountsResponse>

  func makeDataCall(
    _ request: Oracle_V1_QueryDataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryDataRequest, Oracle_V1_QueryDataResponse>

  func makeDataSourceCall(
    _ request: Oracle_V1_QueryDataSourceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryDataSourceRequest, Oracle_V1_QueryDataSourceResponse>

  func makeOracleScriptCall(
    _ request: Oracle_V1_QueryOracleScriptRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryOracleScriptRequest, Oracle_V1_QueryOracleScriptResponse>

  func makeRequestCall(
    _ request: Oracle_V1_QueryRequestRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryRequestRequest, Oracle_V1_QueryRequestResponse>

  func makePendingRequestsCall(
    _ request: Oracle_V1_QueryPendingRequestsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryPendingRequestsRequest, Oracle_V1_QueryPendingRequestsResponse>

  func makeValidatorCall(
    _ request: Oracle_V1_QueryValidatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryValidatorRequest, Oracle_V1_QueryValidatorResponse>

  func makeIsReporterCall(
    _ request: Oracle_V1_QueryIsReporterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryIsReporterRequest, Oracle_V1_QueryIsReporterResponse>

  func makeReportersCall(
    _ request: Oracle_V1_QueryReportersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryReportersRequest, Oracle_V1_QueryReportersResponse>

  func makeActiveValidatorsCall(
    _ request: Oracle_V1_QueryActiveValidatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryActiveValidatorsRequest, Oracle_V1_QueryActiveValidatorsResponse>

  func makeParamsCall(
    _ request: Oracle_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryParamsRequest, Oracle_V1_QueryParamsResponse>

  func makeRequestSearchCall(
    _ request: Oracle_V1_QueryRequestSearchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryRequestSearchRequest, Oracle_V1_QueryRequestSearchResponse>

  func makeRequestPriceCall(
    _ request: Oracle_V1_QueryRequestPriceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryRequestPriceRequest, Oracle_V1_QueryRequestPriceResponse>

  func makeRequestVerificationCall(
    _ request: Oracle_V1_QueryRequestVerificationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryRequestVerificationRequest, Oracle_V1_QueryRequestVerificationResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Oracle_V1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Oracle_V1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCountsCall(
    _ request: Oracle_V1_QueryCountsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryCountsRequest, Oracle_V1_QueryCountsResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.counts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCountsInterceptors() ?? []
    )
  }

  public func makeDataCall(
    _ request: Oracle_V1_QueryDataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryDataRequest, Oracle_V1_QueryDataResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.data.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataInterceptors() ?? []
    )
  }

  public func makeDataSourceCall(
    _ request: Oracle_V1_QueryDataSourceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryDataSourceRequest, Oracle_V1_QueryDataSourceResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.dataSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataSourceInterceptors() ?? []
    )
  }

  public func makeOracleScriptCall(
    _ request: Oracle_V1_QueryOracleScriptRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryOracleScriptRequest, Oracle_V1_QueryOracleScriptResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.oracleScript.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleScriptInterceptors() ?? []
    )
  }

  public func makeRequestCall(
    _ request: Oracle_V1_QueryRequestRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryRequestRequest, Oracle_V1_QueryRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.request.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestInterceptors() ?? []
    )
  }

  public func makePendingRequestsCall(
    _ request: Oracle_V1_QueryPendingRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryPendingRequestsRequest, Oracle_V1_QueryPendingRequestsResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.pendingRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingRequestsInterceptors() ?? []
    )
  }

  public func makeValidatorCall(
    _ request: Oracle_V1_QueryValidatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryValidatorRequest, Oracle_V1_QueryValidatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.validator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInterceptors() ?? []
    )
  }

  public func makeIsReporterCall(
    _ request: Oracle_V1_QueryIsReporterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryIsReporterRequest, Oracle_V1_QueryIsReporterResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.isReporter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsReporterInterceptors() ?? []
    )
  }

  public func makeReportersCall(
    _ request: Oracle_V1_QueryReportersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryReportersRequest, Oracle_V1_QueryReportersResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.reporters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReportersInterceptors() ?? []
    )
  }

  public func makeActiveValidatorsCall(
    _ request: Oracle_V1_QueryActiveValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryActiveValidatorsRequest, Oracle_V1_QueryActiveValidatorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.activeValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveValidatorsInterceptors() ?? []
    )
  }

  public func makeParamsCall(
    _ request: Oracle_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryParamsRequest, Oracle_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func makeRequestSearchCall(
    _ request: Oracle_V1_QueryRequestSearchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryRequestSearchRequest, Oracle_V1_QueryRequestSearchResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.requestSearch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestSearchInterceptors() ?? []
    )
  }

  public func makeRequestPriceCall(
    _ request: Oracle_V1_QueryRequestPriceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryRequestPriceRequest, Oracle_V1_QueryRequestPriceResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.requestPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestPriceInterceptors() ?? []
    )
  }

  public func makeRequestVerificationCall(
    _ request: Oracle_V1_QueryRequestVerificationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_QueryRequestVerificationRequest, Oracle_V1_QueryRequestVerificationResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.requestVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestVerificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Oracle_V1_QueryAsyncClientProtocol {
  public func counts(
    _ request: Oracle_V1_QueryCountsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryCountsResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.counts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCountsInterceptors() ?? []
    )
  }

  public func data(
    _ request: Oracle_V1_QueryDataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryDataResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.data.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataInterceptors() ?? []
    )
  }

  public func dataSource(
    _ request: Oracle_V1_QueryDataSourceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryDataSourceResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.dataSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataSourceInterceptors() ?? []
    )
  }

  public func oracleScript(
    _ request: Oracle_V1_QueryOracleScriptRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryOracleScriptResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.oracleScript.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleScriptInterceptors() ?? []
    )
  }

  public func request(
    _ request: Oracle_V1_QueryRequestRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.request.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestInterceptors() ?? []
    )
  }

  public func pendingRequests(
    _ request: Oracle_V1_QueryPendingRequestsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryPendingRequestsResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.pendingRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingRequestsInterceptors() ?? []
    )
  }

  public func validator(
    _ request: Oracle_V1_QueryValidatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryValidatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.validator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInterceptors() ?? []
    )
  }

  public func isReporter(
    _ request: Oracle_V1_QueryIsReporterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryIsReporterResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.isReporter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsReporterInterceptors() ?? []
    )
  }

  public func reporters(
    _ request: Oracle_V1_QueryReportersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryReportersResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.reporters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReportersInterceptors() ?? []
    )
  }

  public func activeValidators(
    _ request: Oracle_V1_QueryActiveValidatorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryActiveValidatorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.activeValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveValidatorsInterceptors() ?? []
    )
  }

  public func params(
    _ request: Oracle_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func requestSearch(
    _ request: Oracle_V1_QueryRequestSearchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryRequestSearchResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.requestSearch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestSearchInterceptors() ?? []
    )
  }

  public func requestPrice(
    _ request: Oracle_V1_QueryRequestPriceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryRequestPriceResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.requestPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestPriceInterceptors() ?? []
    )
  }

  public func requestVerification(
    _ request: Oracle_V1_QueryRequestVerificationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_QueryRequestVerificationResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_QueryClientMetadata.Methods.requestVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestVerificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Oracle_V1_QueryAsyncClient: Oracle_V1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Oracle_V1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'counts'.
  func makeCountsInterceptors() -> [ClientInterceptor<Oracle_V1_QueryCountsRequest, Oracle_V1_QueryCountsResponse>]

  /// - Returns: Interceptors to use when invoking 'data'.
  func makeDataInterceptors() -> [ClientInterceptor<Oracle_V1_QueryDataRequest, Oracle_V1_QueryDataResponse>]

  /// - Returns: Interceptors to use when invoking 'dataSource'.
  func makeDataSourceInterceptors() -> [ClientInterceptor<Oracle_V1_QueryDataSourceRequest, Oracle_V1_QueryDataSourceResponse>]

  /// - Returns: Interceptors to use when invoking 'oracleScript'.
  func makeOracleScriptInterceptors() -> [ClientInterceptor<Oracle_V1_QueryOracleScriptRequest, Oracle_V1_QueryOracleScriptResponse>]

  /// - Returns: Interceptors to use when invoking 'request'.
  func makeRequestInterceptors() -> [ClientInterceptor<Oracle_V1_QueryRequestRequest, Oracle_V1_QueryRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'pendingRequests'.
  func makePendingRequestsInterceptors() -> [ClientInterceptor<Oracle_V1_QueryPendingRequestsRequest, Oracle_V1_QueryPendingRequestsResponse>]

  /// - Returns: Interceptors to use when invoking 'validator'.
  func makeValidatorInterceptors() -> [ClientInterceptor<Oracle_V1_QueryValidatorRequest, Oracle_V1_QueryValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'isReporter'.
  func makeIsReporterInterceptors() -> [ClientInterceptor<Oracle_V1_QueryIsReporterRequest, Oracle_V1_QueryIsReporterResponse>]

  /// - Returns: Interceptors to use when invoking 'reporters'.
  func makeReportersInterceptors() -> [ClientInterceptor<Oracle_V1_QueryReportersRequest, Oracle_V1_QueryReportersResponse>]

  /// - Returns: Interceptors to use when invoking 'activeValidators'.
  func makeActiveValidatorsInterceptors() -> [ClientInterceptor<Oracle_V1_QueryActiveValidatorsRequest, Oracle_V1_QueryActiveValidatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Oracle_V1_QueryParamsRequest, Oracle_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'requestSearch'.
  func makeRequestSearchInterceptors() -> [ClientInterceptor<Oracle_V1_QueryRequestSearchRequest, Oracle_V1_QueryRequestSearchResponse>]

  /// - Returns: Interceptors to use when invoking 'requestPrice'.
  func makeRequestPriceInterceptors() -> [ClientInterceptor<Oracle_V1_QueryRequestPriceRequest, Oracle_V1_QueryRequestPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'requestVerification'.
  func makeRequestVerificationInterceptors() -> [ClientInterceptor<Oracle_V1_QueryRequestVerificationRequest, Oracle_V1_QueryRequestVerificationResponse>]
}

public enum Oracle_V1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "oracle.v1.Query",
    methods: [
      Oracle_V1_QueryClientMetadata.Methods.counts,
      Oracle_V1_QueryClientMetadata.Methods.data,
      Oracle_V1_QueryClientMetadata.Methods.dataSource,
      Oracle_V1_QueryClientMetadata.Methods.oracleScript,
      Oracle_V1_QueryClientMetadata.Methods.request,
      Oracle_V1_QueryClientMetadata.Methods.pendingRequests,
      Oracle_V1_QueryClientMetadata.Methods.validator,
      Oracle_V1_QueryClientMetadata.Methods.isReporter,
      Oracle_V1_QueryClientMetadata.Methods.reporters,
      Oracle_V1_QueryClientMetadata.Methods.activeValidators,
      Oracle_V1_QueryClientMetadata.Methods.params,
      Oracle_V1_QueryClientMetadata.Methods.requestSearch,
      Oracle_V1_QueryClientMetadata.Methods.requestPrice,
      Oracle_V1_QueryClientMetadata.Methods.requestVerification,
    ]
  )

  public enum Methods {
    public static let counts = GRPCMethodDescriptor(
      name: "Counts",
      path: "/oracle.v1.Query/Counts",
      type: GRPCCallType.unary
    )

    public static let data = GRPCMethodDescriptor(
      name: "Data",
      path: "/oracle.v1.Query/Data",
      type: GRPCCallType.unary
    )

    public static let dataSource = GRPCMethodDescriptor(
      name: "DataSource",
      path: "/oracle.v1.Query/DataSource",
      type: GRPCCallType.unary
    )

    public static let oracleScript = GRPCMethodDescriptor(
      name: "OracleScript",
      path: "/oracle.v1.Query/OracleScript",
      type: GRPCCallType.unary
    )

    public static let request = GRPCMethodDescriptor(
      name: "Request",
      path: "/oracle.v1.Query/Request",
      type: GRPCCallType.unary
    )

    public static let pendingRequests = GRPCMethodDescriptor(
      name: "PendingRequests",
      path: "/oracle.v1.Query/PendingRequests",
      type: GRPCCallType.unary
    )

    public static let validator = GRPCMethodDescriptor(
      name: "Validator",
      path: "/oracle.v1.Query/Validator",
      type: GRPCCallType.unary
    )

    public static let isReporter = GRPCMethodDescriptor(
      name: "IsReporter",
      path: "/oracle.v1.Query/IsReporter",
      type: GRPCCallType.unary
    )

    public static let reporters = GRPCMethodDescriptor(
      name: "Reporters",
      path: "/oracle.v1.Query/Reporters",
      type: GRPCCallType.unary
    )

    public static let activeValidators = GRPCMethodDescriptor(
      name: "ActiveValidators",
      path: "/oracle.v1.Query/ActiveValidators",
      type: GRPCCallType.unary
    )

    public static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/oracle.v1.Query/Params",
      type: GRPCCallType.unary
    )

    public static let requestSearch = GRPCMethodDescriptor(
      name: "RequestSearch",
      path: "/oracle.v1.Query/RequestSearch",
      type: GRPCCallType.unary
    )

    public static let requestPrice = GRPCMethodDescriptor(
      name: "RequestPrice",
      path: "/oracle.v1.Query/RequestPrice",
      type: GRPCCallType.unary
    )

    public static let requestVerification = GRPCMethodDescriptor(
      name: "RequestVerification",
      path: "/oracle.v1.Query/RequestVerification",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Oracle_V1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Oracle_V1_QueryTestClient: Oracle_V1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Oracle_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Counts RPC. This must be called
  /// before calling 'counts'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCountsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryCountsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryCountsRequest, Oracle_V1_QueryCountsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.counts.path, requestHandler: requestHandler)
  }

  public func enqueueCountsResponse(
    _ response: Oracle_V1_QueryCountsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryCountsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeCountsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Counts'
  public var hasCountsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.counts.path)
  }

  /// Make a unary response for the Data RPC. This must be called
  /// before calling 'data'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDataResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryDataRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryDataRequest, Oracle_V1_QueryDataResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.data.path, requestHandler: requestHandler)
  }

  public func enqueueDataResponse(
    _ response: Oracle_V1_QueryDataResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryDataRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDataResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Data'
  public var hasDataResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.data.path)
  }

  /// Make a unary response for the DataSource RPC. This must be called
  /// before calling 'dataSource'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDataSourceResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryDataSourceRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryDataSourceRequest, Oracle_V1_QueryDataSourceResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.dataSource.path, requestHandler: requestHandler)
  }

  public func enqueueDataSourceResponse(
    _ response: Oracle_V1_QueryDataSourceResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryDataSourceRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDataSourceResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DataSource'
  public var hasDataSourceResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.dataSource.path)
  }

  /// Make a unary response for the OracleScript RPC. This must be called
  /// before calling 'oracleScript'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeOracleScriptResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryOracleScriptRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryOracleScriptRequest, Oracle_V1_QueryOracleScriptResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.oracleScript.path, requestHandler: requestHandler)
  }

  public func enqueueOracleScriptResponse(
    _ response: Oracle_V1_QueryOracleScriptResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryOracleScriptRequest>) -> () = { _ in }
  ) {
    let stream = self.makeOracleScriptResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'OracleScript'
  public var hasOracleScriptResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.oracleScript.path)
  }

  /// Make a unary response for the Request RPC. This must be called
  /// before calling 'request'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeRequestResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryRequestRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryRequestRequest, Oracle_V1_QueryRequestResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.request.path, requestHandler: requestHandler)
  }

  public func enqueueRequestResponse(
    _ response: Oracle_V1_QueryRequestResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryRequestRequest>) -> () = { _ in }
  ) {
    let stream = self.makeRequestResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Request'
  public var hasRequestResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.request.path)
  }

  /// Make a unary response for the PendingRequests RPC. This must be called
  /// before calling 'pendingRequests'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makePendingRequestsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryPendingRequestsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryPendingRequestsRequest, Oracle_V1_QueryPendingRequestsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.pendingRequests.path, requestHandler: requestHandler)
  }

  public func enqueuePendingRequestsResponse(
    _ response: Oracle_V1_QueryPendingRequestsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryPendingRequestsRequest>) -> () = { _ in }
  ) {
    let stream = self.makePendingRequestsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'PendingRequests'
  public var hasPendingRequestsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.pendingRequests.path)
  }

  /// Make a unary response for the Validator RPC. This must be called
  /// before calling 'validator'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeValidatorResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryValidatorRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryValidatorRequest, Oracle_V1_QueryValidatorResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.validator.path, requestHandler: requestHandler)
  }

  public func enqueueValidatorResponse(
    _ response: Oracle_V1_QueryValidatorResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryValidatorRequest>) -> () = { _ in }
  ) {
    let stream = self.makeValidatorResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Validator'
  public var hasValidatorResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.validator.path)
  }

  /// Make a unary response for the IsReporter RPC. This must be called
  /// before calling 'isReporter'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeIsReporterResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryIsReporterRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryIsReporterRequest, Oracle_V1_QueryIsReporterResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.isReporter.path, requestHandler: requestHandler)
  }

  public func enqueueIsReporterResponse(
    _ response: Oracle_V1_QueryIsReporterResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryIsReporterRequest>) -> () = { _ in }
  ) {
    let stream = self.makeIsReporterResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'IsReporter'
  public var hasIsReporterResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.isReporter.path)
  }

  /// Make a unary response for the Reporters RPC. This must be called
  /// before calling 'reporters'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeReportersResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryReportersRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryReportersRequest, Oracle_V1_QueryReportersResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.reporters.path, requestHandler: requestHandler)
  }

  public func enqueueReportersResponse(
    _ response: Oracle_V1_QueryReportersResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryReportersRequest>) -> () = { _ in }
  ) {
    let stream = self.makeReportersResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Reporters'
  public var hasReportersResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.reporters.path)
  }

  /// Make a unary response for the ActiveValidators RPC. This must be called
  /// before calling 'activeValidators'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeActiveValidatorsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryActiveValidatorsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryActiveValidatorsRequest, Oracle_V1_QueryActiveValidatorsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.activeValidators.path, requestHandler: requestHandler)
  }

  public func enqueueActiveValidatorsResponse(
    _ response: Oracle_V1_QueryActiveValidatorsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryActiveValidatorsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeActiveValidatorsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ActiveValidators'
  public var hasActiveValidatorsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.activeValidators.path)
  }

  /// Make a unary response for the Params RPC. This must be called
  /// before calling 'params'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryParamsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryParamsRequest, Oracle_V1_QueryParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.params.path, requestHandler: requestHandler)
  }

  public func enqueueParamsResponse(
    _ response: Oracle_V1_QueryParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryParamsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Params'
  public var hasParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.params.path)
  }

  /// Make a unary response for the RequestSearch RPC. This must be called
  /// before calling 'requestSearch'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeRequestSearchResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryRequestSearchRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryRequestSearchRequest, Oracle_V1_QueryRequestSearchResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.requestSearch.path, requestHandler: requestHandler)
  }

  public func enqueueRequestSearchResponse(
    _ response: Oracle_V1_QueryRequestSearchResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryRequestSearchRequest>) -> () = { _ in }
  ) {
    let stream = self.makeRequestSearchResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'RequestSearch'
  public var hasRequestSearchResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.requestSearch.path)
  }

  /// Make a unary response for the RequestPrice RPC. This must be called
  /// before calling 'requestPrice'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeRequestPriceResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryRequestPriceRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryRequestPriceRequest, Oracle_V1_QueryRequestPriceResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.requestPrice.path, requestHandler: requestHandler)
  }

  public func enqueueRequestPriceResponse(
    _ response: Oracle_V1_QueryRequestPriceResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryRequestPriceRequest>) -> () = { _ in }
  ) {
    let stream = self.makeRequestPriceResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'RequestPrice'
  public var hasRequestPriceResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.requestPrice.path)
  }

  /// Make a unary response for the RequestVerification RPC. This must be called
  /// before calling 'requestVerification'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeRequestVerificationResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryRequestVerificationRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Oracle_V1_QueryRequestVerificationRequest, Oracle_V1_QueryRequestVerificationResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Oracle_V1_QueryClientMetadata.Methods.requestVerification.path, requestHandler: requestHandler)
  }

  public func enqueueRequestVerificationResponse(
    _ response: Oracle_V1_QueryRequestVerificationResponse,
    _ requestHandler: @escaping (FakeRequestPart<Oracle_V1_QueryRequestVerificationRequest>) -> () = { _ in }
  ) {
    let stream = self.makeRequestVerificationResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'RequestVerification'
  public var hasRequestVerificationResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Oracle_V1_QueryClientMetadata.Methods.requestVerification.path)
  }
}

