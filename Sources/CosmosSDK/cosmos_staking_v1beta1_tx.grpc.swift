//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/staking/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the staking Msg service.
///
/// Usage: instantiate `Cosmos_Staking_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Staking_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createValidator(
    _ request: Cosmos_Staking_V1beta1_MsgCreateValidator,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse>

  func editValidator(
    _ request: Cosmos_Staking_V1beta1_MsgEditValidator,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse>

  func delegate(
    _ request: Cosmos_Staking_V1beta1_MsgDelegate,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse>

  func beginRedelegate(
    _ request: Cosmos_Staking_V1beta1_MsgBeginRedelegate,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse>

  func undelegate(
    _ request: Cosmos_Staking_V1beta1_MsgUndelegate,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse>

  func cancelUnbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse>

  func updateParams(
    _ request: Cosmos_Staking_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse>
}

extension Cosmos_Staking_V1beta1_MsgClientProtocol {
  public var serviceName: String {
    return "cosmos.staking.v1beta1.Msg"
  }

  /// CreateValidator defines a method for creating a new validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createValidator(
    _ request: Cosmos_Staking_V1beta1_MsgCreateValidator,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.createValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateValidatorInterceptors() ?? []
    )
  }

  /// EditValidator defines a method for editing an existing validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to EditValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func editValidator(
    _ request: Cosmos_Staking_V1beta1_MsgEditValidator,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.editValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditValidatorInterceptors() ?? []
    )
  }

  /// Delegate defines a method for performing a delegation of coins
  /// from a delegator to a validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to Delegate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delegate(
    _ request: Cosmos_Staking_V1beta1_MsgDelegate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.delegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegateInterceptors() ?? []
    )
  }

  /// BeginRedelegate defines a method for performing a redelegation
  /// of coins from a delegator and source validator to a destination validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to BeginRedelegate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func beginRedelegate(
    _ request: Cosmos_Staking_V1beta1_MsgBeginRedelegate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.beginRedelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginRedelegateInterceptors() ?? []
    )
  }

  /// Undelegate defines a method for performing an undelegation from a
  /// delegate and a validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to Undelegate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func undelegate(
    _ request: Cosmos_Staking_V1beta1_MsgUndelegate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.undelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUndelegateInterceptors() ?? []
    )
  }

  /// CancelUnbondingDelegation defines a method for performing canceling the unbonding delegation
  /// and delegate back to previous validator.
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelUnbondingDelegation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancelUnbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.cancelUnbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelUnbondingDelegationInterceptors() ?? []
    )
  }

  /// UpdateParams defines an operation for updating the x/staking module
  /// parameters.
  /// Since: cosmos-sdk 0.47
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateParams(
    _ request: Cosmos_Staking_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Staking_V1beta1_MsgClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Staking_V1beta1_MsgNIOClient")
public final class Cosmos_Staking_V1beta1_MsgClient: Cosmos_Staking_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.staking.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Staking_V1beta1_MsgNIOClient: Cosmos_Staking_V1beta1_MsgClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.staking.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Msg defines the staking Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Staking_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateValidatorCall(
    _ request: Cosmos_Staking_V1beta1_MsgCreateValidator,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse>

  func makeEditValidatorCall(
    _ request: Cosmos_Staking_V1beta1_MsgEditValidator,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse>

  func makeDelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgDelegate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse>

  func makeBeginRedelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgBeginRedelegate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse>

  func makeUndelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgUndelegate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse>

  func makeCancelUnbondingDelegationCall(
    _ request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse>

  func makeUpdateParamsCall(
    _ request: Cosmos_Staking_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Staking_V1beta1_MsgAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Staking_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateValidatorCall(
    _ request: Cosmos_Staking_V1beta1_MsgCreateValidator,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.createValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateValidatorInterceptors() ?? []
    )
  }

  public func makeEditValidatorCall(
    _ request: Cosmos_Staking_V1beta1_MsgEditValidator,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.editValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditValidatorInterceptors() ?? []
    )
  }

  public func makeDelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgDelegate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.delegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegateInterceptors() ?? []
    )
  }

  public func makeBeginRedelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgBeginRedelegate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.beginRedelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginRedelegateInterceptors() ?? []
    )
  }

  public func makeUndelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgUndelegate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.undelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUndelegateInterceptors() ?? []
    )
  }

  public func makeCancelUnbondingDelegationCall(
    _ request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.cancelUnbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelUnbondingDelegationInterceptors() ?? []
    )
  }

  public func makeUpdateParamsCall(
    _ request: Cosmos_Staking_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Staking_V1beta1_MsgAsyncClientProtocol {
  public func createValidator(
    _ request: Cosmos_Staking_V1beta1_MsgCreateValidator,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgCreateValidatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.createValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateValidatorInterceptors() ?? []
    )
  }

  public func editValidator(
    _ request: Cosmos_Staking_V1beta1_MsgEditValidator,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgEditValidatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.editValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditValidatorInterceptors() ?? []
    )
  }

  public func delegate(
    _ request: Cosmos_Staking_V1beta1_MsgDelegate,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgDelegateResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.delegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegateInterceptors() ?? []
    )
  }

  public func beginRedelegate(
    _ request: Cosmos_Staking_V1beta1_MsgBeginRedelegate,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.beginRedelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginRedelegateInterceptors() ?? []
    )
  }

  public func undelegate(
    _ request: Cosmos_Staking_V1beta1_MsgUndelegate,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgUndelegateResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.undelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUndelegateInterceptors() ?? []
    )
  }

  public func cancelUnbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.cancelUnbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelUnbondingDelegationInterceptors() ?? []
    )
  }

  public func updateParams(
    _ request: Cosmos_Staking_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Staking_V1beta1_MsgAsyncClient: Cosmos_Staking_V1beta1_MsgAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'createValidator'.
  func makeCreateValidatorInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'editValidator'.
  func makeEditValidatorInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'delegate'.
  func makeDelegateInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse>]

  /// - Returns: Interceptors to use when invoking 'beginRedelegate'.
  func makeBeginRedelegateInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse>]

  /// - Returns: Interceptors to use when invoking 'undelegate'.
  func makeUndelegateInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelUnbondingDelegation'.
  func makeCancelUnbondingDelegationInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse>]
}

public enum Cosmos_Staking_V1beta1_MsgClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "cosmos.staking.v1beta1.Msg",
    methods: [
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.createValidator,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.editValidator,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.delegate,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.beginRedelegate,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.undelegate,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.cancelUnbondingDelegation,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.updateParams,
    ]
  )

  public enum Methods {
    public static let createValidator = GRPCMethodDescriptor(
      name: "CreateValidator",
      path: "/cosmos.staking.v1beta1.Msg/CreateValidator",
      type: GRPCCallType.unary
    )

    public static let editValidator = GRPCMethodDescriptor(
      name: "EditValidator",
      path: "/cosmos.staking.v1beta1.Msg/EditValidator",
      type: GRPCCallType.unary
    )

    public static let delegate = GRPCMethodDescriptor(
      name: "Delegate",
      path: "/cosmos.staking.v1beta1.Msg/Delegate",
      type: GRPCCallType.unary
    )

    public static let beginRedelegate = GRPCMethodDescriptor(
      name: "BeginRedelegate",
      path: "/cosmos.staking.v1beta1.Msg/BeginRedelegate",
      type: GRPCCallType.unary
    )

    public static let undelegate = GRPCMethodDescriptor(
      name: "Undelegate",
      path: "/cosmos.staking.v1beta1.Msg/Undelegate",
      type: GRPCCallType.unary
    )

    public static let cancelUnbondingDelegation = GRPCMethodDescriptor(
      name: "CancelUnbondingDelegation",
      path: "/cosmos.staking.v1beta1.Msg/CancelUnbondingDelegation",
      type: GRPCCallType.unary
    )

    public static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/cosmos.staking.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Staking_V1beta1_MsgTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Staking_V1beta1_MsgTestClient: Cosmos_Staking_V1beta1_MsgClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the CreateValidator RPC. This must be called
  /// before calling 'createValidator'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCreateValidatorResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgCreateValidator>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.createValidator.path, requestHandler: requestHandler)
  }

  public func enqueueCreateValidatorResponse(
    _ response: Cosmos_Staking_V1beta1_MsgCreateValidatorResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgCreateValidator>) -> () = { _ in }
  ) {
    let stream = self.makeCreateValidatorResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateValidator'
  public var hasCreateValidatorResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.createValidator.path)
  }

  /// Make a unary response for the EditValidator RPC. This must be called
  /// before calling 'editValidator'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeEditValidatorResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgEditValidator>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.editValidator.path, requestHandler: requestHandler)
  }

  public func enqueueEditValidatorResponse(
    _ response: Cosmos_Staking_V1beta1_MsgEditValidatorResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgEditValidator>) -> () = { _ in }
  ) {
    let stream = self.makeEditValidatorResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'EditValidator'
  public var hasEditValidatorResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.editValidator.path)
  }

  /// Make a unary response for the Delegate RPC. This must be called
  /// before calling 'delegate'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDelegateResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgDelegate>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.delegate.path, requestHandler: requestHandler)
  }

  public func enqueueDelegateResponse(
    _ response: Cosmos_Staking_V1beta1_MsgDelegateResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgDelegate>) -> () = { _ in }
  ) {
    let stream = self.makeDelegateResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Delegate'
  public var hasDelegateResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.delegate.path)
  }

  /// Make a unary response for the BeginRedelegate RPC. This must be called
  /// before calling 'beginRedelegate'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeBeginRedelegateResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgBeginRedelegate>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.beginRedelegate.path, requestHandler: requestHandler)
  }

  public func enqueueBeginRedelegateResponse(
    _ response: Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgBeginRedelegate>) -> () = { _ in }
  ) {
    let stream = self.makeBeginRedelegateResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'BeginRedelegate'
  public var hasBeginRedelegateResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.beginRedelegate.path)
  }

  /// Make a unary response for the Undelegate RPC. This must be called
  /// before calling 'undelegate'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUndelegateResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgUndelegate>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.undelegate.path, requestHandler: requestHandler)
  }

  public func enqueueUndelegateResponse(
    _ response: Cosmos_Staking_V1beta1_MsgUndelegateResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgUndelegate>) -> () = { _ in }
  ) {
    let stream = self.makeUndelegateResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Undelegate'
  public var hasUndelegateResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.undelegate.path)
  }

  /// Make a unary response for the CancelUnbondingDelegation RPC. This must be called
  /// before calling 'cancelUnbondingDelegation'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCancelUnbondingDelegationResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.cancelUnbondingDelegation.path, requestHandler: requestHandler)
  }

  public func enqueueCancelUnbondingDelegationResponse(
    _ response: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation>) -> () = { _ in }
  ) {
    let stream = self.makeCancelUnbondingDelegationResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CancelUnbondingDelegation'
  public var hasCancelUnbondingDelegationResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.cancelUnbondingDelegation.path)
  }

  /// Make a unary response for the UpdateParams RPC. This must be called
  /// before calling 'updateParams'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpdateParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgUpdateParams>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.updateParams.path, requestHandler: requestHandler)
  }

  public func enqueueUpdateParamsResponse(
    _ response: Cosmos_Staking_V1beta1_MsgUpdateParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_MsgUpdateParams>) -> () = { _ in }
  ) {
    let stream = self.makeUpdateParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateParams'
  public var hasUpdateParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.updateParams.path)
  }
}

