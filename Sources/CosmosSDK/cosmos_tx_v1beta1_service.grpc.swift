//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/tx/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service defines a gRPC service for interacting with transactions.
///
/// Usage: instantiate `Cosmos_Tx_V1beta1_ServiceClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Tx_V1beta1_ServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? { get }

  func simulate(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse>

  func getTx(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse>

  func broadcastTx(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse>

  func getTxsEvent(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse>

  func getBlockWithTxs(
    _ request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse>
}

extension Cosmos_Tx_V1beta1_ServiceClientProtocol {
  public var serviceName: String {
    return "cosmos.tx.v1beta1.Service"
  }

  /// Simulate simulates executing a transaction for estimating gas usage.
  ///
  /// - Parameters:
  ///   - request: Request to send to Simulate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func simulate(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.simulate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSimulateInterceptors() ?? []
    )
  }

  /// GetTx fetches a tx by hash.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTx(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxInterceptors() ?? []
    )
  }

  /// BroadcastTx broadcast transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to BroadcastTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func broadcastTx(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.broadcastTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastTxInterceptors() ?? []
    )
  }

  /// GetTxsEvent fetches txs by event.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTxsEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTxsEvent(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTxsEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxsEventInterceptors() ?? []
    )
  }

  /// GetBlockWithTxs fetches a block with decoded txs.
  ///
  /// Since: cosmos-sdk 0.45.2
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockWithTxs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBlockWithTxs(
    _ request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getBlockWithTxs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockWithTxsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Tx_V1beta1_ServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Tx_V1beta1_ServiceNIOClient")
public final class Cosmos_Tx_V1beta1_ServiceClient: Cosmos_Tx_V1beta1_ServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.tx.v1beta1.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Tx_V1beta1_ServiceNIOClient: Cosmos_Tx_V1beta1_ServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.tx.v1beta1.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Service defines a gRPC service for interacting with transactions.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Tx_V1beta1_ServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? { get }

  func makeSimulateCall(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse>

  func makeGetTxCall(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse>

  func makeBroadcastTxCall(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse>

  func makeGetTxsEventCall(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse>

  func makeGetBlockWithTxsCall(
    _ request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Tx_V1beta1_ServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Tx_V1beta1_ServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeSimulateCall(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.simulate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSimulateInterceptors() ?? []
    )
  }

  public func makeGetTxCall(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxInterceptors() ?? []
    )
  }

  public func makeBroadcastTxCall(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.broadcastTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastTxInterceptors() ?? []
    )
  }

  public func makeGetTxsEventCall(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTxsEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxsEventInterceptors() ?? []
    )
  }

  public func makeGetBlockWithTxsCall(
    _ request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getBlockWithTxs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockWithTxsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Tx_V1beta1_ServiceAsyncClientProtocol {
  public func simulate(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_SimulateResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.simulate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSimulateInterceptors() ?? []
    )
  }

  public func getTx(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_GetTxResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxInterceptors() ?? []
    )
  }

  public func broadcastTx(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_BroadcastTxResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.broadcastTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastTxInterceptors() ?? []
    )
  }

  public func getTxsEvent(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_GetTxsEventResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTxsEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxsEventInterceptors() ?? []
    )
  }

  public func getBlockWithTxs(
    _ request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_GetBlockWithTxsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getBlockWithTxs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockWithTxsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Tx_V1beta1_ServiceAsyncClient: Cosmos_Tx_V1beta1_ServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'simulate'.
  func makeSimulateInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse>]

  /// - Returns: Interceptors to use when invoking 'getTx'.
  func makeGetTxInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse>]

  /// - Returns: Interceptors to use when invoking 'broadcastTx'.
  func makeBroadcastTxInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse>]

  /// - Returns: Interceptors to use when invoking 'getTxsEvent'.
  func makeGetTxsEventInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse>]

  /// - Returns: Interceptors to use when invoking 'getBlockWithTxs'.
  func makeGetBlockWithTxsInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse>]
}

public enum Cosmos_Tx_V1beta1_ServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Service",
    fullName: "cosmos.tx.v1beta1.Service",
    methods: [
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.simulate,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTx,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.broadcastTx,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTxsEvent,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getBlockWithTxs,
    ]
  )

  public enum Methods {
    public static let simulate = GRPCMethodDescriptor(
      name: "Simulate",
      path: "/cosmos.tx.v1beta1.Service/Simulate",
      type: GRPCCallType.unary
    )

    public static let getTx = GRPCMethodDescriptor(
      name: "GetTx",
      path: "/cosmos.tx.v1beta1.Service/GetTx",
      type: GRPCCallType.unary
    )

    public static let broadcastTx = GRPCMethodDescriptor(
      name: "BroadcastTx",
      path: "/cosmos.tx.v1beta1.Service/BroadcastTx",
      type: GRPCCallType.unary
    )

    public static let getTxsEvent = GRPCMethodDescriptor(
      name: "GetTxsEvent",
      path: "/cosmos.tx.v1beta1.Service/GetTxsEvent",
      type: GRPCCallType.unary
    )

    public static let getBlockWithTxs = GRPCMethodDescriptor(
      name: "GetBlockWithTxs",
      path: "/cosmos.tx.v1beta1.Service/GetBlockWithTxs",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Tx_V1beta1_ServiceTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Tx_V1beta1_ServiceTestClient: Cosmos_Tx_V1beta1_ServiceClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Simulate RPC. This must be called
  /// before calling 'simulate'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSimulateResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Tx_V1beta1_SimulateRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.simulate.path, requestHandler: requestHandler)
  }

  public func enqueueSimulateResponse(
    _ response: Cosmos_Tx_V1beta1_SimulateResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Tx_V1beta1_SimulateRequest>) -> () = { _ in }
  ) {
    let stream = self.makeSimulateResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Simulate'
  public var hasSimulateResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.simulate.path)
  }

  /// Make a unary response for the GetTx RPC. This must be called
  /// before calling 'getTx'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGetTxResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Tx_V1beta1_GetTxRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTx.path, requestHandler: requestHandler)
  }

  public func enqueueGetTxResponse(
    _ response: Cosmos_Tx_V1beta1_GetTxResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Tx_V1beta1_GetTxRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGetTxResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetTx'
  public var hasGetTxResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTx.path)
  }

  /// Make a unary response for the BroadcastTx RPC. This must be called
  /// before calling 'broadcastTx'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeBroadcastTxResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Tx_V1beta1_BroadcastTxRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.broadcastTx.path, requestHandler: requestHandler)
  }

  public func enqueueBroadcastTxResponse(
    _ response: Cosmos_Tx_V1beta1_BroadcastTxResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Tx_V1beta1_BroadcastTxRequest>) -> () = { _ in }
  ) {
    let stream = self.makeBroadcastTxResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'BroadcastTx'
  public var hasBroadcastTxResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.broadcastTx.path)
  }

  /// Make a unary response for the GetTxsEvent RPC. This must be called
  /// before calling 'getTxsEvent'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGetTxsEventResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Tx_V1beta1_GetTxsEventRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTxsEvent.path, requestHandler: requestHandler)
  }

  public func enqueueGetTxsEventResponse(
    _ response: Cosmos_Tx_V1beta1_GetTxsEventResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Tx_V1beta1_GetTxsEventRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGetTxsEventResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetTxsEvent'
  public var hasGetTxsEventResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTxsEvent.path)
  }

  /// Make a unary response for the GetBlockWithTxs RPC. This must be called
  /// before calling 'getBlockWithTxs'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGetBlockWithTxsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getBlockWithTxs.path, requestHandler: requestHandler)
  }

  public func enqueueGetBlockWithTxsResponse(
    _ response: Cosmos_Tx_V1beta1_GetBlockWithTxsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGetBlockWithTxsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetBlockWithTxs'
  public var hasGetBlockWithTxsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getBlockWithTxs.path)
  }
}

