// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/gov/v1/gov.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Since: cosmos-sdk 0.46

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// VoteOption enumerates the valid vote options for a given governance proposal.
public enum Cosmos_Gov_V1_VoteOption: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
  case unspecified // = 0

  /// VOTE_OPTION_YES defines a yes vote option.
  case yes // = 1

  /// VOTE_OPTION_ABSTAIN defines an abstain vote option.
  case abstain // = 2

  /// VOTE_OPTION_NO defines a no vote option.
  case no // = 3

  /// VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
  case noWithVeto // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .yes
    case 2: self = .abstain
    case 3: self = .no
    case 4: self = .noWithVeto
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .yes: return 1
    case .abstain: return 2
    case .no: return 3
    case .noWithVeto: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cosmos_Gov_V1_VoteOption: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cosmos_Gov_V1_VoteOption] = [
    .unspecified,
    .yes,
    .abstain,
    .no,
    .noWithVeto,
  ]
}

#endif  // swift(>=4.2)

/// ProposalStatus enumerates the valid statuses of a proposal.
public enum Cosmos_Gov_V1_ProposalStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
  case unspecified // = 0

  /// PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
  /// period.
  case depositPeriod // = 1

  /// PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
  /// period.
  case votingPeriod // = 2

  /// PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
  /// passed.
  case passed // = 3

  /// PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
  /// been rejected.
  case rejected // = 4

  /// PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
  /// failed.
  case failed // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .depositPeriod
    case 2: self = .votingPeriod
    case 3: self = .passed
    case 4: self = .rejected
    case 5: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .depositPeriod: return 1
    case .votingPeriod: return 2
    case .passed: return 3
    case .rejected: return 4
    case .failed: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cosmos_Gov_V1_ProposalStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cosmos_Gov_V1_ProposalStatus] = [
    .unspecified,
    .depositPeriod,
    .votingPeriod,
    .passed,
    .rejected,
    .failed,
  ]
}

#endif  // swift(>=4.2)

/// WeightedVoteOption defines a unit of vote for vote split.
public struct Cosmos_Gov_V1_WeightedVoteOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var option: Cosmos_Gov_V1_VoteOption = .unspecified

  public var weight: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Deposit defines an amount deposited by an account address to an active
/// proposal.
public struct Cosmos_Gov_V1_Deposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var proposalID: UInt64 = 0

  public var depositor: String = String()

  public var amount: [Cosmos_Base_V1beta1_Coin] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Proposal defines the core field members of a governance proposal.
public struct Cosmos_Gov_V1_Proposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var messages: [SwiftProtobuf.Google_Protobuf_Any] {
    get {return _storage._messages}
    set {_uniqueStorage()._messages = newValue}
  }

  public var status: Cosmos_Gov_V1_ProposalStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// final_tally_result is the final tally result of the proposal. When
  /// querying a proposal via gRPC, this field is not populated until the
  /// proposal's voting period has ended.
  public var finalTallyResult: Cosmos_Gov_V1_TallyResult {
    get {return _storage._finalTallyResult ?? Cosmos_Gov_V1_TallyResult()}
    set {_uniqueStorage()._finalTallyResult = newValue}
  }
  /// Returns true if `finalTallyResult` has been explicitly set.
  public var hasFinalTallyResult: Bool {return _storage._finalTallyResult != nil}
  /// Clears the value of `finalTallyResult`. Subsequent reads from it will return its default value.
  public mutating func clearFinalTallyResult() {_uniqueStorage()._finalTallyResult = nil}

  public var submitTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._submitTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._submitTime = newValue}
  }
  /// Returns true if `submitTime` has been explicitly set.
  public var hasSubmitTime: Bool {return _storage._submitTime != nil}
  /// Clears the value of `submitTime`. Subsequent reads from it will return its default value.
  public mutating func clearSubmitTime() {_uniqueStorage()._submitTime = nil}

  public var depositEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._depositEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._depositEndTime = newValue}
  }
  /// Returns true if `depositEndTime` has been explicitly set.
  public var hasDepositEndTime: Bool {return _storage._depositEndTime != nil}
  /// Clears the value of `depositEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearDepositEndTime() {_uniqueStorage()._depositEndTime = nil}

  public var totalDeposit: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._totalDeposit}
    set {_uniqueStorage()._totalDeposit = newValue}
  }

  public var votingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._votingStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._votingStartTime = newValue}
  }
  /// Returns true if `votingStartTime` has been explicitly set.
  public var hasVotingStartTime: Bool {return _storage._votingStartTime != nil}
  /// Clears the value of `votingStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearVotingStartTime() {_uniqueStorage()._votingStartTime = nil}

  public var votingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._votingEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._votingEndTime = newValue}
  }
  /// Returns true if `votingEndTime` has been explicitly set.
  public var hasVotingEndTime: Bool {return _storage._votingEndTime != nil}
  /// Clears the value of `votingEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearVotingEndTime() {_uniqueStorage()._votingEndTime = nil}

  /// metadata is any arbitrary metadata attached to the proposal.
  public var metadata: String {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// TallyResult defines a standard tally for a governance proposal.
public struct Cosmos_Gov_V1_TallyResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var yesCount: String = String()

  public var abstainCount: String = String()

  public var noCount: String = String()

  public var noWithVetoCount: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Vote defines a vote on a governance proposal.
/// A Vote consists of a proposal ID, the voter, and the vote option.
public struct Cosmos_Gov_V1_Vote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var proposalID: UInt64 = 0

  public var voter: String = String()

  public var options: [Cosmos_Gov_V1_WeightedVoteOption] = []

  /// metadata is any  arbitrary metadata to attached to the vote.
  public var metadata: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// DepositParams defines the params for deposits on governance proposals.
public struct Cosmos_Gov_V1_DepositParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///  Minimum deposit for a proposal to enter voting period.
  public var minDeposit: [Cosmos_Base_V1beta1_Coin] = []

  ///  Maximum period for Atom holders to deposit on a proposal. Initial value: 2
  ///  months.
  public var maxDepositPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _maxDepositPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_maxDepositPeriod = newValue}
  }
  /// Returns true if `maxDepositPeriod` has been explicitly set.
  public var hasMaxDepositPeriod: Bool {return self._maxDepositPeriod != nil}
  /// Clears the value of `maxDepositPeriod`. Subsequent reads from it will return its default value.
  public mutating func clearMaxDepositPeriod() {self._maxDepositPeriod = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _maxDepositPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// VotingParams defines the params for voting on governance proposals.
public struct Cosmos_Gov_V1_VotingParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///  Length of the voting period.
  public var votingPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _votingPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_votingPeriod = newValue}
  }
  /// Returns true if `votingPeriod` has been explicitly set.
  public var hasVotingPeriod: Bool {return self._votingPeriod != nil}
  /// Clears the value of `votingPeriod`. Subsequent reads from it will return its default value.
  public mutating func clearVotingPeriod() {self._votingPeriod = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _votingPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// TallyParams defines the params for tallying votes on governance proposals.
public struct Cosmos_Gov_V1_TallyParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///  Minimum percentage of total stake needed to vote for a result to be
  ///  considered valid.
  public var quorum: String = String()

  ///  Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
  public var threshold: String = String()

  ///  Minimum value of Veto votes to Total votes ratio for proposal to be
  ///  vetoed. Default value: 1/3.
  public var vetoThreshold: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cosmos_Gov_V1_VoteOption: @unchecked Sendable {}
extension Cosmos_Gov_V1_ProposalStatus: @unchecked Sendable {}
extension Cosmos_Gov_V1_WeightedVoteOption: @unchecked Sendable {}
extension Cosmos_Gov_V1_Deposit: @unchecked Sendable {}
extension Cosmos_Gov_V1_Proposal: @unchecked Sendable {}
extension Cosmos_Gov_V1_TallyResult: @unchecked Sendable {}
extension Cosmos_Gov_V1_Vote: @unchecked Sendable {}
extension Cosmos_Gov_V1_DepositParams: @unchecked Sendable {}
extension Cosmos_Gov_V1_VotingParams: @unchecked Sendable {}
extension Cosmos_Gov_V1_TallyParams: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.gov.v1"

extension Cosmos_Gov_V1_VoteOption: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VOTE_OPTION_UNSPECIFIED"),
    1: .same(proto: "VOTE_OPTION_YES"),
    2: .same(proto: "VOTE_OPTION_ABSTAIN"),
    3: .same(proto: "VOTE_OPTION_NO"),
    4: .same(proto: "VOTE_OPTION_NO_WITH_VETO"),
  ]
}

extension Cosmos_Gov_V1_ProposalStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROPOSAL_STATUS_UNSPECIFIED"),
    1: .same(proto: "PROPOSAL_STATUS_DEPOSIT_PERIOD"),
    2: .same(proto: "PROPOSAL_STATUS_VOTING_PERIOD"),
    3: .same(proto: "PROPOSAL_STATUS_PASSED"),
    4: .same(proto: "PROPOSAL_STATUS_REJECTED"),
    5: .same(proto: "PROPOSAL_STATUS_FAILED"),
  ]
}

extension Cosmos_Gov_V1_WeightedVoteOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WeightedVoteOption"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "option"),
    2: .same(proto: "weight"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.option) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.weight) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.option != .unspecified {
      try visitor.visitSingularEnumField(value: self.option, fieldNumber: 1)
    }
    if !self.weight.isEmpty {
      try visitor.visitSingularStringField(value: self.weight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Gov_V1_WeightedVoteOption, rhs: Cosmos_Gov_V1_WeightedVoteOption) -> Bool {
    if lhs.option != rhs.option {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Gov_V1_Deposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Deposit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "proposal_id"),
    2: .same(proto: "depositor"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.proposalID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.proposalID != 0 {
      try visitor.visitSingularUInt64Field(value: self.proposalID, fieldNumber: 1)
    }
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Gov_V1_Deposit, rhs: Cosmos_Gov_V1_Deposit) -> Bool {
    if lhs.proposalID != rhs.proposalID {return false}
    if lhs.depositor != rhs.depositor {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Gov_V1_Proposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Proposal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "messages"),
    3: .same(proto: "status"),
    4: .standard(proto: "final_tally_result"),
    5: .standard(proto: "submit_time"),
    6: .standard(proto: "deposit_end_time"),
    7: .standard(proto: "total_deposit"),
    8: .standard(proto: "voting_start_time"),
    9: .standard(proto: "voting_end_time"),
    10: .same(proto: "metadata"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _messages: [SwiftProtobuf.Google_Protobuf_Any] = []
    var _status: Cosmos_Gov_V1_ProposalStatus = .unspecified
    var _finalTallyResult: Cosmos_Gov_V1_TallyResult? = nil
    var _submitTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _depositEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _totalDeposit: [Cosmos_Base_V1beta1_Coin] = []
    var _votingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _votingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _metadata: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _messages = source._messages
      _status = source._status
      _finalTallyResult = source._finalTallyResult
      _submitTime = source._submitTime
      _depositEndTime = source._depositEndTime
      _totalDeposit = source._totalDeposit
      _votingStartTime = source._votingStartTime
      _votingEndTime = source._votingEndTime
      _metadata = source._metadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._messages) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._finalTallyResult) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._submitTime) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._depositEndTime) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._totalDeposit) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._votingStartTime) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._votingEndTime) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._metadata) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._messages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._messages, fieldNumber: 2)
      }
      if _storage._status != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 3)
      }
      try { if let v = _storage._finalTallyResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._submitTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._depositEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._totalDeposit.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._totalDeposit, fieldNumber: 7)
      }
      try { if let v = _storage._votingStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._votingEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._metadata.isEmpty {
        try visitor.visitSingularStringField(value: _storage._metadata, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Gov_V1_Proposal, rhs: Cosmos_Gov_V1_Proposal) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._messages != rhs_storage._messages {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._finalTallyResult != rhs_storage._finalTallyResult {return false}
        if _storage._submitTime != rhs_storage._submitTime {return false}
        if _storage._depositEndTime != rhs_storage._depositEndTime {return false}
        if _storage._totalDeposit != rhs_storage._totalDeposit {return false}
        if _storage._votingStartTime != rhs_storage._votingStartTime {return false}
        if _storage._votingEndTime != rhs_storage._votingEndTime {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Gov_V1_TallyResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TallyResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "yes_count"),
    2: .standard(proto: "abstain_count"),
    3: .standard(proto: "no_count"),
    4: .standard(proto: "no_with_veto_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.yesCount) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.abstainCount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.noCount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.noWithVetoCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.yesCount.isEmpty {
      try visitor.visitSingularStringField(value: self.yesCount, fieldNumber: 1)
    }
    if !self.abstainCount.isEmpty {
      try visitor.visitSingularStringField(value: self.abstainCount, fieldNumber: 2)
    }
    if !self.noCount.isEmpty {
      try visitor.visitSingularStringField(value: self.noCount, fieldNumber: 3)
    }
    if !self.noWithVetoCount.isEmpty {
      try visitor.visitSingularStringField(value: self.noWithVetoCount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Gov_V1_TallyResult, rhs: Cosmos_Gov_V1_TallyResult) -> Bool {
    if lhs.yesCount != rhs.yesCount {return false}
    if lhs.abstainCount != rhs.abstainCount {return false}
    if lhs.noCount != rhs.noCount {return false}
    if lhs.noWithVetoCount != rhs.noWithVetoCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Gov_V1_Vote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Vote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "proposal_id"),
    2: .same(proto: "voter"),
    4: .same(proto: "options"),
    5: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.proposalID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.voter) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.options) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.proposalID != 0 {
      try visitor.visitSingularUInt64Field(value: self.proposalID, fieldNumber: 1)
    }
    if !self.voter.isEmpty {
      try visitor.visitSingularStringField(value: self.voter, fieldNumber: 2)
    }
    if !self.options.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.options, fieldNumber: 4)
    }
    if !self.metadata.isEmpty {
      try visitor.visitSingularStringField(value: self.metadata, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Gov_V1_Vote, rhs: Cosmos_Gov_V1_Vote) -> Bool {
    if lhs.proposalID != rhs.proposalID {return false}
    if lhs.voter != rhs.voter {return false}
    if lhs.options != rhs.options {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Gov_V1_DepositParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DepositParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_deposit"),
    2: .standard(proto: "max_deposit_period"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.minDeposit) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._maxDepositPeriod) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.minDeposit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.minDeposit, fieldNumber: 1)
    }
    try { if let v = self._maxDepositPeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Gov_V1_DepositParams, rhs: Cosmos_Gov_V1_DepositParams) -> Bool {
    if lhs.minDeposit != rhs.minDeposit {return false}
    if lhs._maxDepositPeriod != rhs._maxDepositPeriod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Gov_V1_VotingParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VotingParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "voting_period"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._votingPeriod) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._votingPeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Gov_V1_VotingParams, rhs: Cosmos_Gov_V1_VotingParams) -> Bool {
    if lhs._votingPeriod != rhs._votingPeriod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Gov_V1_TallyParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TallyParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "quorum"),
    2: .same(proto: "threshold"),
    3: .standard(proto: "veto_threshold"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.quorum) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.threshold) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.vetoThreshold) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.quorum.isEmpty {
      try visitor.visitSingularStringField(value: self.quorum, fieldNumber: 1)
    }
    if !self.threshold.isEmpty {
      try visitor.visitSingularStringField(value: self.threshold, fieldNumber: 2)
    }
    if !self.vetoThreshold.isEmpty {
      try visitor.visitSingularStringField(value: self.vetoThreshold, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Gov_V1_TallyParams, rhs: Cosmos_Gov_V1_TallyParams) -> Bool {
    if lhs.quorum != rhs.quorum {return false}
    if lhs.threshold != rhs.threshold {return false}
    if lhs.vetoThreshold != rhs.vetoThreshold {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
