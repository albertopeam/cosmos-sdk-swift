//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/circuit/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the crisis Msg service.
///
/// Usage: instantiate `Cosmos_Circuit_V1_MsgClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Circuit_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol? { get }

  func authorizeCircuitBreaker(
    _ request: Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker, Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse>

  func tripCircuitBreaker(
    _ request: Cosmos_Circuit_V1_MsgTripCircuitBreaker,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Circuit_V1_MsgTripCircuitBreaker, Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse>

  func resetCircuitBreaker(
    _ request: Cosmos_Circuit_V1_MsgResetCircuitBreaker,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Circuit_V1_MsgResetCircuitBreaker, Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse>
}

extension Cosmos_Circuit_V1_MsgClientProtocol {
  public var serviceName: String {
    return "cosmos.circuit.v1.Msg"
  }

  /// AuthorizeCircuitBreaker allows a super-admin to grant (or revoke) another
  /// account's circuit breaker permissions.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthorizeCircuitBreaker.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func authorizeCircuitBreaker(
    _ request: Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker, Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.authorizeCircuitBreaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthorizeCircuitBreakerInterceptors() ?? []
    )
  }

  /// TripCircuitBreaker pauses processing of Msg's in the state machine.
  ///
  /// - Parameters:
  ///   - request: Request to send to TripCircuitBreaker.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func tripCircuitBreaker(
    _ request: Cosmos_Circuit_V1_MsgTripCircuitBreaker,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Circuit_V1_MsgTripCircuitBreaker, Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.tripCircuitBreaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTripCircuitBreakerInterceptors() ?? []
    )
  }

  /// ResetCircuitBreaker resumes processing of Msg's in the state machine that
  /// have been been paused using TripCircuitBreaker.
  ///
  /// - Parameters:
  ///   - request: Request to send to ResetCircuitBreaker.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func resetCircuitBreaker(
    _ request: Cosmos_Circuit_V1_MsgResetCircuitBreaker,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Circuit_V1_MsgResetCircuitBreaker, Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.resetCircuitBreaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetCircuitBreakerInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Circuit_V1_MsgClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Circuit_V1_MsgNIOClient")
public final class Cosmos_Circuit_V1_MsgClient: Cosmos_Circuit_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.circuit.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Circuit_V1_MsgNIOClient: Cosmos_Circuit_V1_MsgClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.circuit.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Msg defines the crisis Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Circuit_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeAuthorizeCircuitBreakerCall(
    _ request: Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker, Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse>

  func makeTripCircuitBreakerCall(
    _ request: Cosmos_Circuit_V1_MsgTripCircuitBreaker,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_MsgTripCircuitBreaker, Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse>

  func makeResetCircuitBreakerCall(
    _ request: Cosmos_Circuit_V1_MsgResetCircuitBreaker,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_MsgResetCircuitBreaker, Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Circuit_V1_MsgAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Circuit_V1_MsgClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeAuthorizeCircuitBreakerCall(
    _ request: Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker, Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.authorizeCircuitBreaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthorizeCircuitBreakerInterceptors() ?? []
    )
  }

  public func makeTripCircuitBreakerCall(
    _ request: Cosmos_Circuit_V1_MsgTripCircuitBreaker,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_MsgTripCircuitBreaker, Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.tripCircuitBreaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTripCircuitBreakerInterceptors() ?? []
    )
  }

  public func makeResetCircuitBreakerCall(
    _ request: Cosmos_Circuit_V1_MsgResetCircuitBreaker,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_MsgResetCircuitBreaker, Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.resetCircuitBreaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetCircuitBreakerInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Circuit_V1_MsgAsyncClientProtocol {
  public func authorizeCircuitBreaker(
    _ request: Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.authorizeCircuitBreaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthorizeCircuitBreakerInterceptors() ?? []
    )
  }

  public func tripCircuitBreaker(
    _ request: Cosmos_Circuit_V1_MsgTripCircuitBreaker,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.tripCircuitBreaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTripCircuitBreakerInterceptors() ?? []
    )
  }

  public func resetCircuitBreaker(
    _ request: Cosmos_Circuit_V1_MsgResetCircuitBreaker,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.resetCircuitBreaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetCircuitBreakerInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Circuit_V1_MsgAsyncClient: Cosmos_Circuit_V1_MsgAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'authorizeCircuitBreaker'.
  func makeAuthorizeCircuitBreakerInterceptors() -> [ClientInterceptor<Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker, Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse>]

  /// - Returns: Interceptors to use when invoking 'tripCircuitBreaker'.
  func makeTripCircuitBreakerInterceptors() -> [ClientInterceptor<Cosmos_Circuit_V1_MsgTripCircuitBreaker, Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse>]

  /// - Returns: Interceptors to use when invoking 'resetCircuitBreaker'.
  func makeResetCircuitBreakerInterceptors() -> [ClientInterceptor<Cosmos_Circuit_V1_MsgResetCircuitBreaker, Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse>]
}

public enum Cosmos_Circuit_V1_MsgClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "cosmos.circuit.v1.Msg",
    methods: [
      Cosmos_Circuit_V1_MsgClientMetadata.Methods.authorizeCircuitBreaker,
      Cosmos_Circuit_V1_MsgClientMetadata.Methods.tripCircuitBreaker,
      Cosmos_Circuit_V1_MsgClientMetadata.Methods.resetCircuitBreaker,
    ]
  )

  public enum Methods {
    public static let authorizeCircuitBreaker = GRPCMethodDescriptor(
      name: "AuthorizeCircuitBreaker",
      path: "/cosmos.circuit.v1.Msg/AuthorizeCircuitBreaker",
      type: GRPCCallType.unary
    )

    public static let tripCircuitBreaker = GRPCMethodDescriptor(
      name: "TripCircuitBreaker",
      path: "/cosmos.circuit.v1.Msg/TripCircuitBreaker",
      type: GRPCCallType.unary
    )

    public static let resetCircuitBreaker = GRPCMethodDescriptor(
      name: "ResetCircuitBreaker",
      path: "/cosmos.circuit.v1.Msg/ResetCircuitBreaker",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Circuit_V1_MsgTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Circuit_V1_MsgTestClient: Cosmos_Circuit_V1_MsgClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Circuit_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the AuthorizeCircuitBreaker RPC. This must be called
  /// before calling 'authorizeCircuitBreaker'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAuthorizeCircuitBreakerResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker, Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.authorizeCircuitBreaker.path, requestHandler: requestHandler)
  }

  public func enqueueAuthorizeCircuitBreakerResponse(
    _ response: Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker>) -> () = { _ in }
  ) {
    let stream = self.makeAuthorizeCircuitBreakerResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AuthorizeCircuitBreaker'
  public var hasAuthorizeCircuitBreakerResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Circuit_V1_MsgClientMetadata.Methods.authorizeCircuitBreaker.path)
  }

  /// Make a unary response for the TripCircuitBreaker RPC. This must be called
  /// before calling 'tripCircuitBreaker'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeTripCircuitBreakerResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Circuit_V1_MsgTripCircuitBreaker>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Circuit_V1_MsgTripCircuitBreaker, Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.tripCircuitBreaker.path, requestHandler: requestHandler)
  }

  public func enqueueTripCircuitBreakerResponse(
    _ response: Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Circuit_V1_MsgTripCircuitBreaker>) -> () = { _ in }
  ) {
    let stream = self.makeTripCircuitBreakerResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TripCircuitBreaker'
  public var hasTripCircuitBreakerResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Circuit_V1_MsgClientMetadata.Methods.tripCircuitBreaker.path)
  }

  /// Make a unary response for the ResetCircuitBreaker RPC. This must be called
  /// before calling 'resetCircuitBreaker'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeResetCircuitBreakerResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Circuit_V1_MsgResetCircuitBreaker>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Circuit_V1_MsgResetCircuitBreaker, Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Circuit_V1_MsgClientMetadata.Methods.resetCircuitBreaker.path, requestHandler: requestHandler)
  }

  public func enqueueResetCircuitBreakerResponse(
    _ response: Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Circuit_V1_MsgResetCircuitBreaker>) -> () = { _ in }
  ) {
    let stream = self.makeResetCircuitBreakerResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ResetCircuitBreaker'
  public var hasResetCircuitBreakerResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Circuit_V1_MsgClientMetadata.Methods.resetCircuitBreaker.path)
  }
}

