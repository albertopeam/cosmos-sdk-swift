// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/slashing/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the slashing module's genesis state.
public struct Cosmos_Slashing_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params defines all the paramaters of related to deposit.
  public var params: Cosmos_Slashing_V1beta1_Params {
    get {return _params ?? Cosmos_Slashing_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {self._params = nil}

  /// signing_infos represents a map between validator addresses and their
  /// signing infos.
  public var signingInfos: [Cosmos_Slashing_V1beta1_SigningInfo] = []

  /// missed_blocks represents a map between validator addresses and their
  /// missed blocks.
  public var missedBlocks: [Cosmos_Slashing_V1beta1_ValidatorMissedBlocks] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _params: Cosmos_Slashing_V1beta1_Params? = nil
}

/// SigningInfo stores validator signing info of corresponding address.
public struct Cosmos_Slashing_V1beta1_SigningInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address is the validator address.
  public var address: String = String()

  /// validator_signing_info represents the signing info of this validator.
  public var validatorSigningInfo: Cosmos_Slashing_V1beta1_ValidatorSigningInfo {
    get {return _validatorSigningInfo ?? Cosmos_Slashing_V1beta1_ValidatorSigningInfo()}
    set {_validatorSigningInfo = newValue}
  }
  /// Returns true if `validatorSigningInfo` has been explicitly set.
  public var hasValidatorSigningInfo: Bool {return self._validatorSigningInfo != nil}
  /// Clears the value of `validatorSigningInfo`. Subsequent reads from it will return its default value.
  public mutating func clearValidatorSigningInfo() {self._validatorSigningInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _validatorSigningInfo: Cosmos_Slashing_V1beta1_ValidatorSigningInfo? = nil
}

/// ValidatorMissedBlocks contains array of missed blocks of corresponding
/// address.
public struct Cosmos_Slashing_V1beta1_ValidatorMissedBlocks {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address is the validator address.
  public var address: String = String()

  /// missed_blocks is an array of missed blocks by the validator.
  public var missedBlocks: [Cosmos_Slashing_V1beta1_MissedBlock] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// MissedBlock contains height and missed status as boolean.
public struct Cosmos_Slashing_V1beta1_MissedBlock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// index is the height at which the block was missed.
  public var index: Int64 = 0

  /// missed is the missed status.
  public var missed: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cosmos_Slashing_V1beta1_GenesisState: @unchecked Sendable {}
extension Cosmos_Slashing_V1beta1_SigningInfo: @unchecked Sendable {}
extension Cosmos_Slashing_V1beta1_ValidatorMissedBlocks: @unchecked Sendable {}
extension Cosmos_Slashing_V1beta1_MissedBlock: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.slashing.v1beta1"

extension Cosmos_Slashing_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenesisState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "signing_infos"),
    3: .standard(proto: "missed_blocks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.signingInfos) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.missedBlocks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.signingInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.signingInfos, fieldNumber: 2)
    }
    if !self.missedBlocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.missedBlocks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Slashing_V1beta1_GenesisState, rhs: Cosmos_Slashing_V1beta1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.signingInfos != rhs.signingInfos {return false}
    if lhs.missedBlocks != rhs.missedBlocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Slashing_V1beta1_SigningInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "validator_signing_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._validatorSigningInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try { if let v = self._validatorSigningInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Slashing_V1beta1_SigningInfo, rhs: Cosmos_Slashing_V1beta1_SigningInfo) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs._validatorSigningInfo != rhs._validatorSigningInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Slashing_V1beta1_ValidatorMissedBlocks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidatorMissedBlocks"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "missed_blocks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.missedBlocks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.missedBlocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.missedBlocks, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Slashing_V1beta1_ValidatorMissedBlocks, rhs: Cosmos_Slashing_V1beta1_ValidatorMissedBlocks) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.missedBlocks != rhs.missedBlocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Slashing_V1beta1_MissedBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MissedBlock"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "missed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.missed) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt64Field(value: self.index, fieldNumber: 1)
    }
    if self.missed != false {
      try visitor.visitSingularBoolField(value: self.missed, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Slashing_V1beta1_MissedBlock, rhs: Cosmos_Slashing_V1beta1_MissedBlock) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.missed != rhs.missed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
