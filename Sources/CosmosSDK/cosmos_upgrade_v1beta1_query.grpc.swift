//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/upgrade/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC upgrade querier service.
///
/// Usage: instantiate `Cosmos_Upgrade_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Upgrade_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func currentPlan(
    _ request: Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest, Cosmos_Upgrade_V1beta1_QueryCurrentPlanResponse>

  func appliedPlan(
    _ request: Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest, Cosmos_Upgrade_V1beta1_QueryAppliedPlanResponse>

  func upgradedConsensusState(
    _ request: Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest, Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateResponse>

  func moduleVersions(
    _ request: Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest, Cosmos_Upgrade_V1beta1_QueryModuleVersionsResponse>

  func authority(
    _ request: Cosmos_Upgrade_V1beta1_QueryAuthorityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Upgrade_V1beta1_QueryAuthorityRequest, Cosmos_Upgrade_V1beta1_QueryAuthorityResponse>
}

extension Cosmos_Upgrade_V1beta1_QueryClientProtocol {
  public var serviceName: String {
    return "cosmos.upgrade.v1beta1.Query"
  }

  /// CurrentPlan queries the current upgrade plan.
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrentPlan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func currentPlan(
    _ request: Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest, Cosmos_Upgrade_V1beta1_QueryCurrentPlanResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.currentPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentPlanInterceptors() ?? []
    )
  }

  /// AppliedPlan queries a previously applied upgrade plan by its name.
  ///
  /// - Parameters:
  ///   - request: Request to send to AppliedPlan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func appliedPlan(
    _ request: Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest, Cosmos_Upgrade_V1beta1_QueryAppliedPlanResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.appliedPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAppliedPlanInterceptors() ?? []
    )
  }

  /// UpgradedConsensusState queries the consensus state that will serve
  /// as a trusted kernel for the next version of this chain. It will only be
  /// stored at the last height of this chain.
  /// UpgradedConsensusState RPC not supported with legacy querier
  /// This rpc is deprecated now that IBC has its own replacement
  /// (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
  ///
  /// - Parameters:
  ///   - request: Request to send to UpgradedConsensusState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func upgradedConsensusState(
    _ request: Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest, Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.upgradedConsensusState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpgradedConsensusStateInterceptors() ?? []
    )
  }

  /// ModuleVersions queries the list of module versions from state.
  ///
  /// Since: cosmos-sdk 0.43
  ///
  /// - Parameters:
  ///   - request: Request to send to ModuleVersions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func moduleVersions(
    _ request: Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest, Cosmos_Upgrade_V1beta1_QueryModuleVersionsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.moduleVersions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleVersionsInterceptors() ?? []
    )
  }

  /// Returns the account with authority to conduct upgrades
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to Authority.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func authority(
    _ request: Cosmos_Upgrade_V1beta1_QueryAuthorityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Upgrade_V1beta1_QueryAuthorityRequest, Cosmos_Upgrade_V1beta1_QueryAuthorityResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.authority.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthorityInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Upgrade_V1beta1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Upgrade_V1beta1_QueryNIOClient")
public final class Cosmos_Upgrade_V1beta1_QueryClient: Cosmos_Upgrade_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.upgrade.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Upgrade_V1beta1_QueryNIOClient: Cosmos_Upgrade_V1beta1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.upgrade.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC upgrade querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Upgrade_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeCurrentPlanCall(
    _ request: Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest, Cosmos_Upgrade_V1beta1_QueryCurrentPlanResponse>

  func makeAppliedPlanCall(
    _ request: Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest, Cosmos_Upgrade_V1beta1_QueryAppliedPlanResponse>

  func makeUpgradedConsensusStateCall(
    _ request: Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest, Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateResponse>

  func makeModuleVersionsCall(
    _ request: Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest, Cosmos_Upgrade_V1beta1_QueryModuleVersionsResponse>

  func makeAuthorityCall(
    _ request: Cosmos_Upgrade_V1beta1_QueryAuthorityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Upgrade_V1beta1_QueryAuthorityRequest, Cosmos_Upgrade_V1beta1_QueryAuthorityResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Upgrade_V1beta1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Upgrade_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCurrentPlanCall(
    _ request: Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest, Cosmos_Upgrade_V1beta1_QueryCurrentPlanResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.currentPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentPlanInterceptors() ?? []
    )
  }

  public func makeAppliedPlanCall(
    _ request: Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest, Cosmos_Upgrade_V1beta1_QueryAppliedPlanResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.appliedPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAppliedPlanInterceptors() ?? []
    )
  }

  public func makeUpgradedConsensusStateCall(
    _ request: Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest, Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.upgradedConsensusState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpgradedConsensusStateInterceptors() ?? []
    )
  }

  public func makeModuleVersionsCall(
    _ request: Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest, Cosmos_Upgrade_V1beta1_QueryModuleVersionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.moduleVersions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleVersionsInterceptors() ?? []
    )
  }

  public func makeAuthorityCall(
    _ request: Cosmos_Upgrade_V1beta1_QueryAuthorityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Upgrade_V1beta1_QueryAuthorityRequest, Cosmos_Upgrade_V1beta1_QueryAuthorityResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.authority.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthorityInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Upgrade_V1beta1_QueryAsyncClientProtocol {
  public func currentPlan(
    _ request: Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Upgrade_V1beta1_QueryCurrentPlanResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.currentPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentPlanInterceptors() ?? []
    )
  }

  public func appliedPlan(
    _ request: Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Upgrade_V1beta1_QueryAppliedPlanResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.appliedPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAppliedPlanInterceptors() ?? []
    )
  }

  public func upgradedConsensusState(
    _ request: Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.upgradedConsensusState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpgradedConsensusStateInterceptors() ?? []
    )
  }

  public func moduleVersions(
    _ request: Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Upgrade_V1beta1_QueryModuleVersionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.moduleVersions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleVersionsInterceptors() ?? []
    )
  }

  public func authority(
    _ request: Cosmos_Upgrade_V1beta1_QueryAuthorityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Upgrade_V1beta1_QueryAuthorityResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.authority.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthorityInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Upgrade_V1beta1_QueryAsyncClient: Cosmos_Upgrade_V1beta1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'currentPlan'.
  func makeCurrentPlanInterceptors() -> [ClientInterceptor<Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest, Cosmos_Upgrade_V1beta1_QueryCurrentPlanResponse>]

  /// - Returns: Interceptors to use when invoking 'appliedPlan'.
  func makeAppliedPlanInterceptors() -> [ClientInterceptor<Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest, Cosmos_Upgrade_V1beta1_QueryAppliedPlanResponse>]

  /// - Returns: Interceptors to use when invoking 'upgradedConsensusState'.
  func makeUpgradedConsensusStateInterceptors() -> [ClientInterceptor<Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest, Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateResponse>]

  /// - Returns: Interceptors to use when invoking 'moduleVersions'.
  func makeModuleVersionsInterceptors() -> [ClientInterceptor<Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest, Cosmos_Upgrade_V1beta1_QueryModuleVersionsResponse>]

  /// - Returns: Interceptors to use when invoking 'authority'.
  func makeAuthorityInterceptors() -> [ClientInterceptor<Cosmos_Upgrade_V1beta1_QueryAuthorityRequest, Cosmos_Upgrade_V1beta1_QueryAuthorityResponse>]
}

public enum Cosmos_Upgrade_V1beta1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.upgrade.v1beta1.Query",
    methods: [
      Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.currentPlan,
      Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.appliedPlan,
      Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.upgradedConsensusState,
      Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.moduleVersions,
      Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.authority,
    ]
  )

  public enum Methods {
    public static let currentPlan = GRPCMethodDescriptor(
      name: "CurrentPlan",
      path: "/cosmos.upgrade.v1beta1.Query/CurrentPlan",
      type: GRPCCallType.unary
    )

    public static let appliedPlan = GRPCMethodDescriptor(
      name: "AppliedPlan",
      path: "/cosmos.upgrade.v1beta1.Query/AppliedPlan",
      type: GRPCCallType.unary
    )

    public static let upgradedConsensusState = GRPCMethodDescriptor(
      name: "UpgradedConsensusState",
      path: "/cosmos.upgrade.v1beta1.Query/UpgradedConsensusState",
      type: GRPCCallType.unary
    )

    public static let moduleVersions = GRPCMethodDescriptor(
      name: "ModuleVersions",
      path: "/cosmos.upgrade.v1beta1.Query/ModuleVersions",
      type: GRPCCallType.unary
    )

    public static let authority = GRPCMethodDescriptor(
      name: "Authority",
      path: "/cosmos.upgrade.v1beta1.Query/Authority",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Upgrade_V1beta1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Upgrade_V1beta1_QueryTestClient: Cosmos_Upgrade_V1beta1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Upgrade_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the CurrentPlan RPC. This must be called
  /// before calling 'currentPlan'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCurrentPlanResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest, Cosmos_Upgrade_V1beta1_QueryCurrentPlanResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.currentPlan.path, requestHandler: requestHandler)
  }

  public func enqueueCurrentPlanResponse(
    _ response: Cosmos_Upgrade_V1beta1_QueryCurrentPlanResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Upgrade_V1beta1_QueryCurrentPlanRequest>) -> () = { _ in }
  ) {
    let stream = self.makeCurrentPlanResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CurrentPlan'
  public var hasCurrentPlanResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.currentPlan.path)
  }

  /// Make a unary response for the AppliedPlan RPC. This must be called
  /// before calling 'appliedPlan'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAppliedPlanResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest, Cosmos_Upgrade_V1beta1_QueryAppliedPlanResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.appliedPlan.path, requestHandler: requestHandler)
  }

  public func enqueueAppliedPlanResponse(
    _ response: Cosmos_Upgrade_V1beta1_QueryAppliedPlanResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Upgrade_V1beta1_QueryAppliedPlanRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAppliedPlanResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AppliedPlan'
  public var hasAppliedPlanResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.appliedPlan.path)
  }

  /// Make a unary response for the UpgradedConsensusState RPC. This must be called
  /// before calling 'upgradedConsensusState'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpgradedConsensusStateResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest, Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.upgradedConsensusState.path, requestHandler: requestHandler)
  }

  public func enqueueUpgradedConsensusStateResponse(
    _ response: Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Upgrade_V1beta1_QueryUpgradedConsensusStateRequest>) -> () = { _ in }
  ) {
    let stream = self.makeUpgradedConsensusStateResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpgradedConsensusState'
  public var hasUpgradedConsensusStateResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.upgradedConsensusState.path)
  }

  /// Make a unary response for the ModuleVersions RPC. This must be called
  /// before calling 'moduleVersions'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeModuleVersionsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest, Cosmos_Upgrade_V1beta1_QueryModuleVersionsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.moduleVersions.path, requestHandler: requestHandler)
  }

  public func enqueueModuleVersionsResponse(
    _ response: Cosmos_Upgrade_V1beta1_QueryModuleVersionsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Upgrade_V1beta1_QueryModuleVersionsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeModuleVersionsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ModuleVersions'
  public var hasModuleVersionsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.moduleVersions.path)
  }

  /// Make a unary response for the Authority RPC. This must be called
  /// before calling 'authority'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAuthorityResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Upgrade_V1beta1_QueryAuthorityRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Upgrade_V1beta1_QueryAuthorityRequest, Cosmos_Upgrade_V1beta1_QueryAuthorityResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.authority.path, requestHandler: requestHandler)
  }

  public func enqueueAuthorityResponse(
    _ response: Cosmos_Upgrade_V1beta1_QueryAuthorityResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Upgrade_V1beta1_QueryAuthorityRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAuthorityResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Authority'
  public var hasAuthorityResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Upgrade_V1beta1_QueryClientMetadata.Methods.authority.path)
  }
}

