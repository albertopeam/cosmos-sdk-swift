//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/staking/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Cosmos_Staking_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Staking_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func validators(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse>

  func validator(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse>

  func validatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse>

  func validatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse>

  func delegation(
    _ request: Cosmos_Staking_V1beta1_QueryDelegationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse>

  func unbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse>

  func delegatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse>

  func delegatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse>

  func redelegations(
    _ request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse>

  func delegatorValidators(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse>

  func delegatorValidator(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse>

  func historicalInfo(
    _ request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse>

  func pool(
    _ request: Cosmos_Staking_V1beta1_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse>

  func params(
    _ request: Cosmos_Staking_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse>
}

extension Cosmos_Staking_V1beta1_QueryClientProtocol {
  public var serviceName: String {
    return "cosmos.staking.v1beta1.Query"
  }

  /// Validators queries all validators that match the given status.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to Validators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validators(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorsInterceptors() ?? []
    )
  }

  /// Validator queries validator info for given validator address.
  ///
  /// - Parameters:
  ///   - request: Request to send to Validator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validator(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInterceptors() ?? []
    )
  }

  /// ValidatorDelegations queries delegate info for given validator.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorDelegationsInterceptors() ?? []
    )
  }

  /// ValidatorUnbondingDelegations queries unbonding delegations of a validator.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorUnbondingDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  /// Delegation queries delegate info for given validator delegator pair.
  ///
  /// - Parameters:
  ///   - request: Request to send to Delegation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delegation(
    _ request: Cosmos_Staking_V1beta1_QueryDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationInterceptors() ?? []
    )
  }

  /// UnbondingDelegation queries unbonding info for given validator delegator
  /// pair.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnbondingDelegation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func unbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.unbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondingDelegationInterceptors() ?? []
    )
  }

  /// DelegatorDelegations queries all delegations of a given delegator address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delegatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorDelegationsInterceptors() ?? []
    )
  }

  /// DelegatorUnbondingDelegations queries all unbonding delegations of a given
  /// delegator address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorUnbondingDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delegatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  /// Redelegations queries redelegations of given address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to Redelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func redelegations(
    _ request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.redelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedelegationsInterceptors() ?? []
    )
  }

  /// DelegatorValidators queries all validators info for given delegator
  /// address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorValidators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delegatorValidators(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorsInterceptors() ?? []
    )
  }

  /// DelegatorValidator queries validator info for given delegator validator
  /// pair.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delegatorValidator(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorInterceptors() ?? []
    )
  }

  /// HistoricalInfo queries the historical info for given height.
  ///
  /// - Parameters:
  ///   - request: Request to send to HistoricalInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func historicalInfo(
    _ request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.historicalInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalInfoInterceptors() ?? []
    )
  }

  /// Pool queries the pool info.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pool(
    _ request: Cosmos_Staking_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  /// Parameters queries the staking parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func params(
    _ request: Cosmos_Staking_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Staking_V1beta1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Staking_V1beta1_QueryNIOClient")
public final class Cosmos_Staking_V1beta1_QueryClient: Cosmos_Staking_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.staking.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Staking_V1beta1_QueryNIOClient: Cosmos_Staking_V1beta1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.staking.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Staking_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeValidatorsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse>

  func makeValidatorCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse>

  func makeValidatorDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse>

  func makeValidatorUnbondingDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse>

  func makeDelegationCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse>

  func makeUnbondingDelegationCall(
    _ request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse>

  func makeDelegatorDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse>

  func makeDelegatorUnbondingDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse>

  func makeRedelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse>

  func makeDelegatorValidatorsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse>

  func makeDelegatorValidatorCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse>

  func makeHistoricalInfoCall(
    _ request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse>

  func makePoolCall(
    _ request: Cosmos_Staking_V1beta1_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse>

  func makeParamsCall(
    _ request: Cosmos_Staking_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Staking_V1beta1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Staking_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeValidatorsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorsInterceptors() ?? []
    )
  }

  public func makeValidatorCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInterceptors() ?? []
    )
  }

  public func makeValidatorDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorDelegationsInterceptors() ?? []
    )
  }

  public func makeValidatorUnbondingDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  public func makeDelegationCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationInterceptors() ?? []
    )
  }

  public func makeUnbondingDelegationCall(
    _ request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.unbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondingDelegationInterceptors() ?? []
    )
  }

  public func makeDelegatorDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorDelegationsInterceptors() ?? []
    )
  }

  public func makeDelegatorUnbondingDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  public func makeRedelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.redelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedelegationsInterceptors() ?? []
    )
  }

  public func makeDelegatorValidatorsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorsInterceptors() ?? []
    )
  }

  public func makeDelegatorValidatorCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorInterceptors() ?? []
    )
  }

  public func makeHistoricalInfoCall(
    _ request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.historicalInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalInfoInterceptors() ?? []
    )
  }

  public func makePoolCall(
    _ request: Cosmos_Staking_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  public func makeParamsCall(
    _ request: Cosmos_Staking_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Staking_V1beta1_QueryAsyncClientProtocol {
  public func validators(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorsInterceptors() ?? []
    )
  }

  public func validator(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInterceptors() ?? []
    )
  }

  public func validatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorDelegationsInterceptors() ?? []
    )
  }

  public func validatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  public func delegation(
    _ request: Cosmos_Staking_V1beta1_QueryDelegationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegationResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationInterceptors() ?? []
    )
  }

  public func unbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.unbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondingDelegationInterceptors() ?? []
    )
  }

  public func delegatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorDelegationsInterceptors() ?? []
    )
  }

  public func delegatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  public func redelegations(
    _ request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryRedelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.redelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedelegationsInterceptors() ?? []
    )
  }

  public func delegatorValidators(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorsInterceptors() ?? []
    )
  }

  public func delegatorValidator(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorInterceptors() ?? []
    )
  }

  public func historicalInfo(
    _ request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.historicalInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalInfoInterceptors() ?? []
    )
  }

  public func pool(
    _ request: Cosmos_Staking_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  public func params(
    _ request: Cosmos_Staking_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Staking_V1beta1_QueryAsyncClient: Cosmos_Staking_V1beta1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'validators'.
  func makeValidatorsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'validator'.
  func makeValidatorInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorDelegations'.
  func makeValidatorDelegationsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorUnbondingDelegations'.
  func makeValidatorUnbondingDelegationsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegation'.
  func makeDelegationInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse>]

  /// - Returns: Interceptors to use when invoking 'unbondingDelegation'.
  func makeUnbondingDelegationInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorDelegations'.
  func makeDelegatorDelegationsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorUnbondingDelegations'.
  func makeDelegatorUnbondingDelegationsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'redelegations'.
  func makeRedelegationsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorValidators'.
  func makeDelegatorValidatorsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorValidator'.
  func makeDelegatorValidatorInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'historicalInfo'.
  func makeHistoricalInfoInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'pool'.
  func makePoolInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse>]
}

public enum Cosmos_Staking_V1beta1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.staking.v1beta1.Query",
    methods: [
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validators,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validator,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorDelegations,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorUnbondingDelegations,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegation,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.unbondingDelegation,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorDelegations,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorUnbondingDelegations,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.redelegations,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidators,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidator,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.historicalInfo,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.pool,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.params,
    ]
  )

  public enum Methods {
    public static let validators = GRPCMethodDescriptor(
      name: "Validators",
      path: "/cosmos.staking.v1beta1.Query/Validators",
      type: GRPCCallType.unary
    )

    public static let validator = GRPCMethodDescriptor(
      name: "Validator",
      path: "/cosmos.staking.v1beta1.Query/Validator",
      type: GRPCCallType.unary
    )

    public static let validatorDelegations = GRPCMethodDescriptor(
      name: "ValidatorDelegations",
      path: "/cosmos.staking.v1beta1.Query/ValidatorDelegations",
      type: GRPCCallType.unary
    )

    public static let validatorUnbondingDelegations = GRPCMethodDescriptor(
      name: "ValidatorUnbondingDelegations",
      path: "/cosmos.staking.v1beta1.Query/ValidatorUnbondingDelegations",
      type: GRPCCallType.unary
    )

    public static let delegation = GRPCMethodDescriptor(
      name: "Delegation",
      path: "/cosmos.staking.v1beta1.Query/Delegation",
      type: GRPCCallType.unary
    )

    public static let unbondingDelegation = GRPCMethodDescriptor(
      name: "UnbondingDelegation",
      path: "/cosmos.staking.v1beta1.Query/UnbondingDelegation",
      type: GRPCCallType.unary
    )

    public static let delegatorDelegations = GRPCMethodDescriptor(
      name: "DelegatorDelegations",
      path: "/cosmos.staking.v1beta1.Query/DelegatorDelegations",
      type: GRPCCallType.unary
    )

    public static let delegatorUnbondingDelegations = GRPCMethodDescriptor(
      name: "DelegatorUnbondingDelegations",
      path: "/cosmos.staking.v1beta1.Query/DelegatorUnbondingDelegations",
      type: GRPCCallType.unary
    )

    public static let redelegations = GRPCMethodDescriptor(
      name: "Redelegations",
      path: "/cosmos.staking.v1beta1.Query/Redelegations",
      type: GRPCCallType.unary
    )

    public static let delegatorValidators = GRPCMethodDescriptor(
      name: "DelegatorValidators",
      path: "/cosmos.staking.v1beta1.Query/DelegatorValidators",
      type: GRPCCallType.unary
    )

    public static let delegatorValidator = GRPCMethodDescriptor(
      name: "DelegatorValidator",
      path: "/cosmos.staking.v1beta1.Query/DelegatorValidator",
      type: GRPCCallType.unary
    )

    public static let historicalInfo = GRPCMethodDescriptor(
      name: "HistoricalInfo",
      path: "/cosmos.staking.v1beta1.Query/HistoricalInfo",
      type: GRPCCallType.unary
    )

    public static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/cosmos.staking.v1beta1.Query/Pool",
      type: GRPCCallType.unary
    )

    public static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/cosmos.staking.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Staking_V1beta1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Staking_V1beta1_QueryTestClient: Cosmos_Staking_V1beta1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Validators RPC. This must be called
  /// before calling 'validators'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeValidatorsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryValidatorsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validators.path, requestHandler: requestHandler)
  }

  public func enqueueValidatorsResponse(
    _ response: Cosmos_Staking_V1beta1_QueryValidatorsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryValidatorsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeValidatorsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Validators'
  public var hasValidatorsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validators.path)
  }

  /// Make a unary response for the Validator RPC. This must be called
  /// before calling 'validator'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeValidatorResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryValidatorRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validator.path, requestHandler: requestHandler)
  }

  public func enqueueValidatorResponse(
    _ response: Cosmos_Staking_V1beta1_QueryValidatorResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryValidatorRequest>) -> () = { _ in }
  ) {
    let stream = self.makeValidatorResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Validator'
  public var hasValidatorResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validator.path)
  }

  /// Make a unary response for the ValidatorDelegations RPC. This must be called
  /// before calling 'validatorDelegations'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeValidatorDelegationsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorDelegations.path, requestHandler: requestHandler)
  }

  public func enqueueValidatorDelegationsResponse(
    _ response: Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeValidatorDelegationsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ValidatorDelegations'
  public var hasValidatorDelegationsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorDelegations.path)
  }

  /// Make a unary response for the ValidatorUnbondingDelegations RPC. This must be called
  /// before calling 'validatorUnbondingDelegations'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeValidatorUnbondingDelegationsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorUnbondingDelegations.path, requestHandler: requestHandler)
  }

  public func enqueueValidatorUnbondingDelegationsResponse(
    _ response: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeValidatorUnbondingDelegationsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ValidatorUnbondingDelegations'
  public var hasValidatorUnbondingDelegationsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorUnbondingDelegations.path)
  }

  /// Make a unary response for the Delegation RPC. This must be called
  /// before calling 'delegation'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDelegationResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryDelegationRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegation.path, requestHandler: requestHandler)
  }

  public func enqueueDelegationResponse(
    _ response: Cosmos_Staking_V1beta1_QueryDelegationResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryDelegationRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDelegationResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Delegation'
  public var hasDelegationResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegation.path)
  }

  /// Make a unary response for the UnbondingDelegation RPC. This must be called
  /// before calling 'unbondingDelegation'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUnbondingDelegationResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.unbondingDelegation.path, requestHandler: requestHandler)
  }

  public func enqueueUnbondingDelegationResponse(
    _ response: Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest>) -> () = { _ in }
  ) {
    let stream = self.makeUnbondingDelegationResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UnbondingDelegation'
  public var hasUnbondingDelegationResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.unbondingDelegation.path)
  }

  /// Make a unary response for the DelegatorDelegations RPC. This must be called
  /// before calling 'delegatorDelegations'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDelegatorDelegationsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorDelegations.path, requestHandler: requestHandler)
  }

  public func enqueueDelegatorDelegationsResponse(
    _ response: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDelegatorDelegationsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DelegatorDelegations'
  public var hasDelegatorDelegationsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorDelegations.path)
  }

  /// Make a unary response for the DelegatorUnbondingDelegations RPC. This must be called
  /// before calling 'delegatorUnbondingDelegations'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDelegatorUnbondingDelegationsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorUnbondingDelegations.path, requestHandler: requestHandler)
  }

  public func enqueueDelegatorUnbondingDelegationsResponse(
    _ response: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDelegatorUnbondingDelegationsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DelegatorUnbondingDelegations'
  public var hasDelegatorUnbondingDelegationsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorUnbondingDelegations.path)
  }

  /// Make a unary response for the Redelegations RPC. This must be called
  /// before calling 'redelegations'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeRedelegationsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryRedelegationsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.redelegations.path, requestHandler: requestHandler)
  }

  public func enqueueRedelegationsResponse(
    _ response: Cosmos_Staking_V1beta1_QueryRedelegationsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryRedelegationsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeRedelegationsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Redelegations'
  public var hasRedelegationsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.redelegations.path)
  }

  /// Make a unary response for the DelegatorValidators RPC. This must be called
  /// before calling 'delegatorValidators'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDelegatorValidatorsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path, requestHandler: requestHandler)
  }

  public func enqueueDelegatorValidatorsResponse(
    _ response: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDelegatorValidatorsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DelegatorValidators'
  public var hasDelegatorValidatorsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path)
  }

  /// Make a unary response for the DelegatorValidator RPC. This must be called
  /// before calling 'delegatorValidator'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDelegatorValidatorResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidator.path, requestHandler: requestHandler)
  }

  public func enqueueDelegatorValidatorResponse(
    _ response: Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDelegatorValidatorResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DelegatorValidator'
  public var hasDelegatorValidatorResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidator.path)
  }

  /// Make a unary response for the HistoricalInfo RPC. This must be called
  /// before calling 'historicalInfo'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeHistoricalInfoResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.historicalInfo.path, requestHandler: requestHandler)
  }

  public func enqueueHistoricalInfoResponse(
    _ response: Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest>) -> () = { _ in }
  ) {
    let stream = self.makeHistoricalInfoResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'HistoricalInfo'
  public var hasHistoricalInfoResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.historicalInfo.path)
  }

  /// Make a unary response for the Pool RPC. This must be called
  /// before calling 'pool'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makePoolResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryPoolRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.pool.path, requestHandler: requestHandler)
  }

  public func enqueuePoolResponse(
    _ response: Cosmos_Staking_V1beta1_QueryPoolResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryPoolRequest>) -> () = { _ in }
  ) {
    let stream = self.makePoolResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Pool'
  public var hasPoolResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.pool.path)
  }

  /// Make a unary response for the Params RPC. This must be called
  /// before calling 'params'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryParamsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.params.path, requestHandler: requestHandler)
  }

  public func enqueueParamsResponse(
    _ response: Cosmos_Staking_V1beta1_QueryParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Staking_V1beta1_QueryParamsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Params'
  public var hasParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.params.path)
  }
}

