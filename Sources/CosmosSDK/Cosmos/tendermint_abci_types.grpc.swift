//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: tendermint/abci/types.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Tendermint_Abci_ABCIApplicationClient`, then call methods of this protocol to make API calls.
public protocol Tendermint_Abci_ABCIApplicationClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol? { get }

  func echo(
    _ request: Tendermint_Abci_RequestEcho,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestEcho, Tendermint_Abci_ResponseEcho>

  func flush(
    _ request: Tendermint_Abci_RequestFlush,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestFlush, Tendermint_Abci_ResponseFlush>

  func info(
    _ request: Tendermint_Abci_RequestInfo,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestInfo, Tendermint_Abci_ResponseInfo>

  func deliverTx(
    _ request: Tendermint_Abci_RequestDeliverTx,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestDeliverTx, Tendermint_Abci_ResponseDeliverTx>

  func checkTx(
    _ request: Tendermint_Abci_RequestCheckTx,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestCheckTx, Tendermint_Abci_ResponseCheckTx>

  func query(
    _ request: Tendermint_Abci_RequestQuery,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestQuery, Tendermint_Abci_ResponseQuery>

  func commit(
    _ request: Tendermint_Abci_RequestCommit,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestCommit, Tendermint_Abci_ResponseCommit>

  func initChain(
    _ request: Tendermint_Abci_RequestInitChain,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestInitChain, Tendermint_Abci_ResponseInitChain>

  func beginBlock(
    _ request: Tendermint_Abci_RequestBeginBlock,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestBeginBlock, Tendermint_Abci_ResponseBeginBlock>

  func endBlock(
    _ request: Tendermint_Abci_RequestEndBlock,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestEndBlock, Tendermint_Abci_ResponseEndBlock>

  func listSnapshots(
    _ request: Tendermint_Abci_RequestListSnapshots,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestListSnapshots, Tendermint_Abci_ResponseListSnapshots>

  func offerSnapshot(
    _ request: Tendermint_Abci_RequestOfferSnapshot,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestOfferSnapshot, Tendermint_Abci_ResponseOfferSnapshot>

  func loadSnapshotChunk(
    _ request: Tendermint_Abci_RequestLoadSnapshotChunk,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestLoadSnapshotChunk, Tendermint_Abci_ResponseLoadSnapshotChunk>

  func applySnapshotChunk(
    _ request: Tendermint_Abci_RequestApplySnapshotChunk,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestApplySnapshotChunk, Tendermint_Abci_ResponseApplySnapshotChunk>

  func prepareProposal(
    _ request: Tendermint_Abci_RequestPrepareProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestPrepareProposal, Tendermint_Abci_ResponsePrepareProposal>

  func processProposal(
    _ request: Tendermint_Abci_RequestProcessProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Abci_RequestProcessProposal, Tendermint_Abci_ResponseProcessProposal>
}

extension Tendermint_Abci_ABCIApplicationClientProtocol {
  public var serviceName: String {
    return "tendermint.abci.ABCIApplication"
  }

  /// Unary call to Echo
  ///
  /// - Parameters:
  ///   - request: Request to send to Echo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func echo(
    _ request: Tendermint_Abci_RequestEcho,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestEcho, Tendermint_Abci_ResponseEcho> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }

  /// Unary call to Flush
  ///
  /// - Parameters:
  ///   - request: Request to send to Flush.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func flush(
    _ request: Tendermint_Abci_RequestFlush,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestFlush, Tendermint_Abci_ResponseFlush> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.flush.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlushInterceptors() ?? []
    )
  }

  /// Unary call to Info
  ///
  /// - Parameters:
  ///   - request: Request to send to Info.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func info(
    _ request: Tendermint_Abci_RequestInfo,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestInfo, Tendermint_Abci_ResponseInfo> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  /// Unary call to DeliverTx
  ///
  /// - Parameters:
  ///   - request: Request to send to DeliverTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deliverTx(
    _ request: Tendermint_Abci_RequestDeliverTx,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestDeliverTx, Tendermint_Abci_ResponseDeliverTx> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.deliverTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeliverTxInterceptors() ?? []
    )
  }

  /// Unary call to CheckTx
  ///
  /// - Parameters:
  ///   - request: Request to send to CheckTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func checkTx(
    _ request: Tendermint_Abci_RequestCheckTx,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestCheckTx, Tendermint_Abci_ResponseCheckTx> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.checkTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckTxInterceptors() ?? []
    )
  }

  /// Unary call to Query
  ///
  /// - Parameters:
  ///   - request: Request to send to Query.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func query(
    _ request: Tendermint_Abci_RequestQuery,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestQuery, Tendermint_Abci_ResponseQuery> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.query.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryInterceptors() ?? []
    )
  }

  /// Unary call to Commit
  ///
  /// - Parameters:
  ///   - request: Request to send to Commit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func commit(
    _ request: Tendermint_Abci_RequestCommit,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestCommit, Tendermint_Abci_ResponseCommit> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.commit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommitInterceptors() ?? []
    )
  }

  /// Unary call to InitChain
  ///
  /// - Parameters:
  ///   - request: Request to send to InitChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func initChain(
    _ request: Tendermint_Abci_RequestInitChain,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestInitChain, Tendermint_Abci_ResponseInitChain> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.initChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitChainInterceptors() ?? []
    )
  }

  /// Unary call to BeginBlock
  ///
  /// - Parameters:
  ///   - request: Request to send to BeginBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func beginBlock(
    _ request: Tendermint_Abci_RequestBeginBlock,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestBeginBlock, Tendermint_Abci_ResponseBeginBlock> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.beginBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginBlockInterceptors() ?? []
    )
  }

  /// Unary call to EndBlock
  ///
  /// - Parameters:
  ///   - request: Request to send to EndBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func endBlock(
    _ request: Tendermint_Abci_RequestEndBlock,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestEndBlock, Tendermint_Abci_ResponseEndBlock> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.endBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEndBlockInterceptors() ?? []
    )
  }

  /// Unary call to ListSnapshots
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSnapshots.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listSnapshots(
    _ request: Tendermint_Abci_RequestListSnapshots,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestListSnapshots, Tendermint_Abci_ResponseListSnapshots> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.listSnapshots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSnapshotsInterceptors() ?? []
    )
  }

  /// Unary call to OfferSnapshot
  ///
  /// - Parameters:
  ///   - request: Request to send to OfferSnapshot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func offerSnapshot(
    _ request: Tendermint_Abci_RequestOfferSnapshot,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestOfferSnapshot, Tendermint_Abci_ResponseOfferSnapshot> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.offerSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOfferSnapshotInterceptors() ?? []
    )
  }

  /// Unary call to LoadSnapshotChunk
  ///
  /// - Parameters:
  ///   - request: Request to send to LoadSnapshotChunk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func loadSnapshotChunk(
    _ request: Tendermint_Abci_RequestLoadSnapshotChunk,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestLoadSnapshotChunk, Tendermint_Abci_ResponseLoadSnapshotChunk> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.loadSnapshotChunk.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoadSnapshotChunkInterceptors() ?? []
    )
  }

  /// Unary call to ApplySnapshotChunk
  ///
  /// - Parameters:
  ///   - request: Request to send to ApplySnapshotChunk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func applySnapshotChunk(
    _ request: Tendermint_Abci_RequestApplySnapshotChunk,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestApplySnapshotChunk, Tendermint_Abci_ResponseApplySnapshotChunk> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.applySnapshotChunk.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApplySnapshotChunkInterceptors() ?? []
    )
  }

  /// Unary call to PrepareProposal
  ///
  /// - Parameters:
  ///   - request: Request to send to PrepareProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func prepareProposal(
    _ request: Tendermint_Abci_RequestPrepareProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestPrepareProposal, Tendermint_Abci_ResponsePrepareProposal> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.prepareProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrepareProposalInterceptors() ?? []
    )
  }

  /// Unary call to ProcessProposal
  ///
  /// - Parameters:
  ///   - request: Request to send to ProcessProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func processProposal(
    _ request: Tendermint_Abci_RequestProcessProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Abci_RequestProcessProposal, Tendermint_Abci_ResponseProcessProposal> {
    return self.makeUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.processProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessProposalInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Tendermint_Abci_ABCIApplicationClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Tendermint_Abci_ABCIApplicationNIOClient")
public final class Tendermint_Abci_ABCIApplicationClient: Tendermint_Abci_ABCIApplicationClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the tendermint.abci.ABCIApplication service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Tendermint_Abci_ABCIApplicationNIOClient: Tendermint_Abci_ABCIApplicationClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol?

  /// Creates a client for the tendermint.abci.ABCIApplication service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Tendermint_Abci_ABCIApplicationAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol? { get }

  func makeEchoCall(
    _ request: Tendermint_Abci_RequestEcho,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestEcho, Tendermint_Abci_ResponseEcho>

  func makeFlushCall(
    _ request: Tendermint_Abci_RequestFlush,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestFlush, Tendermint_Abci_ResponseFlush>

  func makeInfoCall(
    _ request: Tendermint_Abci_RequestInfo,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestInfo, Tendermint_Abci_ResponseInfo>

  func makeDeliverTxCall(
    _ request: Tendermint_Abci_RequestDeliverTx,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestDeliverTx, Tendermint_Abci_ResponseDeliverTx>

  func makeCheckTxCall(
    _ request: Tendermint_Abci_RequestCheckTx,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestCheckTx, Tendermint_Abci_ResponseCheckTx>

  func makeQueryCall(
    _ request: Tendermint_Abci_RequestQuery,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestQuery, Tendermint_Abci_ResponseQuery>

  func makeCommitCall(
    _ request: Tendermint_Abci_RequestCommit,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestCommit, Tendermint_Abci_ResponseCommit>

  func makeInitChainCall(
    _ request: Tendermint_Abci_RequestInitChain,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestInitChain, Tendermint_Abci_ResponseInitChain>

  func makeBeginBlockCall(
    _ request: Tendermint_Abci_RequestBeginBlock,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestBeginBlock, Tendermint_Abci_ResponseBeginBlock>

  func makeEndBlockCall(
    _ request: Tendermint_Abci_RequestEndBlock,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestEndBlock, Tendermint_Abci_ResponseEndBlock>

  func makeListSnapshotsCall(
    _ request: Tendermint_Abci_RequestListSnapshots,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestListSnapshots, Tendermint_Abci_ResponseListSnapshots>

  func makeOfferSnapshotCall(
    _ request: Tendermint_Abci_RequestOfferSnapshot,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestOfferSnapshot, Tendermint_Abci_ResponseOfferSnapshot>

  func makeLoadSnapshotChunkCall(
    _ request: Tendermint_Abci_RequestLoadSnapshotChunk,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestLoadSnapshotChunk, Tendermint_Abci_ResponseLoadSnapshotChunk>

  func makeApplySnapshotChunkCall(
    _ request: Tendermint_Abci_RequestApplySnapshotChunk,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestApplySnapshotChunk, Tendermint_Abci_ResponseApplySnapshotChunk>

  func makePrepareProposalCall(
    _ request: Tendermint_Abci_RequestPrepareProposal,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestPrepareProposal, Tendermint_Abci_ResponsePrepareProposal>

  func makeProcessProposalCall(
    _ request: Tendermint_Abci_RequestProcessProposal,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestProcessProposal, Tendermint_Abci_ResponseProcessProposal>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Tendermint_Abci_ABCIApplicationAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Tendermint_Abci_ABCIApplicationClientMetadata.serviceDescriptor
  }

  public var interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeEchoCall(
    _ request: Tendermint_Abci_RequestEcho,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestEcho, Tendermint_Abci_ResponseEcho> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }

  public func makeFlushCall(
    _ request: Tendermint_Abci_RequestFlush,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestFlush, Tendermint_Abci_ResponseFlush> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.flush.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlushInterceptors() ?? []
    )
  }

  public func makeInfoCall(
    _ request: Tendermint_Abci_RequestInfo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestInfo, Tendermint_Abci_ResponseInfo> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  public func makeDeliverTxCall(
    _ request: Tendermint_Abci_RequestDeliverTx,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestDeliverTx, Tendermint_Abci_ResponseDeliverTx> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.deliverTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeliverTxInterceptors() ?? []
    )
  }

  public func makeCheckTxCall(
    _ request: Tendermint_Abci_RequestCheckTx,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestCheckTx, Tendermint_Abci_ResponseCheckTx> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.checkTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckTxInterceptors() ?? []
    )
  }

  public func makeQueryCall(
    _ request: Tendermint_Abci_RequestQuery,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestQuery, Tendermint_Abci_ResponseQuery> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.query.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryInterceptors() ?? []
    )
  }

  public func makeCommitCall(
    _ request: Tendermint_Abci_RequestCommit,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestCommit, Tendermint_Abci_ResponseCommit> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.commit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommitInterceptors() ?? []
    )
  }

  public func makeInitChainCall(
    _ request: Tendermint_Abci_RequestInitChain,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestInitChain, Tendermint_Abci_ResponseInitChain> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.initChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitChainInterceptors() ?? []
    )
  }

  public func makeBeginBlockCall(
    _ request: Tendermint_Abci_RequestBeginBlock,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestBeginBlock, Tendermint_Abci_ResponseBeginBlock> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.beginBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginBlockInterceptors() ?? []
    )
  }

  public func makeEndBlockCall(
    _ request: Tendermint_Abci_RequestEndBlock,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestEndBlock, Tendermint_Abci_ResponseEndBlock> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.endBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEndBlockInterceptors() ?? []
    )
  }

  public func makeListSnapshotsCall(
    _ request: Tendermint_Abci_RequestListSnapshots,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestListSnapshots, Tendermint_Abci_ResponseListSnapshots> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.listSnapshots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSnapshotsInterceptors() ?? []
    )
  }

  public func makeOfferSnapshotCall(
    _ request: Tendermint_Abci_RequestOfferSnapshot,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestOfferSnapshot, Tendermint_Abci_ResponseOfferSnapshot> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.offerSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOfferSnapshotInterceptors() ?? []
    )
  }

  public func makeLoadSnapshotChunkCall(
    _ request: Tendermint_Abci_RequestLoadSnapshotChunk,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestLoadSnapshotChunk, Tendermint_Abci_ResponseLoadSnapshotChunk> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.loadSnapshotChunk.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoadSnapshotChunkInterceptors() ?? []
    )
  }

  public func makeApplySnapshotChunkCall(
    _ request: Tendermint_Abci_RequestApplySnapshotChunk,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestApplySnapshotChunk, Tendermint_Abci_ResponseApplySnapshotChunk> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.applySnapshotChunk.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApplySnapshotChunkInterceptors() ?? []
    )
  }

  public func makePrepareProposalCall(
    _ request: Tendermint_Abci_RequestPrepareProposal,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestPrepareProposal, Tendermint_Abci_ResponsePrepareProposal> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.prepareProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrepareProposalInterceptors() ?? []
    )
  }

  public func makeProcessProposalCall(
    _ request: Tendermint_Abci_RequestProcessProposal,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tendermint_Abci_RequestProcessProposal, Tendermint_Abci_ResponseProcessProposal> {
    return self.makeAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.processProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessProposalInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Tendermint_Abci_ABCIApplicationAsyncClientProtocol {
  public func echo(
    _ request: Tendermint_Abci_RequestEcho,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseEcho {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }

  public func flush(
    _ request: Tendermint_Abci_RequestFlush,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseFlush {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.flush.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlushInterceptors() ?? []
    )
  }

  public func info(
    _ request: Tendermint_Abci_RequestInfo,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseInfo {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  public func deliverTx(
    _ request: Tendermint_Abci_RequestDeliverTx,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseDeliverTx {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.deliverTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeliverTxInterceptors() ?? []
    )
  }

  public func checkTx(
    _ request: Tendermint_Abci_RequestCheckTx,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseCheckTx {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.checkTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckTxInterceptors() ?? []
    )
  }

  public func query(
    _ request: Tendermint_Abci_RequestQuery,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseQuery {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.query.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryInterceptors() ?? []
    )
  }

  public func commit(
    _ request: Tendermint_Abci_RequestCommit,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseCommit {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.commit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommitInterceptors() ?? []
    )
  }

  public func initChain(
    _ request: Tendermint_Abci_RequestInitChain,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseInitChain {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.initChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitChainInterceptors() ?? []
    )
  }

  public func beginBlock(
    _ request: Tendermint_Abci_RequestBeginBlock,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseBeginBlock {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.beginBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginBlockInterceptors() ?? []
    )
  }

  public func endBlock(
    _ request: Tendermint_Abci_RequestEndBlock,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseEndBlock {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.endBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEndBlockInterceptors() ?? []
    )
  }

  public func listSnapshots(
    _ request: Tendermint_Abci_RequestListSnapshots,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseListSnapshots {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.listSnapshots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSnapshotsInterceptors() ?? []
    )
  }

  public func offerSnapshot(
    _ request: Tendermint_Abci_RequestOfferSnapshot,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseOfferSnapshot {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.offerSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOfferSnapshotInterceptors() ?? []
    )
  }

  public func loadSnapshotChunk(
    _ request: Tendermint_Abci_RequestLoadSnapshotChunk,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseLoadSnapshotChunk {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.loadSnapshotChunk.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoadSnapshotChunkInterceptors() ?? []
    )
  }

  public func applySnapshotChunk(
    _ request: Tendermint_Abci_RequestApplySnapshotChunk,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseApplySnapshotChunk {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.applySnapshotChunk.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApplySnapshotChunkInterceptors() ?? []
    )
  }

  public func prepareProposal(
    _ request: Tendermint_Abci_RequestPrepareProposal,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponsePrepareProposal {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.prepareProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrepareProposalInterceptors() ?? []
    )
  }

  public func processProposal(
    _ request: Tendermint_Abci_RequestProcessProposal,
    callOptions: CallOptions? = nil
  ) async throws -> Tendermint_Abci_ResponseProcessProposal {
    return try await self.performAsyncUnaryCall(
      path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.processProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessProposalInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Tendermint_Abci_ABCIApplicationAsyncClient: Tendermint_Abci_ABCIApplicationAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'echo'.
  func makeEchoInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestEcho, Tendermint_Abci_ResponseEcho>]

  /// - Returns: Interceptors to use when invoking 'flush'.
  func makeFlushInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestFlush, Tendermint_Abci_ResponseFlush>]

  /// - Returns: Interceptors to use when invoking 'info'.
  func makeInfoInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestInfo, Tendermint_Abci_ResponseInfo>]

  /// - Returns: Interceptors to use when invoking 'deliverTx'.
  func makeDeliverTxInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestDeliverTx, Tendermint_Abci_ResponseDeliverTx>]

  /// - Returns: Interceptors to use when invoking 'checkTx'.
  func makeCheckTxInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestCheckTx, Tendermint_Abci_ResponseCheckTx>]

  /// - Returns: Interceptors to use when invoking 'query'.
  func makeQueryInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestQuery, Tendermint_Abci_ResponseQuery>]

  /// - Returns: Interceptors to use when invoking 'commit'.
  func makeCommitInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestCommit, Tendermint_Abci_ResponseCommit>]

  /// - Returns: Interceptors to use when invoking 'initChain'.
  func makeInitChainInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestInitChain, Tendermint_Abci_ResponseInitChain>]

  /// - Returns: Interceptors to use when invoking 'beginBlock'.
  func makeBeginBlockInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestBeginBlock, Tendermint_Abci_ResponseBeginBlock>]

  /// - Returns: Interceptors to use when invoking 'endBlock'.
  func makeEndBlockInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestEndBlock, Tendermint_Abci_ResponseEndBlock>]

  /// - Returns: Interceptors to use when invoking 'listSnapshots'.
  func makeListSnapshotsInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestListSnapshots, Tendermint_Abci_ResponseListSnapshots>]

  /// - Returns: Interceptors to use when invoking 'offerSnapshot'.
  func makeOfferSnapshotInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestOfferSnapshot, Tendermint_Abci_ResponseOfferSnapshot>]

  /// - Returns: Interceptors to use when invoking 'loadSnapshotChunk'.
  func makeLoadSnapshotChunkInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestLoadSnapshotChunk, Tendermint_Abci_ResponseLoadSnapshotChunk>]

  /// - Returns: Interceptors to use when invoking 'applySnapshotChunk'.
  func makeApplySnapshotChunkInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestApplySnapshotChunk, Tendermint_Abci_ResponseApplySnapshotChunk>]

  /// - Returns: Interceptors to use when invoking 'prepareProposal'.
  func makePrepareProposalInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestPrepareProposal, Tendermint_Abci_ResponsePrepareProposal>]

  /// - Returns: Interceptors to use when invoking 'processProposal'.
  func makeProcessProposalInterceptors() -> [ClientInterceptor<Tendermint_Abci_RequestProcessProposal, Tendermint_Abci_ResponseProcessProposal>]
}

public enum Tendermint_Abci_ABCIApplicationClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ABCIApplication",
    fullName: "tendermint.abci.ABCIApplication",
    methods: [
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.echo,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.flush,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.info,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.deliverTx,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.checkTx,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.query,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.commit,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.initChain,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.beginBlock,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.endBlock,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.listSnapshots,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.offerSnapshot,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.loadSnapshotChunk,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.applySnapshotChunk,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.prepareProposal,
      Tendermint_Abci_ABCIApplicationClientMetadata.Methods.processProposal,
    ]
  )

  public enum Methods {
    public static let echo = GRPCMethodDescriptor(
      name: "Echo",
      path: "/tendermint.abci.ABCIApplication/Echo",
      type: GRPCCallType.unary
    )

    public static let flush = GRPCMethodDescriptor(
      name: "Flush",
      path: "/tendermint.abci.ABCIApplication/Flush",
      type: GRPCCallType.unary
    )

    public static let info = GRPCMethodDescriptor(
      name: "Info",
      path: "/tendermint.abci.ABCIApplication/Info",
      type: GRPCCallType.unary
    )

    public static let deliverTx = GRPCMethodDescriptor(
      name: "DeliverTx",
      path: "/tendermint.abci.ABCIApplication/DeliverTx",
      type: GRPCCallType.unary
    )

    public static let checkTx = GRPCMethodDescriptor(
      name: "CheckTx",
      path: "/tendermint.abci.ABCIApplication/CheckTx",
      type: GRPCCallType.unary
    )

    public static let query = GRPCMethodDescriptor(
      name: "Query",
      path: "/tendermint.abci.ABCIApplication/Query",
      type: GRPCCallType.unary
    )

    public static let commit = GRPCMethodDescriptor(
      name: "Commit",
      path: "/tendermint.abci.ABCIApplication/Commit",
      type: GRPCCallType.unary
    )

    public static let initChain = GRPCMethodDescriptor(
      name: "InitChain",
      path: "/tendermint.abci.ABCIApplication/InitChain",
      type: GRPCCallType.unary
    )

    public static let beginBlock = GRPCMethodDescriptor(
      name: "BeginBlock",
      path: "/tendermint.abci.ABCIApplication/BeginBlock",
      type: GRPCCallType.unary
    )

    public static let endBlock = GRPCMethodDescriptor(
      name: "EndBlock",
      path: "/tendermint.abci.ABCIApplication/EndBlock",
      type: GRPCCallType.unary
    )

    public static let listSnapshots = GRPCMethodDescriptor(
      name: "ListSnapshots",
      path: "/tendermint.abci.ABCIApplication/ListSnapshots",
      type: GRPCCallType.unary
    )

    public static let offerSnapshot = GRPCMethodDescriptor(
      name: "OfferSnapshot",
      path: "/tendermint.abci.ABCIApplication/OfferSnapshot",
      type: GRPCCallType.unary
    )

    public static let loadSnapshotChunk = GRPCMethodDescriptor(
      name: "LoadSnapshotChunk",
      path: "/tendermint.abci.ABCIApplication/LoadSnapshotChunk",
      type: GRPCCallType.unary
    )

    public static let applySnapshotChunk = GRPCMethodDescriptor(
      name: "ApplySnapshotChunk",
      path: "/tendermint.abci.ABCIApplication/ApplySnapshotChunk",
      type: GRPCCallType.unary
    )

    public static let prepareProposal = GRPCMethodDescriptor(
      name: "PrepareProposal",
      path: "/tendermint.abci.ABCIApplication/PrepareProposal",
      type: GRPCCallType.unary
    )

    public static let processProposal = GRPCMethodDescriptor(
      name: "ProcessProposal",
      path: "/tendermint.abci.ABCIApplication/ProcessProposal",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Tendermint_Abci_ABCIApplicationTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Tendermint_Abci_ABCIApplicationTestClient: Tendermint_Abci_ABCIApplicationClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Tendermint_Abci_ABCIApplicationClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Echo RPC. This must be called
  /// before calling 'echo'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeEchoResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestEcho>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestEcho, Tendermint_Abci_ResponseEcho> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.echo.path, requestHandler: requestHandler)
  }

  public func enqueueEchoResponse(
    _ response: Tendermint_Abci_ResponseEcho,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestEcho>) -> () = { _ in }
  ) {
    let stream = self.makeEchoResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Echo'
  public var hasEchoResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.echo.path)
  }

  /// Make a unary response for the Flush RPC. This must be called
  /// before calling 'flush'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeFlushResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestFlush>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestFlush, Tendermint_Abci_ResponseFlush> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.flush.path, requestHandler: requestHandler)
  }

  public func enqueueFlushResponse(
    _ response: Tendermint_Abci_ResponseFlush,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestFlush>) -> () = { _ in }
  ) {
    let stream = self.makeFlushResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Flush'
  public var hasFlushResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.flush.path)
  }

  /// Make a unary response for the Info RPC. This must be called
  /// before calling 'info'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeInfoResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestInfo>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestInfo, Tendermint_Abci_ResponseInfo> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.info.path, requestHandler: requestHandler)
  }

  public func enqueueInfoResponse(
    _ response: Tendermint_Abci_ResponseInfo,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestInfo>) -> () = { _ in }
  ) {
    let stream = self.makeInfoResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Info'
  public var hasInfoResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.info.path)
  }

  /// Make a unary response for the DeliverTx RPC. This must be called
  /// before calling 'deliverTx'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDeliverTxResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestDeliverTx>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestDeliverTx, Tendermint_Abci_ResponseDeliverTx> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.deliverTx.path, requestHandler: requestHandler)
  }

  public func enqueueDeliverTxResponse(
    _ response: Tendermint_Abci_ResponseDeliverTx,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestDeliverTx>) -> () = { _ in }
  ) {
    let stream = self.makeDeliverTxResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DeliverTx'
  public var hasDeliverTxResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.deliverTx.path)
  }

  /// Make a unary response for the CheckTx RPC. This must be called
  /// before calling 'checkTx'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCheckTxResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestCheckTx>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestCheckTx, Tendermint_Abci_ResponseCheckTx> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.checkTx.path, requestHandler: requestHandler)
  }

  public func enqueueCheckTxResponse(
    _ response: Tendermint_Abci_ResponseCheckTx,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestCheckTx>) -> () = { _ in }
  ) {
    let stream = self.makeCheckTxResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CheckTx'
  public var hasCheckTxResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.checkTx.path)
  }

  /// Make a unary response for the Query RPC. This must be called
  /// before calling 'query'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeQueryResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestQuery>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestQuery, Tendermint_Abci_ResponseQuery> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.query.path, requestHandler: requestHandler)
  }

  public func enqueueQueryResponse(
    _ response: Tendermint_Abci_ResponseQuery,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestQuery>) -> () = { _ in }
  ) {
    let stream = self.makeQueryResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Query'
  public var hasQueryResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.query.path)
  }

  /// Make a unary response for the Commit RPC. This must be called
  /// before calling 'commit'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCommitResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestCommit>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestCommit, Tendermint_Abci_ResponseCommit> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.commit.path, requestHandler: requestHandler)
  }

  public func enqueueCommitResponse(
    _ response: Tendermint_Abci_ResponseCommit,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestCommit>) -> () = { _ in }
  ) {
    let stream = self.makeCommitResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Commit'
  public var hasCommitResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.commit.path)
  }

  /// Make a unary response for the InitChain RPC. This must be called
  /// before calling 'initChain'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeInitChainResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestInitChain>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestInitChain, Tendermint_Abci_ResponseInitChain> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.initChain.path, requestHandler: requestHandler)
  }

  public func enqueueInitChainResponse(
    _ response: Tendermint_Abci_ResponseInitChain,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestInitChain>) -> () = { _ in }
  ) {
    let stream = self.makeInitChainResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'InitChain'
  public var hasInitChainResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.initChain.path)
  }

  /// Make a unary response for the BeginBlock RPC. This must be called
  /// before calling 'beginBlock'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeBeginBlockResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestBeginBlock>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestBeginBlock, Tendermint_Abci_ResponseBeginBlock> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.beginBlock.path, requestHandler: requestHandler)
  }

  public func enqueueBeginBlockResponse(
    _ response: Tendermint_Abci_ResponseBeginBlock,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestBeginBlock>) -> () = { _ in }
  ) {
    let stream = self.makeBeginBlockResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'BeginBlock'
  public var hasBeginBlockResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.beginBlock.path)
  }

  /// Make a unary response for the EndBlock RPC. This must be called
  /// before calling 'endBlock'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeEndBlockResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestEndBlock>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestEndBlock, Tendermint_Abci_ResponseEndBlock> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.endBlock.path, requestHandler: requestHandler)
  }

  public func enqueueEndBlockResponse(
    _ response: Tendermint_Abci_ResponseEndBlock,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestEndBlock>) -> () = { _ in }
  ) {
    let stream = self.makeEndBlockResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'EndBlock'
  public var hasEndBlockResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.endBlock.path)
  }

  /// Make a unary response for the ListSnapshots RPC. This must be called
  /// before calling 'listSnapshots'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeListSnapshotsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestListSnapshots>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestListSnapshots, Tendermint_Abci_ResponseListSnapshots> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.listSnapshots.path, requestHandler: requestHandler)
  }

  public func enqueueListSnapshotsResponse(
    _ response: Tendermint_Abci_ResponseListSnapshots,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestListSnapshots>) -> () = { _ in }
  ) {
    let stream = self.makeListSnapshotsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ListSnapshots'
  public var hasListSnapshotsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.listSnapshots.path)
  }

  /// Make a unary response for the OfferSnapshot RPC. This must be called
  /// before calling 'offerSnapshot'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeOfferSnapshotResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestOfferSnapshot>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestOfferSnapshot, Tendermint_Abci_ResponseOfferSnapshot> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.offerSnapshot.path, requestHandler: requestHandler)
  }

  public func enqueueOfferSnapshotResponse(
    _ response: Tendermint_Abci_ResponseOfferSnapshot,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestOfferSnapshot>) -> () = { _ in }
  ) {
    let stream = self.makeOfferSnapshotResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'OfferSnapshot'
  public var hasOfferSnapshotResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.offerSnapshot.path)
  }

  /// Make a unary response for the LoadSnapshotChunk RPC. This must be called
  /// before calling 'loadSnapshotChunk'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeLoadSnapshotChunkResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestLoadSnapshotChunk>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestLoadSnapshotChunk, Tendermint_Abci_ResponseLoadSnapshotChunk> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.loadSnapshotChunk.path, requestHandler: requestHandler)
  }

  public func enqueueLoadSnapshotChunkResponse(
    _ response: Tendermint_Abci_ResponseLoadSnapshotChunk,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestLoadSnapshotChunk>) -> () = { _ in }
  ) {
    let stream = self.makeLoadSnapshotChunkResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'LoadSnapshotChunk'
  public var hasLoadSnapshotChunkResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.loadSnapshotChunk.path)
  }

  /// Make a unary response for the ApplySnapshotChunk RPC. This must be called
  /// before calling 'applySnapshotChunk'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeApplySnapshotChunkResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestApplySnapshotChunk>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestApplySnapshotChunk, Tendermint_Abci_ResponseApplySnapshotChunk> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.applySnapshotChunk.path, requestHandler: requestHandler)
  }

  public func enqueueApplySnapshotChunkResponse(
    _ response: Tendermint_Abci_ResponseApplySnapshotChunk,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestApplySnapshotChunk>) -> () = { _ in }
  ) {
    let stream = self.makeApplySnapshotChunkResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ApplySnapshotChunk'
  public var hasApplySnapshotChunkResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.applySnapshotChunk.path)
  }

  /// Make a unary response for the PrepareProposal RPC. This must be called
  /// before calling 'prepareProposal'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makePrepareProposalResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestPrepareProposal>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestPrepareProposal, Tendermint_Abci_ResponsePrepareProposal> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.prepareProposal.path, requestHandler: requestHandler)
  }

  public func enqueuePrepareProposalResponse(
    _ response: Tendermint_Abci_ResponsePrepareProposal,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestPrepareProposal>) -> () = { _ in }
  ) {
    let stream = self.makePrepareProposalResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'PrepareProposal'
  public var hasPrepareProposalResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.prepareProposal.path)
  }

  /// Make a unary response for the ProcessProposal RPC. This must be called
  /// before calling 'processProposal'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeProcessProposalResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestProcessProposal>) -> () = { _ in }
  ) -> FakeUnaryResponse<Tendermint_Abci_RequestProcessProposal, Tendermint_Abci_ResponseProcessProposal> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.processProposal.path, requestHandler: requestHandler)
  }

  public func enqueueProcessProposalResponse(
    _ response: Tendermint_Abci_ResponseProcessProposal,
    _ requestHandler: @escaping (FakeRequestPart<Tendermint_Abci_RequestProcessProposal>) -> () = { _ in }
  ) {
    let stream = self.makeProcessProposalResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ProcessProposal'
  public var hasProcessProposalResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Tendermint_Abci_ABCIApplicationClientMetadata.Methods.processProposal.path)
  }
}

