//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/gov/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the bank Msg service.
///
/// Usage: instantiate `Cosmos_Gov_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Gov_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func submitProposal(
    _ request: Cosmos_Gov_V1beta1_MsgSubmitProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_MsgSubmitProposal, Cosmos_Gov_V1beta1_MsgSubmitProposalResponse>

  func vote(
    _ request: Cosmos_Gov_V1beta1_MsgVote,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_MsgVote, Cosmos_Gov_V1beta1_MsgVoteResponse>

  func voteWeighted(
    _ request: Cosmos_Gov_V1beta1_MsgVoteWeighted,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_MsgVoteWeighted, Cosmos_Gov_V1beta1_MsgVoteWeightedResponse>

  func deposit(
    _ request: Cosmos_Gov_V1beta1_MsgDeposit,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_MsgDeposit, Cosmos_Gov_V1beta1_MsgDepositResponse>
}

extension Cosmos_Gov_V1beta1_MsgClientProtocol {
  public var serviceName: String {
    return "cosmos.gov.v1beta1.Msg"
  }

  /// SubmitProposal defines a method to create new proposal given a content.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func submitProposal(
    _ request: Cosmos_Gov_V1beta1_MsgSubmitProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_MsgSubmitProposal, Cosmos_Gov_V1beta1_MsgSubmitProposalResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.submitProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? []
    )
  }

  /// Vote defines a method to add a vote on a specific proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Vote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func vote(
    _ request: Cosmos_Gov_V1beta1_MsgVote,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_MsgVote, Cosmos_Gov_V1beta1_MsgVoteResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  /// VoteWeighted defines a method to add a weighted vote on a specific proposal.
  ///
  /// Since: cosmos-sdk 0.43
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteWeighted.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func voteWeighted(
    _ request: Cosmos_Gov_V1beta1_MsgVoteWeighted,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_MsgVoteWeighted, Cosmos_Gov_V1beta1_MsgVoteWeightedResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.voteWeighted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteWeightedInterceptors() ?? []
    )
  }

  /// Deposit defines a method to add deposit on a specific proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Deposit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deposit(
    _ request: Cosmos_Gov_V1beta1_MsgDeposit,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_MsgDeposit, Cosmos_Gov_V1beta1_MsgDepositResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.deposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Gov_V1beta1_MsgClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Gov_V1beta1_MsgNIOClient")
public final class Cosmos_Gov_V1beta1_MsgClient: Cosmos_Gov_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.gov.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Gov_V1beta1_MsgNIOClient: Cosmos_Gov_V1beta1_MsgClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.gov.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Msg defines the bank Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Gov_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeSubmitProposalCall(
    _ request: Cosmos_Gov_V1beta1_MsgSubmitProposal,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Gov_V1beta1_MsgSubmitProposal, Cosmos_Gov_V1beta1_MsgSubmitProposalResponse>

  func makeVoteCall(
    _ request: Cosmos_Gov_V1beta1_MsgVote,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Gov_V1beta1_MsgVote, Cosmos_Gov_V1beta1_MsgVoteResponse>

  func makeVoteWeightedCall(
    _ request: Cosmos_Gov_V1beta1_MsgVoteWeighted,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Gov_V1beta1_MsgVoteWeighted, Cosmos_Gov_V1beta1_MsgVoteWeightedResponse>

  func makeDepositCall(
    _ request: Cosmos_Gov_V1beta1_MsgDeposit,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Gov_V1beta1_MsgDeposit, Cosmos_Gov_V1beta1_MsgDepositResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Gov_V1beta1_MsgAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Gov_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeSubmitProposalCall(
    _ request: Cosmos_Gov_V1beta1_MsgSubmitProposal,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Gov_V1beta1_MsgSubmitProposal, Cosmos_Gov_V1beta1_MsgSubmitProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.submitProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? []
    )
  }

  public func makeVoteCall(
    _ request: Cosmos_Gov_V1beta1_MsgVote,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Gov_V1beta1_MsgVote, Cosmos_Gov_V1beta1_MsgVoteResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  public func makeVoteWeightedCall(
    _ request: Cosmos_Gov_V1beta1_MsgVoteWeighted,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Gov_V1beta1_MsgVoteWeighted, Cosmos_Gov_V1beta1_MsgVoteWeightedResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.voteWeighted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteWeightedInterceptors() ?? []
    )
  }

  public func makeDepositCall(
    _ request: Cosmos_Gov_V1beta1_MsgDeposit,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Gov_V1beta1_MsgDeposit, Cosmos_Gov_V1beta1_MsgDepositResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.deposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Gov_V1beta1_MsgAsyncClientProtocol {
  public func submitProposal(
    _ request: Cosmos_Gov_V1beta1_MsgSubmitProposal,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Gov_V1beta1_MsgSubmitProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.submitProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? []
    )
  }

  public func vote(
    _ request: Cosmos_Gov_V1beta1_MsgVote,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Gov_V1beta1_MsgVoteResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  public func voteWeighted(
    _ request: Cosmos_Gov_V1beta1_MsgVoteWeighted,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Gov_V1beta1_MsgVoteWeightedResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.voteWeighted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteWeightedInterceptors() ?? []
    )
  }

  public func deposit(
    _ request: Cosmos_Gov_V1beta1_MsgDeposit,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Gov_V1beta1_MsgDepositResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.deposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Gov_V1beta1_MsgAsyncClient: Cosmos_Gov_V1beta1_MsgAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'submitProposal'.
  func makeSubmitProposalInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_MsgSubmitProposal, Cosmos_Gov_V1beta1_MsgSubmitProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'vote'.
  func makeVoteInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_MsgVote, Cosmos_Gov_V1beta1_MsgVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'voteWeighted'.
  func makeVoteWeightedInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_MsgVoteWeighted, Cosmos_Gov_V1beta1_MsgVoteWeightedResponse>]

  /// - Returns: Interceptors to use when invoking 'deposit'.
  func makeDepositInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_MsgDeposit, Cosmos_Gov_V1beta1_MsgDepositResponse>]
}

public enum Cosmos_Gov_V1beta1_MsgClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "cosmos.gov.v1beta1.Msg",
    methods: [
      Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.submitProposal,
      Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.vote,
      Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.voteWeighted,
      Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.deposit,
    ]
  )

  public enum Methods {
    public static let submitProposal = GRPCMethodDescriptor(
      name: "SubmitProposal",
      path: "/cosmos.gov.v1beta1.Msg/SubmitProposal",
      type: GRPCCallType.unary
    )

    public static let vote = GRPCMethodDescriptor(
      name: "Vote",
      path: "/cosmos.gov.v1beta1.Msg/Vote",
      type: GRPCCallType.unary
    )

    public static let voteWeighted = GRPCMethodDescriptor(
      name: "VoteWeighted",
      path: "/cosmos.gov.v1beta1.Msg/VoteWeighted",
      type: GRPCCallType.unary
    )

    public static let deposit = GRPCMethodDescriptor(
      name: "Deposit",
      path: "/cosmos.gov.v1beta1.Msg/Deposit",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Gov_V1beta1_MsgTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Gov_V1beta1_MsgTestClient: Cosmos_Gov_V1beta1_MsgClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Gov_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the SubmitProposal RPC. This must be called
  /// before calling 'submitProposal'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSubmitProposalResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Gov_V1beta1_MsgSubmitProposal>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Gov_V1beta1_MsgSubmitProposal, Cosmos_Gov_V1beta1_MsgSubmitProposalResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.submitProposal.path, requestHandler: requestHandler)
  }

  public func enqueueSubmitProposalResponse(
    _ response: Cosmos_Gov_V1beta1_MsgSubmitProposalResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Gov_V1beta1_MsgSubmitProposal>) -> () = { _ in }
  ) {
    let stream = self.makeSubmitProposalResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SubmitProposal'
  public var hasSubmitProposalResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.submitProposal.path)
  }

  /// Make a unary response for the Vote RPC. This must be called
  /// before calling 'vote'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeVoteResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Gov_V1beta1_MsgVote>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Gov_V1beta1_MsgVote, Cosmos_Gov_V1beta1_MsgVoteResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.vote.path, requestHandler: requestHandler)
  }

  public func enqueueVoteResponse(
    _ response: Cosmos_Gov_V1beta1_MsgVoteResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Gov_V1beta1_MsgVote>) -> () = { _ in }
  ) {
    let stream = self.makeVoteResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Vote'
  public var hasVoteResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.vote.path)
  }

  /// Make a unary response for the VoteWeighted RPC. This must be called
  /// before calling 'voteWeighted'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeVoteWeightedResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Gov_V1beta1_MsgVoteWeighted>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Gov_V1beta1_MsgVoteWeighted, Cosmos_Gov_V1beta1_MsgVoteWeightedResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.voteWeighted.path, requestHandler: requestHandler)
  }

  public func enqueueVoteWeightedResponse(
    _ response: Cosmos_Gov_V1beta1_MsgVoteWeightedResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Gov_V1beta1_MsgVoteWeighted>) -> () = { _ in }
  ) {
    let stream = self.makeVoteWeightedResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'VoteWeighted'
  public var hasVoteWeightedResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.voteWeighted.path)
  }

  /// Make a unary response for the Deposit RPC. This must be called
  /// before calling 'deposit'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDepositResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Gov_V1beta1_MsgDeposit>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Gov_V1beta1_MsgDeposit, Cosmos_Gov_V1beta1_MsgDepositResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.deposit.path, requestHandler: requestHandler)
  }

  public func enqueueDepositResponse(
    _ response: Cosmos_Gov_V1beta1_MsgDepositResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Gov_V1beta1_MsgDeposit>) -> () = { _ in }
  ) {
    let stream = self.makeDepositResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Deposit'
  public var hasDepositResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Gov_V1beta1_MsgClientMetadata.Methods.deposit.path)
  }
}

