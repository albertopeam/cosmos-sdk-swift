//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/distribution/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service for distribution module.
///
/// Usage: instantiate `Cosmos_Distribution_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Distribution_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Cosmos_Distribution_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryParamsRequest, Cosmos_Distribution_V1beta1_QueryParamsResponse>

  func validatorDistributionInfo(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest, Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoResponse>

  func validatorOutstandingRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest, Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsResponse>

  func validatorCommission(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest, Cosmos_Distribution_V1beta1_QueryValidatorCommissionResponse>

  func validatorSlashes(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest, Cosmos_Distribution_V1beta1_QueryValidatorSlashesResponse>

  func delegationRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationRewardsResponse>

  func delegationTotalRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsResponse>

  func delegatorValidators(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsResponse>

  func delegatorWithdrawAddress(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest, Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressResponse>

  func communityPool(
    _ request: Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest, Cosmos_Distribution_V1beta1_QueryCommunityPoolResponse>
}

extension Cosmos_Distribution_V1beta1_QueryClientProtocol {
  public var serviceName: String {
    return "cosmos.distribution.v1beta1.Query"
  }

  /// Params queries params of the distribution module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func params(
    _ request: Cosmos_Distribution_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryParamsRequest, Cosmos_Distribution_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorDistributionInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validatorDistributionInfo(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest, Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorDistributionInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorDistributionInfoInterceptors() ?? []
    )
  }

  /// ValidatorOutstandingRewards queries rewards of a validator address.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorOutstandingRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validatorOutstandingRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest, Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorOutstandingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorOutstandingRewardsInterceptors() ?? []
    )
  }

  /// ValidatorCommission queries accumulated commission for a validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorCommission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validatorCommission(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest, Cosmos_Distribution_V1beta1_QueryValidatorCommissionResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorCommission.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorCommissionInterceptors() ?? []
    )
  }

  /// ValidatorSlashes queries slash events of a validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorSlashes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validatorSlashes(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest, Cosmos_Distribution_V1beta1_QueryValidatorSlashesResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorSlashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorSlashesInterceptors() ?? []
    )
  }

  /// DelegationRewards queries the total rewards accrued by a delegation.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegationRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delegationRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationRewardsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationRewardsInterceptors() ?? []
    )
  }

  /// DelegationTotalRewards queries the total rewards accrued by each
  /// validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegationTotalRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delegationTotalRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationTotalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationTotalRewardsInterceptors() ?? []
    )
  }

  /// DelegatorValidators queries the validators of a delegator.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorValidators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delegatorValidators(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorsInterceptors() ?? []
    )
  }

  /// DelegatorWithdrawAddress queries withdraw address of a delegator.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorWithdrawAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delegatorWithdrawAddress(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest, Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorWithdrawAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorWithdrawAddressInterceptors() ?? []
    )
  }

  /// CommunityPool queries the community pool coins.
  ///
  /// - Parameters:
  ///   - request: Request to send to CommunityPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func communityPool(
    _ request: Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest, Cosmos_Distribution_V1beta1_QueryCommunityPoolResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.communityPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommunityPoolInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Distribution_V1beta1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Distribution_V1beta1_QueryNIOClient")
public final class Cosmos_Distribution_V1beta1_QueryClient: Cosmos_Distribution_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.distribution.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Distribution_V1beta1_QueryNIOClient: Cosmos_Distribution_V1beta1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.distribution.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC querier service for distribution module.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Distribution_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Cosmos_Distribution_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryParamsRequest, Cosmos_Distribution_V1beta1_QueryParamsResponse>

  func makeValidatorDistributionInfoCall(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest, Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoResponse>

  func makeValidatorOutstandingRewardsCall(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest, Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsResponse>

  func makeValidatorCommissionCall(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest, Cosmos_Distribution_V1beta1_QueryValidatorCommissionResponse>

  func makeValidatorSlashesCall(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest, Cosmos_Distribution_V1beta1_QueryValidatorSlashesResponse>

  func makeDelegationRewardsCall(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationRewardsResponse>

  func makeDelegationTotalRewardsCall(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsResponse>

  func makeDelegatorValidatorsCall(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsResponse>

  func makeDelegatorWithdrawAddressCall(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest, Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressResponse>

  func makeCommunityPoolCall(
    _ request: Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest, Cosmos_Distribution_V1beta1_QueryCommunityPoolResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Distribution_V1beta1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Distribution_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeParamsCall(
    _ request: Cosmos_Distribution_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryParamsRequest, Cosmos_Distribution_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func makeValidatorDistributionInfoCall(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest, Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorDistributionInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorDistributionInfoInterceptors() ?? []
    )
  }

  public func makeValidatorOutstandingRewardsCall(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest, Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorOutstandingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorOutstandingRewardsInterceptors() ?? []
    )
  }

  public func makeValidatorCommissionCall(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest, Cosmos_Distribution_V1beta1_QueryValidatorCommissionResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorCommission.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorCommissionInterceptors() ?? []
    )
  }

  public func makeValidatorSlashesCall(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest, Cosmos_Distribution_V1beta1_QueryValidatorSlashesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorSlashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorSlashesInterceptors() ?? []
    )
  }

  public func makeDelegationRewardsCall(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationRewardsInterceptors() ?? []
    )
  }

  public func makeDelegationTotalRewardsCall(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationTotalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationTotalRewardsInterceptors() ?? []
    )
  }

  public func makeDelegatorValidatorsCall(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorsInterceptors() ?? []
    )
  }

  public func makeDelegatorWithdrawAddressCall(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest, Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorWithdrawAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorWithdrawAddressInterceptors() ?? []
    )
  }

  public func makeCommunityPoolCall(
    _ request: Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest, Cosmos_Distribution_V1beta1_QueryCommunityPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.communityPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommunityPoolInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Distribution_V1beta1_QueryAsyncClientProtocol {
  public func params(
    _ request: Cosmos_Distribution_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Distribution_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func validatorDistributionInfo(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorDistributionInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorDistributionInfoInterceptors() ?? []
    )
  }

  public func validatorOutstandingRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorOutstandingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorOutstandingRewardsInterceptors() ?? []
    )
  }

  public func validatorCommission(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Distribution_V1beta1_QueryValidatorCommissionResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorCommission.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorCommissionInterceptors() ?? []
    )
  }

  public func validatorSlashes(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Distribution_V1beta1_QueryValidatorSlashesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorSlashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorSlashesInterceptors() ?? []
    )
  }

  public func delegationRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Distribution_V1beta1_QueryDelegationRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationRewardsInterceptors() ?? []
    )
  }

  public func delegationTotalRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationTotalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationTotalRewardsInterceptors() ?? []
    )
  }

  public func delegatorValidators(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorsInterceptors() ?? []
    )
  }

  public func delegatorWithdrawAddress(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorWithdrawAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorWithdrawAddressInterceptors() ?? []
    )
  }

  public func communityPool(
    _ request: Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Distribution_V1beta1_QueryCommunityPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.communityPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommunityPoolInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Distribution_V1beta1_QueryAsyncClient: Cosmos_Distribution_V1beta1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Cosmos_Distribution_V1beta1_QueryParamsRequest, Cosmos_Distribution_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorDistributionInfo'.
  func makeValidatorDistributionInfoInterceptors() -> [ClientInterceptor<Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest, Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorOutstandingRewards'.
  func makeValidatorOutstandingRewardsInterceptors() -> [ClientInterceptor<Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest, Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorCommission'.
  func makeValidatorCommissionInterceptors() -> [ClientInterceptor<Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest, Cosmos_Distribution_V1beta1_QueryValidatorCommissionResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorSlashes'.
  func makeValidatorSlashesInterceptors() -> [ClientInterceptor<Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest, Cosmos_Distribution_V1beta1_QueryValidatorSlashesResponse>]

  /// - Returns: Interceptors to use when invoking 'delegationRewards'.
  func makeDelegationRewardsInterceptors() -> [ClientInterceptor<Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegationTotalRewards'.
  func makeDelegationTotalRewardsInterceptors() -> [ClientInterceptor<Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorValidators'.
  func makeDelegatorValidatorsInterceptors() -> [ClientInterceptor<Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorWithdrawAddress'.
  func makeDelegatorWithdrawAddressInterceptors() -> [ClientInterceptor<Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest, Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'communityPool'.
  func makeCommunityPoolInterceptors() -> [ClientInterceptor<Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest, Cosmos_Distribution_V1beta1_QueryCommunityPoolResponse>]
}

public enum Cosmos_Distribution_V1beta1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.distribution.v1beta1.Query",
    methods: [
      Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.params,
      Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorDistributionInfo,
      Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorOutstandingRewards,
      Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorCommission,
      Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorSlashes,
      Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationRewards,
      Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationTotalRewards,
      Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorValidators,
      Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorWithdrawAddress,
      Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.communityPool,
    ]
  )

  public enum Methods {
    public static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/cosmos.distribution.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    public static let validatorDistributionInfo = GRPCMethodDescriptor(
      name: "ValidatorDistributionInfo",
      path: "/cosmos.distribution.v1beta1.Query/ValidatorDistributionInfo",
      type: GRPCCallType.unary
    )

    public static let validatorOutstandingRewards = GRPCMethodDescriptor(
      name: "ValidatorOutstandingRewards",
      path: "/cosmos.distribution.v1beta1.Query/ValidatorOutstandingRewards",
      type: GRPCCallType.unary
    )

    public static let validatorCommission = GRPCMethodDescriptor(
      name: "ValidatorCommission",
      path: "/cosmos.distribution.v1beta1.Query/ValidatorCommission",
      type: GRPCCallType.unary
    )

    public static let validatorSlashes = GRPCMethodDescriptor(
      name: "ValidatorSlashes",
      path: "/cosmos.distribution.v1beta1.Query/ValidatorSlashes",
      type: GRPCCallType.unary
    )

    public static let delegationRewards = GRPCMethodDescriptor(
      name: "DelegationRewards",
      path: "/cosmos.distribution.v1beta1.Query/DelegationRewards",
      type: GRPCCallType.unary
    )

    public static let delegationTotalRewards = GRPCMethodDescriptor(
      name: "DelegationTotalRewards",
      path: "/cosmos.distribution.v1beta1.Query/DelegationTotalRewards",
      type: GRPCCallType.unary
    )

    public static let delegatorValidators = GRPCMethodDescriptor(
      name: "DelegatorValidators",
      path: "/cosmos.distribution.v1beta1.Query/DelegatorValidators",
      type: GRPCCallType.unary
    )

    public static let delegatorWithdrawAddress = GRPCMethodDescriptor(
      name: "DelegatorWithdrawAddress",
      path: "/cosmos.distribution.v1beta1.Query/DelegatorWithdrawAddress",
      type: GRPCCallType.unary
    )

    public static let communityPool = GRPCMethodDescriptor(
      name: "CommunityPool",
      path: "/cosmos.distribution.v1beta1.Query/CommunityPool",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Distribution_V1beta1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Distribution_V1beta1_QueryTestClient: Cosmos_Distribution_V1beta1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Distribution_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Params RPC. This must be called
  /// before calling 'params'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryParamsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Distribution_V1beta1_QueryParamsRequest, Cosmos_Distribution_V1beta1_QueryParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.params.path, requestHandler: requestHandler)
  }

  public func enqueueParamsResponse(
    _ response: Cosmos_Distribution_V1beta1_QueryParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryParamsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Params'
  public var hasParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.params.path)
  }

  /// Make a unary response for the ValidatorDistributionInfo RPC. This must be called
  /// before calling 'validatorDistributionInfo'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeValidatorDistributionInfoResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest, Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorDistributionInfo.path, requestHandler: requestHandler)
  }

  public func enqueueValidatorDistributionInfoResponse(
    _ response: Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryValidatorDistributionInfoRequest>) -> () = { _ in }
  ) {
    let stream = self.makeValidatorDistributionInfoResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ValidatorDistributionInfo'
  public var hasValidatorDistributionInfoResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorDistributionInfo.path)
  }

  /// Make a unary response for the ValidatorOutstandingRewards RPC. This must be called
  /// before calling 'validatorOutstandingRewards'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeValidatorOutstandingRewardsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest, Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorOutstandingRewards.path, requestHandler: requestHandler)
  }

  public func enqueueValidatorOutstandingRewardsResponse(
    _ response: Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeValidatorOutstandingRewardsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ValidatorOutstandingRewards'
  public var hasValidatorOutstandingRewardsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorOutstandingRewards.path)
  }

  /// Make a unary response for the ValidatorCommission RPC. This must be called
  /// before calling 'validatorCommission'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeValidatorCommissionResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest, Cosmos_Distribution_V1beta1_QueryValidatorCommissionResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorCommission.path, requestHandler: requestHandler)
  }

  public func enqueueValidatorCommissionResponse(
    _ response: Cosmos_Distribution_V1beta1_QueryValidatorCommissionResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest>) -> () = { _ in }
  ) {
    let stream = self.makeValidatorCommissionResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ValidatorCommission'
  public var hasValidatorCommissionResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorCommission.path)
  }

  /// Make a unary response for the ValidatorSlashes RPC. This must be called
  /// before calling 'validatorSlashes'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeValidatorSlashesResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest, Cosmos_Distribution_V1beta1_QueryValidatorSlashesResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorSlashes.path, requestHandler: requestHandler)
  }

  public func enqueueValidatorSlashesResponse(
    _ response: Cosmos_Distribution_V1beta1_QueryValidatorSlashesResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest>) -> () = { _ in }
  ) {
    let stream = self.makeValidatorSlashesResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ValidatorSlashes'
  public var hasValidatorSlashesResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.validatorSlashes.path)
  }

  /// Make a unary response for the DelegationRewards RPC. This must be called
  /// before calling 'delegationRewards'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDelegationRewardsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationRewardsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationRewards.path, requestHandler: requestHandler)
  }

  public func enqueueDelegationRewardsResponse(
    _ response: Cosmos_Distribution_V1beta1_QueryDelegationRewardsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDelegationRewardsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DelegationRewards'
  public var hasDelegationRewardsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationRewards.path)
  }

  /// Make a unary response for the DelegationTotalRewards RPC. This must be called
  /// before calling 'delegationTotalRewards'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDelegationTotalRewardsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationTotalRewards.path, requestHandler: requestHandler)
  }

  public func enqueueDelegationTotalRewardsResponse(
    _ response: Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDelegationTotalRewardsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DelegationTotalRewards'
  public var hasDelegationTotalRewardsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegationTotalRewards.path)
  }

  /// Make a unary response for the DelegatorValidators RPC. This must be called
  /// before calling 'delegatorValidators'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDelegatorValidatorsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path, requestHandler: requestHandler)
  }

  public func enqueueDelegatorValidatorsResponse(
    _ response: Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDelegatorValidatorsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DelegatorValidators'
  public var hasDelegatorValidatorsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path)
  }

  /// Make a unary response for the DelegatorWithdrawAddress RPC. This must be called
  /// before calling 'delegatorWithdrawAddress'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDelegatorWithdrawAddressResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest, Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorWithdrawAddress.path, requestHandler: requestHandler)
  }

  public func enqueueDelegatorWithdrawAddressResponse(
    _ response: Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDelegatorWithdrawAddressResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DelegatorWithdrawAddress'
  public var hasDelegatorWithdrawAddressResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.delegatorWithdrawAddress.path)
  }

  /// Make a unary response for the CommunityPool RPC. This must be called
  /// before calling 'communityPool'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCommunityPoolResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest, Cosmos_Distribution_V1beta1_QueryCommunityPoolResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.communityPool.path, requestHandler: requestHandler)
  }

  public func enqueueCommunityPoolResponse(
    _ response: Cosmos_Distribution_V1beta1_QueryCommunityPoolResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest>) -> () = { _ in }
  ) {
    let stream = self.makeCommunityPoolResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CommunityPool'
  public var hasCommunityPoolResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Distribution_V1beta1_QueryClientMetadata.Methods.communityPool.path)
  }
}

