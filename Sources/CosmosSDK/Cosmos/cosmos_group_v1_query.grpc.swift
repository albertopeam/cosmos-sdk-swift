//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/group/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query is the cosmos.group.v1 Query service.
///
/// Usage: instantiate `Cosmos_Group_V1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Group_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? { get }

  func groupInfo(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse>

  func groupPolicyInfo(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse>

  func groupMembers(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse>

  func groupsByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse>

  func groupPoliciesByGroup(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>

  func groupPoliciesByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>

  func proposal(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse>

  func proposalsByGroupPolicy(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>

  func voteByProposalVoter(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse>

  func votesByProposal(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse>

  func votesByVoter(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse>

  func groupsByMember(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse>

  func tallyResult(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse>

  func groups(
    _ request: Cosmos_Group_V1_QueryGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse>
}

extension Cosmos_Group_V1_QueryClientProtocol {
  public var serviceName: String {
    return "cosmos.group.v1.Query"
  }

  /// GroupInfo queries group info based on group id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func groupInfo(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupInfoInterceptors() ?? []
    )
  }

  /// GroupPolicyInfo queries group policy info based on account address of group policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPolicyInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func groupPolicyInfo(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPolicyInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPolicyInfoInterceptors() ?? []
    )
  }

  /// GroupMembers queries members of a group by group id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func groupMembers(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupMembersInterceptors() ?? []
    )
  }

  /// GroupsByAdmin queries groups by admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupsByAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func groupsByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByAdminInterceptors() ?? []
    )
  }

  /// GroupPoliciesByGroup queries group policies by group id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPoliciesByGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func groupPoliciesByGroup(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByGroupInterceptors() ?? []
    )
  }

  /// GroupPoliciesByAdmin queries group policies by admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPoliciesByAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func groupPoliciesByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByAdminInterceptors() ?? []
    )
  }

  /// Proposal queries a proposal based on proposal id.
  ///
  /// - Parameters:
  ///   - request: Request to send to Proposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func proposal(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProposalsByGroupPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func proposalsByGroupPolicy(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposalsByGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsByGroupPolicyInterceptors() ?? []
    )
  }

  /// VoteByProposalVoter queries a vote by proposal id and voter.
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteByProposalVoter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func voteByProposalVoter(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.voteByProposalVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteByProposalVoterInterceptors() ?? []
    )
  }

  /// VotesByProposal queries a vote by proposal id.
  ///
  /// - Parameters:
  ///   - request: Request to send to VotesByProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func votesByProposal(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByProposalInterceptors() ?? []
    )
  }

  /// VotesByVoter queries a vote by voter.
  ///
  /// - Parameters:
  ///   - request: Request to send to VotesByVoter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func votesByVoter(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByVoterInterceptors() ?? []
    )
  }

  /// GroupsByMember queries groups by member address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupsByMember.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func groupsByMember(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByMember.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByMemberInterceptors() ?? []
    )
  }

  /// TallyResult returns the tally result of a proposal. If the proposal is
  /// still in voting period, then this query computes the current tally state,
  /// which might not be final. On the other hand, if the proposal is final,
  /// then it simply returns the `final_tally_result` state stored in the
  /// proposal itself.
  ///
  /// - Parameters:
  ///   - request: Request to send to TallyResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func tallyResult(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.tallyResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }

  /// Groups queries all groups in state.
  /// 
  /// Since: cosmos-sdk 0.47.1
  ///
  /// - Parameters:
  ///   - request: Request to send to Groups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func groups(
    _ request: Cosmos_Group_V1_QueryGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Group_V1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Group_V1_QueryNIOClient")
public final class Cosmos_Group_V1_QueryClient: Cosmos_Group_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.group.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Group_V1_QueryNIOClient: Cosmos_Group_V1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.group.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query is the cosmos.group.v1 Query service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Group_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeGroupInfoCall(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse>

  func makeGroupPolicyInfoCall(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse>

  func makeGroupMembersCall(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse>

  func makeGroupsByAdminCall(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse>

  func makeGroupPoliciesByGroupCall(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>

  func makeGroupPoliciesByAdminCall(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>

  func makeProposalCall(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse>

  func makeProposalsByGroupPolicyCall(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>

  func makeVoteByProposalVoterCall(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse>

  func makeVotesByProposalCall(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse>

  func makeVotesByVoterCall(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse>

  func makeGroupsByMemberCall(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse>

  func makeTallyResultCall(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse>

  func makeGroupsCall(
    _ request: Cosmos_Group_V1_QueryGroupsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Group_V1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Group_V1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGroupInfoCall(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupInfoInterceptors() ?? []
    )
  }

  public func makeGroupPolicyInfoCall(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPolicyInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPolicyInfoInterceptors() ?? []
    )
  }

  public func makeGroupMembersCall(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupMembersInterceptors() ?? []
    )
  }

  public func makeGroupsByAdminCall(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByAdminInterceptors() ?? []
    )
  }

  public func makeGroupPoliciesByGroupCall(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByGroupInterceptors() ?? []
    )
  }

  public func makeGroupPoliciesByAdminCall(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByAdminInterceptors() ?? []
    )
  }

  public func makeProposalCall(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  public func makeProposalsByGroupPolicyCall(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposalsByGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsByGroupPolicyInterceptors() ?? []
    )
  }

  public func makeVoteByProposalVoterCall(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.voteByProposalVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteByProposalVoterInterceptors() ?? []
    )
  }

  public func makeVotesByProposalCall(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByProposalInterceptors() ?? []
    )
  }

  public func makeVotesByVoterCall(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByVoterInterceptors() ?? []
    )
  }

  public func makeGroupsByMemberCall(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByMember.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByMemberInterceptors() ?? []
    )
  }

  public func makeTallyResultCall(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.tallyResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }

  public func makeGroupsCall(
    _ request: Cosmos_Group_V1_QueryGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Group_V1_QueryAsyncClientProtocol {
  public func groupInfo(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupInfoInterceptors() ?? []
    )
  }

  public func groupPolicyInfo(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupPolicyInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPolicyInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPolicyInfoInterceptors() ?? []
    )
  }

  public func groupMembers(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupMembersResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupMembersInterceptors() ?? []
    )
  }

  public func groupsByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupsByAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByAdminInterceptors() ?? []
    )
  }

  public func groupPoliciesByGroup(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByGroupInterceptors() ?? []
    )
  }

  public func groupPoliciesByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByAdminInterceptors() ?? []
    )
  }

  public func proposal(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  public func proposalsByGroupPolicy(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposalsByGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsByGroupPolicyInterceptors() ?? []
    )
  }

  public func voteByProposalVoter(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryVoteByProposalVoterResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.voteByProposalVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteByProposalVoterInterceptors() ?? []
    )
  }

  public func votesByProposal(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryVotesByProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByProposalInterceptors() ?? []
    )
  }

  public func votesByVoter(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryVotesByVoterResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByVoterInterceptors() ?? []
    )
  }

  public func groupsByMember(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupsByMemberResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByMember.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByMemberInterceptors() ?? []
    )
  }

  public func tallyResult(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryTallyResultResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.tallyResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }

  public func groups(
    _ request: Cosmos_Group_V1_QueryGroupsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Group_V1_QueryAsyncClient: Cosmos_Group_V1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'groupInfo'.
  func makeGroupInfoInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPolicyInfo'.
  func makeGroupPolicyInfoInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'groupMembers'.
  func makeGroupMembersInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse>]

  /// - Returns: Interceptors to use when invoking 'groupsByAdmin'.
  func makeGroupsByAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPoliciesByGroup'.
  func makeGroupPoliciesByGroupInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPoliciesByAdmin'.
  func makeGroupPoliciesByAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'proposal'.
  func makeProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'proposalsByGroupPolicy'.
  func makeProposalsByGroupPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'voteByProposalVoter'.
  func makeVoteByProposalVoterInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse>]

  /// - Returns: Interceptors to use when invoking 'votesByProposal'.
  func makeVotesByProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'votesByVoter'.
  func makeVotesByVoterInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse>]

  /// - Returns: Interceptors to use when invoking 'groupsByMember'.
  func makeGroupsByMemberInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse>]

  /// - Returns: Interceptors to use when invoking 'tallyResult'.
  func makeTallyResultInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse>]

  /// - Returns: Interceptors to use when invoking 'groups'.
  func makeGroupsInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse>]
}

public enum Cosmos_Group_V1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.group.v1.Query",
    methods: [
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupInfo,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupPolicyInfo,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupMembers,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByAdmin,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByGroup,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByAdmin,
      Cosmos_Group_V1_QueryClientMetadata.Methods.proposal,
      Cosmos_Group_V1_QueryClientMetadata.Methods.proposalsByGroupPolicy,
      Cosmos_Group_V1_QueryClientMetadata.Methods.voteByProposalVoter,
      Cosmos_Group_V1_QueryClientMetadata.Methods.votesByProposal,
      Cosmos_Group_V1_QueryClientMetadata.Methods.votesByVoter,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByMember,
      Cosmos_Group_V1_QueryClientMetadata.Methods.tallyResult,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groups,
    ]
  )

  public enum Methods {
    public static let groupInfo = GRPCMethodDescriptor(
      name: "GroupInfo",
      path: "/cosmos.group.v1.Query/GroupInfo",
      type: GRPCCallType.unary
    )

    public static let groupPolicyInfo = GRPCMethodDescriptor(
      name: "GroupPolicyInfo",
      path: "/cosmos.group.v1.Query/GroupPolicyInfo",
      type: GRPCCallType.unary
    )

    public static let groupMembers = GRPCMethodDescriptor(
      name: "GroupMembers",
      path: "/cosmos.group.v1.Query/GroupMembers",
      type: GRPCCallType.unary
    )

    public static let groupsByAdmin = GRPCMethodDescriptor(
      name: "GroupsByAdmin",
      path: "/cosmos.group.v1.Query/GroupsByAdmin",
      type: GRPCCallType.unary
    )

    public static let groupPoliciesByGroup = GRPCMethodDescriptor(
      name: "GroupPoliciesByGroup",
      path: "/cosmos.group.v1.Query/GroupPoliciesByGroup",
      type: GRPCCallType.unary
    )

    public static let groupPoliciesByAdmin = GRPCMethodDescriptor(
      name: "GroupPoliciesByAdmin",
      path: "/cosmos.group.v1.Query/GroupPoliciesByAdmin",
      type: GRPCCallType.unary
    )

    public static let proposal = GRPCMethodDescriptor(
      name: "Proposal",
      path: "/cosmos.group.v1.Query/Proposal",
      type: GRPCCallType.unary
    )

    public static let proposalsByGroupPolicy = GRPCMethodDescriptor(
      name: "ProposalsByGroupPolicy",
      path: "/cosmos.group.v1.Query/ProposalsByGroupPolicy",
      type: GRPCCallType.unary
    )

    public static let voteByProposalVoter = GRPCMethodDescriptor(
      name: "VoteByProposalVoter",
      path: "/cosmos.group.v1.Query/VoteByProposalVoter",
      type: GRPCCallType.unary
    )

    public static let votesByProposal = GRPCMethodDescriptor(
      name: "VotesByProposal",
      path: "/cosmos.group.v1.Query/VotesByProposal",
      type: GRPCCallType.unary
    )

    public static let votesByVoter = GRPCMethodDescriptor(
      name: "VotesByVoter",
      path: "/cosmos.group.v1.Query/VotesByVoter",
      type: GRPCCallType.unary
    )

    public static let groupsByMember = GRPCMethodDescriptor(
      name: "GroupsByMember",
      path: "/cosmos.group.v1.Query/GroupsByMember",
      type: GRPCCallType.unary
    )

    public static let tallyResult = GRPCMethodDescriptor(
      name: "TallyResult",
      path: "/cosmos.group.v1.Query/TallyResult",
      type: GRPCCallType.unary
    )

    public static let groups = GRPCMethodDescriptor(
      name: "Groups",
      path: "/cosmos.group.v1.Query/Groups",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Group_V1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Group_V1_QueryTestClient: Cosmos_Group_V1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the GroupInfo RPC. This must be called
  /// before calling 'groupInfo'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGroupInfoResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupInfoRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupInfo.path, requestHandler: requestHandler)
  }

  public func enqueueGroupInfoResponse(
    _ response: Cosmos_Group_V1_QueryGroupInfoResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupInfoRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGroupInfoResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GroupInfo'
  public var hasGroupInfoResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.groupInfo.path)
  }

  /// Make a unary response for the GroupPolicyInfo RPC. This must be called
  /// before calling 'groupPolicyInfo'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGroupPolicyInfoResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupPolicyInfoRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPolicyInfo.path, requestHandler: requestHandler)
  }

  public func enqueueGroupPolicyInfoResponse(
    _ response: Cosmos_Group_V1_QueryGroupPolicyInfoResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupPolicyInfoRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGroupPolicyInfoResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GroupPolicyInfo'
  public var hasGroupPolicyInfoResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPolicyInfo.path)
  }

  /// Make a unary response for the GroupMembers RPC. This must be called
  /// before calling 'groupMembers'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGroupMembersResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupMembersRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupMembers.path, requestHandler: requestHandler)
  }

  public func enqueueGroupMembersResponse(
    _ response: Cosmos_Group_V1_QueryGroupMembersResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupMembersRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGroupMembersResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GroupMembers'
  public var hasGroupMembersResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.groupMembers.path)
  }

  /// Make a unary response for the GroupsByAdmin RPC. This must be called
  /// before calling 'groupsByAdmin'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGroupsByAdminResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupsByAdminRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByAdmin.path, requestHandler: requestHandler)
  }

  public func enqueueGroupsByAdminResponse(
    _ response: Cosmos_Group_V1_QueryGroupsByAdminResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupsByAdminRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGroupsByAdminResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GroupsByAdmin'
  public var hasGroupsByAdminResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByAdmin.path)
  }

  /// Make a unary response for the GroupPoliciesByGroup RPC. This must be called
  /// before calling 'groupPoliciesByGroup'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGroupPoliciesByGroupResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByGroup.path, requestHandler: requestHandler)
  }

  public func enqueueGroupPoliciesByGroupResponse(
    _ response: Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGroupPoliciesByGroupResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GroupPoliciesByGroup'
  public var hasGroupPoliciesByGroupResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByGroup.path)
  }

  /// Make a unary response for the GroupPoliciesByAdmin RPC. This must be called
  /// before calling 'groupPoliciesByAdmin'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGroupPoliciesByAdminResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByAdmin.path, requestHandler: requestHandler)
  }

  public func enqueueGroupPoliciesByAdminResponse(
    _ response: Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGroupPoliciesByAdminResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GroupPoliciesByAdmin'
  public var hasGroupPoliciesByAdminResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByAdmin.path)
  }

  /// Make a unary response for the Proposal RPC. This must be called
  /// before calling 'proposal'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeProposalResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryProposalRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposal.path, requestHandler: requestHandler)
  }

  public func enqueueProposalResponse(
    _ response: Cosmos_Group_V1_QueryProposalResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryProposalRequest>) -> () = { _ in }
  ) {
    let stream = self.makeProposalResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Proposal'
  public var hasProposalResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.proposal.path)
  }

  /// Make a unary response for the ProposalsByGroupPolicy RPC. This must be called
  /// before calling 'proposalsByGroupPolicy'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeProposalsByGroupPolicyResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposalsByGroupPolicy.path, requestHandler: requestHandler)
  }

  public func enqueueProposalsByGroupPolicyResponse(
    _ response: Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest>) -> () = { _ in }
  ) {
    let stream = self.makeProposalsByGroupPolicyResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ProposalsByGroupPolicy'
  public var hasProposalsByGroupPolicyResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.proposalsByGroupPolicy.path)
  }

  /// Make a unary response for the VoteByProposalVoter RPC. This must be called
  /// before calling 'voteByProposalVoter'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeVoteByProposalVoterResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryVoteByProposalVoterRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.voteByProposalVoter.path, requestHandler: requestHandler)
  }

  public func enqueueVoteByProposalVoterResponse(
    _ response: Cosmos_Group_V1_QueryVoteByProposalVoterResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryVoteByProposalVoterRequest>) -> () = { _ in }
  ) {
    let stream = self.makeVoteByProposalVoterResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'VoteByProposalVoter'
  public var hasVoteByProposalVoterResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.voteByProposalVoter.path)
  }

  /// Make a unary response for the VotesByProposal RPC. This must be called
  /// before calling 'votesByProposal'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeVotesByProposalResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryVotesByProposalRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByProposal.path, requestHandler: requestHandler)
  }

  public func enqueueVotesByProposalResponse(
    _ response: Cosmos_Group_V1_QueryVotesByProposalResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryVotesByProposalRequest>) -> () = { _ in }
  ) {
    let stream = self.makeVotesByProposalResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'VotesByProposal'
  public var hasVotesByProposalResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByProposal.path)
  }

  /// Make a unary response for the VotesByVoter RPC. This must be called
  /// before calling 'votesByVoter'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeVotesByVoterResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryVotesByVoterRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByVoter.path, requestHandler: requestHandler)
  }

  public func enqueueVotesByVoterResponse(
    _ response: Cosmos_Group_V1_QueryVotesByVoterResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryVotesByVoterRequest>) -> () = { _ in }
  ) {
    let stream = self.makeVotesByVoterResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'VotesByVoter'
  public var hasVotesByVoterResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByVoter.path)
  }

  /// Make a unary response for the GroupsByMember RPC. This must be called
  /// before calling 'groupsByMember'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGroupsByMemberResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupsByMemberRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByMember.path, requestHandler: requestHandler)
  }

  public func enqueueGroupsByMemberResponse(
    _ response: Cosmos_Group_V1_QueryGroupsByMemberResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupsByMemberRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGroupsByMemberResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GroupsByMember'
  public var hasGroupsByMemberResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByMember.path)
  }

  /// Make a unary response for the TallyResult RPC. This must be called
  /// before calling 'tallyResult'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeTallyResultResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryTallyResultRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.tallyResult.path, requestHandler: requestHandler)
  }

  public func enqueueTallyResultResponse(
    _ response: Cosmos_Group_V1_QueryTallyResultResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryTallyResultRequest>) -> () = { _ in }
  ) {
    let stream = self.makeTallyResultResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TallyResult'
  public var hasTallyResultResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.tallyResult.path)
  }

  /// Make a unary response for the Groups RPC. This must be called
  /// before calling 'groups'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGroupsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_QueryClientMetadata.Methods.groups.path, requestHandler: requestHandler)
  }

  public func enqueueGroupsResponse(
    _ response: Cosmos_Group_V1_QueryGroupsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_QueryGroupsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGroupsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Groups'
  public var hasGroupsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_QueryClientMetadata.Methods.groups.path)
  }
}

