//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/auth/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Cosmos_Auth_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Auth_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func accounts(
    _ request: Cosmos_Auth_V1beta1_QueryAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryAccountsRequest, Cosmos_Auth_V1beta1_QueryAccountsResponse>

  func account(
    _ request: Cosmos_Auth_V1beta1_QueryAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryAccountRequest, Cosmos_Auth_V1beta1_QueryAccountResponse>

  func accountAddressByID(
    _ request: Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest, Cosmos_Auth_V1beta1_QueryAccountAddressByIDResponse>

  func params(
    _ request: Cosmos_Auth_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryParamsRequest, Cosmos_Auth_V1beta1_QueryParamsResponse>

  func moduleAccounts(
    _ request: Cosmos_Auth_V1beta1_QueryModuleAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryModuleAccountsRequest, Cosmos_Auth_V1beta1_QueryModuleAccountsResponse>

  func moduleAccountByName(
    _ request: Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest, Cosmos_Auth_V1beta1_QueryModuleAccountByNameResponse>

  func bech32Prefix(
    _ request: Cosmos_Auth_V1beta1_Bech32PrefixRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Auth_V1beta1_Bech32PrefixRequest, Cosmos_Auth_V1beta1_Bech32PrefixResponse>

  func addressBytesToString(
    _ request: Cosmos_Auth_V1beta1_AddressBytesToStringRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Auth_V1beta1_AddressBytesToStringRequest, Cosmos_Auth_V1beta1_AddressBytesToStringResponse>

  func addressStringToBytes(
    _ request: Cosmos_Auth_V1beta1_AddressStringToBytesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Auth_V1beta1_AddressStringToBytesRequest, Cosmos_Auth_V1beta1_AddressStringToBytesResponse>

  func accountInfo(
    _ request: Cosmos_Auth_V1beta1_QueryAccountInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryAccountInfoRequest, Cosmos_Auth_V1beta1_QueryAccountInfoResponse>
}

extension Cosmos_Auth_V1beta1_QueryClientProtocol {
  public var serviceName: String {
    return "cosmos.auth.v1beta1.Query"
  }

  /// Accounts returns all the existing accounts.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// Since: cosmos-sdk 0.43
  ///
  /// - Parameters:
  ///   - request: Request to send to Accounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func accounts(
    _ request: Cosmos_Auth_V1beta1_QueryAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryAccountsRequest, Cosmos_Auth_V1beta1_QueryAccountsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountsInterceptors() ?? []
    )
  }

  /// Account returns account details based on address.
  ///
  /// - Parameters:
  ///   - request: Request to send to Account.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func account(
    _ request: Cosmos_Auth_V1beta1_QueryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryAccountRequest, Cosmos_Auth_V1beta1_QueryAccountResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.account.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInterceptors() ?? []
    )
  }

  /// AccountAddressByID returns account address based on account number.
  ///
  /// Since: cosmos-sdk 0.46.2
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountAddressByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func accountAddressByID(
    _ request: Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest, Cosmos_Auth_V1beta1_QueryAccountAddressByIDResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountAddressByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAddressByIDInterceptors() ?? []
    )
  }

  /// Params queries all parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func params(
    _ request: Cosmos_Auth_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryParamsRequest, Cosmos_Auth_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// ModuleAccounts returns all the existing module accounts.
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to ModuleAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func moduleAccounts(
    _ request: Cosmos_Auth_V1beta1_QueryModuleAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryModuleAccountsRequest, Cosmos_Auth_V1beta1_QueryModuleAccountsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleAccountsInterceptors() ?? []
    )
  }

  /// ModuleAccountByName returns the module account info by module name
  ///
  /// - Parameters:
  ///   - request: Request to send to ModuleAccountByName.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func moduleAccountByName(
    _ request: Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest, Cosmos_Auth_V1beta1_QueryModuleAccountByNameResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccountByName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleAccountByNameInterceptors() ?? []
    )
  }

  /// Bech32Prefix queries bech32Prefix
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to Bech32Prefix.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func bech32Prefix(
    _ request: Cosmos_Auth_V1beta1_Bech32PrefixRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Auth_V1beta1_Bech32PrefixRequest, Cosmos_Auth_V1beta1_Bech32PrefixResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.bech32Prefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBech32PrefixInterceptors() ?? []
    )
  }

  /// AddressBytesToString converts Account Address bytes to string
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to AddressBytesToString.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addressBytesToString(
    _ request: Cosmos_Auth_V1beta1_AddressBytesToStringRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Auth_V1beta1_AddressBytesToStringRequest, Cosmos_Auth_V1beta1_AddressBytesToStringResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressBytesToString.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressBytesToStringInterceptors() ?? []
    )
  }

  /// AddressStringToBytes converts Address string to bytes
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to AddressStringToBytes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addressStringToBytes(
    _ request: Cosmos_Auth_V1beta1_AddressStringToBytesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Auth_V1beta1_AddressStringToBytesRequest, Cosmos_Auth_V1beta1_AddressStringToBytesResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressStringToBytes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressStringToBytesInterceptors() ?? []
    )
  }

  /// AccountInfo queries account info which is common to all account types.
  ///
  /// Since: cosmos-sdk 0.47
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func accountInfo(
    _ request: Cosmos_Auth_V1beta1_QueryAccountInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Auth_V1beta1_QueryAccountInfoRequest, Cosmos_Auth_V1beta1_QueryAccountInfoResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInfoInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Auth_V1beta1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Auth_V1beta1_QueryNIOClient")
public final class Cosmos_Auth_V1beta1_QueryClient: Cosmos_Auth_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.auth.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Auth_V1beta1_QueryNIOClient: Cosmos_Auth_V1beta1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.auth.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Auth_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeAccountsCall(
    _ request: Cosmos_Auth_V1beta1_QueryAccountsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryAccountsRequest, Cosmos_Auth_V1beta1_QueryAccountsResponse>

  func makeAccountCall(
    _ request: Cosmos_Auth_V1beta1_QueryAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryAccountRequest, Cosmos_Auth_V1beta1_QueryAccountResponse>

  func makeAccountAddressByIDCall(
    _ request: Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest, Cosmos_Auth_V1beta1_QueryAccountAddressByIDResponse>

  func makeParamsCall(
    _ request: Cosmos_Auth_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryParamsRequest, Cosmos_Auth_V1beta1_QueryParamsResponse>

  func makeModuleAccountsCall(
    _ request: Cosmos_Auth_V1beta1_QueryModuleAccountsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryModuleAccountsRequest, Cosmos_Auth_V1beta1_QueryModuleAccountsResponse>

  func makeModuleAccountByNameCall(
    _ request: Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest, Cosmos_Auth_V1beta1_QueryModuleAccountByNameResponse>

  func makeBech32PrefixCall(
    _ request: Cosmos_Auth_V1beta1_Bech32PrefixRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_Bech32PrefixRequest, Cosmos_Auth_V1beta1_Bech32PrefixResponse>

  func makeAddressBytesToStringCall(
    _ request: Cosmos_Auth_V1beta1_AddressBytesToStringRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_AddressBytesToStringRequest, Cosmos_Auth_V1beta1_AddressBytesToStringResponse>

  func makeAddressStringToBytesCall(
    _ request: Cosmos_Auth_V1beta1_AddressStringToBytesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_AddressStringToBytesRequest, Cosmos_Auth_V1beta1_AddressStringToBytesResponse>

  func makeAccountInfoCall(
    _ request: Cosmos_Auth_V1beta1_QueryAccountInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryAccountInfoRequest, Cosmos_Auth_V1beta1_QueryAccountInfoResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Auth_V1beta1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Auth_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeAccountsCall(
    _ request: Cosmos_Auth_V1beta1_QueryAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryAccountsRequest, Cosmos_Auth_V1beta1_QueryAccountsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountsInterceptors() ?? []
    )
  }

  public func makeAccountCall(
    _ request: Cosmos_Auth_V1beta1_QueryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryAccountRequest, Cosmos_Auth_V1beta1_QueryAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.account.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInterceptors() ?? []
    )
  }

  public func makeAccountAddressByIDCall(
    _ request: Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest, Cosmos_Auth_V1beta1_QueryAccountAddressByIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountAddressByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAddressByIDInterceptors() ?? []
    )
  }

  public func makeParamsCall(
    _ request: Cosmos_Auth_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryParamsRequest, Cosmos_Auth_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func makeModuleAccountsCall(
    _ request: Cosmos_Auth_V1beta1_QueryModuleAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryModuleAccountsRequest, Cosmos_Auth_V1beta1_QueryModuleAccountsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleAccountsInterceptors() ?? []
    )
  }

  public func makeModuleAccountByNameCall(
    _ request: Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest, Cosmos_Auth_V1beta1_QueryModuleAccountByNameResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccountByName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleAccountByNameInterceptors() ?? []
    )
  }

  public func makeBech32PrefixCall(
    _ request: Cosmos_Auth_V1beta1_Bech32PrefixRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_Bech32PrefixRequest, Cosmos_Auth_V1beta1_Bech32PrefixResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.bech32Prefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBech32PrefixInterceptors() ?? []
    )
  }

  public func makeAddressBytesToStringCall(
    _ request: Cosmos_Auth_V1beta1_AddressBytesToStringRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_AddressBytesToStringRequest, Cosmos_Auth_V1beta1_AddressBytesToStringResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressBytesToString.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressBytesToStringInterceptors() ?? []
    )
  }

  public func makeAddressStringToBytesCall(
    _ request: Cosmos_Auth_V1beta1_AddressStringToBytesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_AddressStringToBytesRequest, Cosmos_Auth_V1beta1_AddressStringToBytesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressStringToBytes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressStringToBytesInterceptors() ?? []
    )
  }

  public func makeAccountInfoCall(
    _ request: Cosmos_Auth_V1beta1_QueryAccountInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Auth_V1beta1_QueryAccountInfoRequest, Cosmos_Auth_V1beta1_QueryAccountInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInfoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Auth_V1beta1_QueryAsyncClientProtocol {
  public func accounts(
    _ request: Cosmos_Auth_V1beta1_QueryAccountsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Auth_V1beta1_QueryAccountsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountsInterceptors() ?? []
    )
  }

  public func account(
    _ request: Cosmos_Auth_V1beta1_QueryAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Auth_V1beta1_QueryAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.account.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInterceptors() ?? []
    )
  }

  public func accountAddressByID(
    _ request: Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Auth_V1beta1_QueryAccountAddressByIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountAddressByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAddressByIDInterceptors() ?? []
    )
  }

  public func params(
    _ request: Cosmos_Auth_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Auth_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func moduleAccounts(
    _ request: Cosmos_Auth_V1beta1_QueryModuleAccountsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Auth_V1beta1_QueryModuleAccountsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleAccountsInterceptors() ?? []
    )
  }

  public func moduleAccountByName(
    _ request: Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Auth_V1beta1_QueryModuleAccountByNameResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccountByName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleAccountByNameInterceptors() ?? []
    )
  }

  public func bech32Prefix(
    _ request: Cosmos_Auth_V1beta1_Bech32PrefixRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Auth_V1beta1_Bech32PrefixResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.bech32Prefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBech32PrefixInterceptors() ?? []
    )
  }

  public func addressBytesToString(
    _ request: Cosmos_Auth_V1beta1_AddressBytesToStringRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Auth_V1beta1_AddressBytesToStringResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressBytesToString.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressBytesToStringInterceptors() ?? []
    )
  }

  public func addressStringToBytes(
    _ request: Cosmos_Auth_V1beta1_AddressStringToBytesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Auth_V1beta1_AddressStringToBytesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressStringToBytes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressStringToBytesInterceptors() ?? []
    )
  }

  public func accountInfo(
    _ request: Cosmos_Auth_V1beta1_QueryAccountInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Auth_V1beta1_QueryAccountInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInfoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Auth_V1beta1_QueryAsyncClient: Cosmos_Auth_V1beta1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'accounts'.
  func makeAccountsInterceptors() -> [ClientInterceptor<Cosmos_Auth_V1beta1_QueryAccountsRequest, Cosmos_Auth_V1beta1_QueryAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'account'.
  func makeAccountInterceptors() -> [ClientInterceptor<Cosmos_Auth_V1beta1_QueryAccountRequest, Cosmos_Auth_V1beta1_QueryAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'accountAddressByID'.
  func makeAccountAddressByIDInterceptors() -> [ClientInterceptor<Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest, Cosmos_Auth_V1beta1_QueryAccountAddressByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Cosmos_Auth_V1beta1_QueryParamsRequest, Cosmos_Auth_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'moduleAccounts'.
  func makeModuleAccountsInterceptors() -> [ClientInterceptor<Cosmos_Auth_V1beta1_QueryModuleAccountsRequest, Cosmos_Auth_V1beta1_QueryModuleAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'moduleAccountByName'.
  func makeModuleAccountByNameInterceptors() -> [ClientInterceptor<Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest, Cosmos_Auth_V1beta1_QueryModuleAccountByNameResponse>]

  /// - Returns: Interceptors to use when invoking 'bech32Prefix'.
  func makeBech32PrefixInterceptors() -> [ClientInterceptor<Cosmos_Auth_V1beta1_Bech32PrefixRequest, Cosmos_Auth_V1beta1_Bech32PrefixResponse>]

  /// - Returns: Interceptors to use when invoking 'addressBytesToString'.
  func makeAddressBytesToStringInterceptors() -> [ClientInterceptor<Cosmos_Auth_V1beta1_AddressBytesToStringRequest, Cosmos_Auth_V1beta1_AddressBytesToStringResponse>]

  /// - Returns: Interceptors to use when invoking 'addressStringToBytes'.
  func makeAddressStringToBytesInterceptors() -> [ClientInterceptor<Cosmos_Auth_V1beta1_AddressStringToBytesRequest, Cosmos_Auth_V1beta1_AddressStringToBytesResponse>]

  /// - Returns: Interceptors to use when invoking 'accountInfo'.
  func makeAccountInfoInterceptors() -> [ClientInterceptor<Cosmos_Auth_V1beta1_QueryAccountInfoRequest, Cosmos_Auth_V1beta1_QueryAccountInfoResponse>]
}

public enum Cosmos_Auth_V1beta1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.auth.v1beta1.Query",
    methods: [
      Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accounts,
      Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.account,
      Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountAddressByID,
      Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.params,
      Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccounts,
      Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccountByName,
      Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.bech32Prefix,
      Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressBytesToString,
      Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressStringToBytes,
      Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountInfo,
    ]
  )

  public enum Methods {
    public static let accounts = GRPCMethodDescriptor(
      name: "Accounts",
      path: "/cosmos.auth.v1beta1.Query/Accounts",
      type: GRPCCallType.unary
    )

    public static let account = GRPCMethodDescriptor(
      name: "Account",
      path: "/cosmos.auth.v1beta1.Query/Account",
      type: GRPCCallType.unary
    )

    public static let accountAddressByID = GRPCMethodDescriptor(
      name: "AccountAddressByID",
      path: "/cosmos.auth.v1beta1.Query/AccountAddressByID",
      type: GRPCCallType.unary
    )

    public static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/cosmos.auth.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    public static let moduleAccounts = GRPCMethodDescriptor(
      name: "ModuleAccounts",
      path: "/cosmos.auth.v1beta1.Query/ModuleAccounts",
      type: GRPCCallType.unary
    )

    public static let moduleAccountByName = GRPCMethodDescriptor(
      name: "ModuleAccountByName",
      path: "/cosmos.auth.v1beta1.Query/ModuleAccountByName",
      type: GRPCCallType.unary
    )

    public static let bech32Prefix = GRPCMethodDescriptor(
      name: "Bech32Prefix",
      path: "/cosmos.auth.v1beta1.Query/Bech32Prefix",
      type: GRPCCallType.unary
    )

    public static let addressBytesToString = GRPCMethodDescriptor(
      name: "AddressBytesToString",
      path: "/cosmos.auth.v1beta1.Query/AddressBytesToString",
      type: GRPCCallType.unary
    )

    public static let addressStringToBytes = GRPCMethodDescriptor(
      name: "AddressStringToBytes",
      path: "/cosmos.auth.v1beta1.Query/AddressStringToBytes",
      type: GRPCCallType.unary
    )

    public static let accountInfo = GRPCMethodDescriptor(
      name: "AccountInfo",
      path: "/cosmos.auth.v1beta1.Query/AccountInfo",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Auth_V1beta1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Auth_V1beta1_QueryTestClient: Cosmos_Auth_V1beta1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Auth_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Accounts RPC. This must be called
  /// before calling 'accounts'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAccountsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryAccountsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Auth_V1beta1_QueryAccountsRequest, Cosmos_Auth_V1beta1_QueryAccountsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accounts.path, requestHandler: requestHandler)
  }

  public func enqueueAccountsResponse(
    _ response: Cosmos_Auth_V1beta1_QueryAccountsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryAccountsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAccountsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Accounts'
  public var hasAccountsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accounts.path)
  }

  /// Make a unary response for the Account RPC. This must be called
  /// before calling 'account'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAccountResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryAccountRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Auth_V1beta1_QueryAccountRequest, Cosmos_Auth_V1beta1_QueryAccountResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.account.path, requestHandler: requestHandler)
  }

  public func enqueueAccountResponse(
    _ response: Cosmos_Auth_V1beta1_QueryAccountResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryAccountRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAccountResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Account'
  public var hasAccountResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.account.path)
  }

  /// Make a unary response for the AccountAddressByID RPC. This must be called
  /// before calling 'accountAddressByID'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAccountAddressByIDResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest, Cosmos_Auth_V1beta1_QueryAccountAddressByIDResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountAddressByID.path, requestHandler: requestHandler)
  }

  public func enqueueAccountAddressByIDResponse(
    _ response: Cosmos_Auth_V1beta1_QueryAccountAddressByIDResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryAccountAddressByIDRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAccountAddressByIDResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AccountAddressByID'
  public var hasAccountAddressByIDResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountAddressByID.path)
  }

  /// Make a unary response for the Params RPC. This must be called
  /// before calling 'params'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryParamsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Auth_V1beta1_QueryParamsRequest, Cosmos_Auth_V1beta1_QueryParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.params.path, requestHandler: requestHandler)
  }

  public func enqueueParamsResponse(
    _ response: Cosmos_Auth_V1beta1_QueryParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryParamsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Params'
  public var hasParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.params.path)
  }

  /// Make a unary response for the ModuleAccounts RPC. This must be called
  /// before calling 'moduleAccounts'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeModuleAccountsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryModuleAccountsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Auth_V1beta1_QueryModuleAccountsRequest, Cosmos_Auth_V1beta1_QueryModuleAccountsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccounts.path, requestHandler: requestHandler)
  }

  public func enqueueModuleAccountsResponse(
    _ response: Cosmos_Auth_V1beta1_QueryModuleAccountsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryModuleAccountsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeModuleAccountsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ModuleAccounts'
  public var hasModuleAccountsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccounts.path)
  }

  /// Make a unary response for the ModuleAccountByName RPC. This must be called
  /// before calling 'moduleAccountByName'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeModuleAccountByNameResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest, Cosmos_Auth_V1beta1_QueryModuleAccountByNameResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccountByName.path, requestHandler: requestHandler)
  }

  public func enqueueModuleAccountByNameResponse(
    _ response: Cosmos_Auth_V1beta1_QueryModuleAccountByNameResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryModuleAccountByNameRequest>) -> () = { _ in }
  ) {
    let stream = self.makeModuleAccountByNameResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ModuleAccountByName'
  public var hasModuleAccountByNameResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.moduleAccountByName.path)
  }

  /// Make a unary response for the Bech32Prefix RPC. This must be called
  /// before calling 'bech32Prefix'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeBech32PrefixResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_Bech32PrefixRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Auth_V1beta1_Bech32PrefixRequest, Cosmos_Auth_V1beta1_Bech32PrefixResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.bech32Prefix.path, requestHandler: requestHandler)
  }

  public func enqueueBech32PrefixResponse(
    _ response: Cosmos_Auth_V1beta1_Bech32PrefixResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_Bech32PrefixRequest>) -> () = { _ in }
  ) {
    let stream = self.makeBech32PrefixResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Bech32Prefix'
  public var hasBech32PrefixResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.bech32Prefix.path)
  }

  /// Make a unary response for the AddressBytesToString RPC. This must be called
  /// before calling 'addressBytesToString'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAddressBytesToStringResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_AddressBytesToStringRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Auth_V1beta1_AddressBytesToStringRequest, Cosmos_Auth_V1beta1_AddressBytesToStringResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressBytesToString.path, requestHandler: requestHandler)
  }

  public func enqueueAddressBytesToStringResponse(
    _ response: Cosmos_Auth_V1beta1_AddressBytesToStringResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_AddressBytesToStringRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAddressBytesToStringResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AddressBytesToString'
  public var hasAddressBytesToStringResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressBytesToString.path)
  }

  /// Make a unary response for the AddressStringToBytes RPC. This must be called
  /// before calling 'addressStringToBytes'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAddressStringToBytesResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_AddressStringToBytesRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Auth_V1beta1_AddressStringToBytesRequest, Cosmos_Auth_V1beta1_AddressStringToBytesResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressStringToBytes.path, requestHandler: requestHandler)
  }

  public func enqueueAddressStringToBytesResponse(
    _ response: Cosmos_Auth_V1beta1_AddressStringToBytesResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_AddressStringToBytesRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAddressStringToBytesResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AddressStringToBytes'
  public var hasAddressStringToBytesResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.addressStringToBytes.path)
  }

  /// Make a unary response for the AccountInfo RPC. This must be called
  /// before calling 'accountInfo'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAccountInfoResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryAccountInfoRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Auth_V1beta1_QueryAccountInfoRequest, Cosmos_Auth_V1beta1_QueryAccountInfoResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountInfo.path, requestHandler: requestHandler)
  }

  public func enqueueAccountInfoResponse(
    _ response: Cosmos_Auth_V1beta1_QueryAccountInfoResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Auth_V1beta1_QueryAccountInfoRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAccountInfoResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AccountInfo'
  public var hasAccountInfoResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Auth_V1beta1_QueryClientMetadata.Methods.accountInfo.path)
  }
}

