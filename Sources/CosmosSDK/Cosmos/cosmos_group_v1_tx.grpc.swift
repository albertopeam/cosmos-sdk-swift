//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/group/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg is the cosmos.group.v1 Msg service.
///
/// Usage: instantiate `Cosmos_Group_V1_MsgClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Group_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? { get }

  func createGroup(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse>

  func updateGroupMembers(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse>

  func updateGroupAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse>

  func updateGroupMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>

  func createGroupPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse>

  func createGroupWithPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>

  func updateGroupPolicyAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>

  func updateGroupPolicyDecisionPolicy(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>

  func updateGroupPolicyMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>

  func submitProposal(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse>

  func withdrawProposal(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse>

  func vote(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse>

  func exec(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse>

  func leaveGroup(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse>
}

extension Cosmos_Group_V1_MsgClientProtocol {
  public var serviceName: String {
    return "cosmos.group.v1.Msg"
  }

  /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createGroup(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  /// UpdateGroupMembers updates the group members with given group id and admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateGroupMembers(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? []
    )
  }

  /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateGroupAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? []
    )
  }

  /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateGroupMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? []
    )
  }

  /// CreateGroupPolicy creates a new group policy using given DecisionPolicy.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroupPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createGroupPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupPolicyInterceptors() ?? []
    )
  }

  /// CreateGroupWithPolicy creates a new group with policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroupWithPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createGroupWithPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupWithPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupWithPolicyInterceptors() ?? []
    )
  }

  /// UpdateGroupPolicyAdmin updates a group policy admin.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupPolicyAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateGroupPolicyAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyAdminInterceptors() ?? []
    )
  }

  /// UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupPolicyDecisionPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateGroupPolicyDecisionPolicy(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyDecisionPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyDecisionPolicyInterceptors() ?? []
    )
  }

  /// UpdateGroupPolicyMetadata updates a group policy metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupPolicyMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateGroupPolicyMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyMetadataInterceptors() ?? []
    )
  }

  /// SubmitProposal submits a new proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func submitProposal(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.submitProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? []
    )
  }

  /// WithdrawProposal withdraws a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func withdrawProposal(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.withdrawProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawProposalInterceptors() ?? []
    )
  }

  /// Vote allows a voter to vote on a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Vote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func vote(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  /// Exec executes a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Exec.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exec(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.exec.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }

  /// LeaveGroup allows a group member to leave the group.
  ///
  /// - Parameters:
  ///   - request: Request to send to LeaveGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func leaveGroup(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.leaveGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Group_V1_MsgClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Group_V1_MsgNIOClient")
public final class Cosmos_Group_V1_MsgClient: Cosmos_Group_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.group.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Group_V1_MsgNIOClient: Cosmos_Group_V1_MsgClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.group.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Msg is the cosmos.group.v1 Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Group_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateGroupCall(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse>

  func makeUpdateGroupMembersCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse>

  func makeUpdateGroupAdminCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse>

  func makeUpdateGroupMetadataCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>

  func makeCreateGroupPolicyCall(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse>

  func makeCreateGroupWithPolicyCall(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>

  func makeUpdateGroupPolicyAdminCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>

  func makeUpdateGroupPolicyDecisionPolicyCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>

  func makeUpdateGroupPolicyMetadataCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>

  func makeSubmitProposalCall(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse>

  func makeWithdrawProposalCall(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse>

  func makeVoteCall(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse>

  func makeExecCall(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse>

  func makeLeaveGroupCall(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Group_V1_MsgAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Group_V1_MsgClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateGroupCall(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  public func makeUpdateGroupMembersCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? []
    )
  }

  public func makeUpdateGroupAdminCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? []
    )
  }

  public func makeUpdateGroupMetadataCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? []
    )
  }

  public func makeCreateGroupPolicyCall(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupPolicyInterceptors() ?? []
    )
  }

  public func makeCreateGroupWithPolicyCall(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupWithPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupWithPolicyInterceptors() ?? []
    )
  }

  public func makeUpdateGroupPolicyAdminCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyAdminInterceptors() ?? []
    )
  }

  public func makeUpdateGroupPolicyDecisionPolicyCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyDecisionPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyDecisionPolicyInterceptors() ?? []
    )
  }

  public func makeUpdateGroupPolicyMetadataCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyMetadataInterceptors() ?? []
    )
  }

  public func makeSubmitProposalCall(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.submitProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? []
    )
  }

  public func makeWithdrawProposalCall(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.withdrawProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawProposalInterceptors() ?? []
    )
  }

  public func makeVoteCall(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  public func makeExecCall(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.exec.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }

  public func makeLeaveGroupCall(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.leaveGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Group_V1_MsgAsyncClientProtocol {
  public func createGroup(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgCreateGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  public func updateGroupMembers(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupMembersResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? []
    )
  }

  public func updateGroupAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? []
    )
  }

  public func updateGroupMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? []
    )
  }

  public func createGroupPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgCreateGroupPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupPolicyInterceptors() ?? []
    )
  }

  public func createGroupWithPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupWithPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupWithPolicyInterceptors() ?? []
    )
  }

  public func updateGroupPolicyAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyAdminInterceptors() ?? []
    )
  }

  public func updateGroupPolicyDecisionPolicy(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyDecisionPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyDecisionPolicyInterceptors() ?? []
    )
  }

  public func updateGroupPolicyMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyMetadataInterceptors() ?? []
    )
  }

  public func submitProposal(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgSubmitProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.submitProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? []
    )
  }

  public func withdrawProposal(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgWithdrawProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.withdrawProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawProposalInterceptors() ?? []
    )
  }

  public func vote(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgVoteResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  public func exec(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgExecResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.exec.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }

  public func leaveGroup(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgLeaveGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.leaveGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Group_V1_MsgAsyncClient: Cosmos_Group_V1_MsgAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'createGroup'.
  func makeCreateGroupInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupMembers'.
  func makeUpdateGroupMembersInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupAdmin'.
  func makeUpdateGroupAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupMetadata'.
  func makeUpdateGroupMetadataInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'createGroupPolicy'.
  func makeCreateGroupPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'createGroupWithPolicy'.
  func makeCreateGroupWithPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupPolicyAdmin'.
  func makeUpdateGroupPolicyAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupPolicyDecisionPolicy'.
  func makeUpdateGroupPolicyDecisionPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupPolicyMetadata'.
  func makeUpdateGroupPolicyMetadataInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'submitProposal'.
  func makeSubmitProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawProposal'.
  func makeWithdrawProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'vote'.
  func makeVoteInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'exec'.
  func makeExecInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse>]

  /// - Returns: Interceptors to use when invoking 'leaveGroup'.
  func makeLeaveGroupInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse>]
}

public enum Cosmos_Group_V1_MsgClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "cosmos.group.v1.Msg",
    methods: [
      Cosmos_Group_V1_MsgClientMetadata.Methods.createGroup,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMembers,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupAdmin,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMetadata,
      Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupPolicy,
      Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupWithPolicy,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyAdmin,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyDecisionPolicy,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyMetadata,
      Cosmos_Group_V1_MsgClientMetadata.Methods.submitProposal,
      Cosmos_Group_V1_MsgClientMetadata.Methods.withdrawProposal,
      Cosmos_Group_V1_MsgClientMetadata.Methods.vote,
      Cosmos_Group_V1_MsgClientMetadata.Methods.exec,
      Cosmos_Group_V1_MsgClientMetadata.Methods.leaveGroup,
    ]
  )

  public enum Methods {
    public static let createGroup = GRPCMethodDescriptor(
      name: "CreateGroup",
      path: "/cosmos.group.v1.Msg/CreateGroup",
      type: GRPCCallType.unary
    )

    public static let updateGroupMembers = GRPCMethodDescriptor(
      name: "UpdateGroupMembers",
      path: "/cosmos.group.v1.Msg/UpdateGroupMembers",
      type: GRPCCallType.unary
    )

    public static let updateGroupAdmin = GRPCMethodDescriptor(
      name: "UpdateGroupAdmin",
      path: "/cosmos.group.v1.Msg/UpdateGroupAdmin",
      type: GRPCCallType.unary
    )

    public static let updateGroupMetadata = GRPCMethodDescriptor(
      name: "UpdateGroupMetadata",
      path: "/cosmos.group.v1.Msg/UpdateGroupMetadata",
      type: GRPCCallType.unary
    )

    public static let createGroupPolicy = GRPCMethodDescriptor(
      name: "CreateGroupPolicy",
      path: "/cosmos.group.v1.Msg/CreateGroupPolicy",
      type: GRPCCallType.unary
    )

    public static let createGroupWithPolicy = GRPCMethodDescriptor(
      name: "CreateGroupWithPolicy",
      path: "/cosmos.group.v1.Msg/CreateGroupWithPolicy",
      type: GRPCCallType.unary
    )

    public static let updateGroupPolicyAdmin = GRPCMethodDescriptor(
      name: "UpdateGroupPolicyAdmin",
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyAdmin",
      type: GRPCCallType.unary
    )

    public static let updateGroupPolicyDecisionPolicy = GRPCMethodDescriptor(
      name: "UpdateGroupPolicyDecisionPolicy",
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyDecisionPolicy",
      type: GRPCCallType.unary
    )

    public static let updateGroupPolicyMetadata = GRPCMethodDescriptor(
      name: "UpdateGroupPolicyMetadata",
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyMetadata",
      type: GRPCCallType.unary
    )

    public static let submitProposal = GRPCMethodDescriptor(
      name: "SubmitProposal",
      path: "/cosmos.group.v1.Msg/SubmitProposal",
      type: GRPCCallType.unary
    )

    public static let withdrawProposal = GRPCMethodDescriptor(
      name: "WithdrawProposal",
      path: "/cosmos.group.v1.Msg/WithdrawProposal",
      type: GRPCCallType.unary
    )

    public static let vote = GRPCMethodDescriptor(
      name: "Vote",
      path: "/cosmos.group.v1.Msg/Vote",
      type: GRPCCallType.unary
    )

    public static let exec = GRPCMethodDescriptor(
      name: "Exec",
      path: "/cosmos.group.v1.Msg/Exec",
      type: GRPCCallType.unary
    )

    public static let leaveGroup = GRPCMethodDescriptor(
      name: "LeaveGroup",
      path: "/cosmos.group.v1.Msg/LeaveGroup",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Group_V1_MsgTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Group_V1_MsgTestClient: Cosmos_Group_V1_MsgClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the CreateGroup RPC. This must be called
  /// before calling 'createGroup'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCreateGroupResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgCreateGroup>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroup.path, requestHandler: requestHandler)
  }

  public func enqueueCreateGroupResponse(
    _ response: Cosmos_Group_V1_MsgCreateGroupResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgCreateGroup>) -> () = { _ in }
  ) {
    let stream = self.makeCreateGroupResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateGroup'
  public var hasCreateGroupResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroup.path)
  }

  /// Make a unary response for the UpdateGroupMembers RPC. This must be called
  /// before calling 'updateGroupMembers'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpdateGroupMembersResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupMembers>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMembers.path, requestHandler: requestHandler)
  }

  public func enqueueUpdateGroupMembersResponse(
    _ response: Cosmos_Group_V1_MsgUpdateGroupMembersResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupMembers>) -> () = { _ in }
  ) {
    let stream = self.makeUpdateGroupMembersResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateGroupMembers'
  public var hasUpdateGroupMembersResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMembers.path)
  }

  /// Make a unary response for the UpdateGroupAdmin RPC. This must be called
  /// before calling 'updateGroupAdmin'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpdateGroupAdminResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupAdmin>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupAdmin.path, requestHandler: requestHandler)
  }

  public func enqueueUpdateGroupAdminResponse(
    _ response: Cosmos_Group_V1_MsgUpdateGroupAdminResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupAdmin>) -> () = { _ in }
  ) {
    let stream = self.makeUpdateGroupAdminResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateGroupAdmin'
  public var hasUpdateGroupAdminResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupAdmin.path)
  }

  /// Make a unary response for the UpdateGroupMetadata RPC. This must be called
  /// before calling 'updateGroupMetadata'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpdateGroupMetadataResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupMetadata>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMetadata.path, requestHandler: requestHandler)
  }

  public func enqueueUpdateGroupMetadataResponse(
    _ response: Cosmos_Group_V1_MsgUpdateGroupMetadataResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupMetadata>) -> () = { _ in }
  ) {
    let stream = self.makeUpdateGroupMetadataResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateGroupMetadata'
  public var hasUpdateGroupMetadataResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMetadata.path)
  }

  /// Make a unary response for the CreateGroupPolicy RPC. This must be called
  /// before calling 'createGroupPolicy'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCreateGroupPolicyResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgCreateGroupPolicy>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupPolicy.path, requestHandler: requestHandler)
  }

  public func enqueueCreateGroupPolicyResponse(
    _ response: Cosmos_Group_V1_MsgCreateGroupPolicyResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgCreateGroupPolicy>) -> () = { _ in }
  ) {
    let stream = self.makeCreateGroupPolicyResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateGroupPolicy'
  public var hasCreateGroupPolicyResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupPolicy.path)
  }

  /// Make a unary response for the CreateGroupWithPolicy RPC. This must be called
  /// before calling 'createGroupWithPolicy'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCreateGroupWithPolicyResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgCreateGroupWithPolicy>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupWithPolicy.path, requestHandler: requestHandler)
  }

  public func enqueueCreateGroupWithPolicyResponse(
    _ response: Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgCreateGroupWithPolicy>) -> () = { _ in }
  ) {
    let stream = self.makeCreateGroupWithPolicyResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateGroupWithPolicy'
  public var hasCreateGroupWithPolicyResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupWithPolicy.path)
  }

  /// Make a unary response for the UpdateGroupPolicyAdmin RPC. This must be called
  /// before calling 'updateGroupPolicyAdmin'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpdateGroupPolicyAdminResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyAdmin.path, requestHandler: requestHandler)
  }

  public func enqueueUpdateGroupPolicyAdminResponse(
    _ response: Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin>) -> () = { _ in }
  ) {
    let stream = self.makeUpdateGroupPolicyAdminResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateGroupPolicyAdmin'
  public var hasUpdateGroupPolicyAdminResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyAdmin.path)
  }

  /// Make a unary response for the UpdateGroupPolicyDecisionPolicy RPC. This must be called
  /// before calling 'updateGroupPolicyDecisionPolicy'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpdateGroupPolicyDecisionPolicyResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyDecisionPolicy.path, requestHandler: requestHandler)
  }

  public func enqueueUpdateGroupPolicyDecisionPolicyResponse(
    _ response: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy>) -> () = { _ in }
  ) {
    let stream = self.makeUpdateGroupPolicyDecisionPolicyResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateGroupPolicyDecisionPolicy'
  public var hasUpdateGroupPolicyDecisionPolicyResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyDecisionPolicy.path)
  }

  /// Make a unary response for the UpdateGroupPolicyMetadata RPC. This must be called
  /// before calling 'updateGroupPolicyMetadata'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpdateGroupPolicyMetadataResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyMetadata.path, requestHandler: requestHandler)
  }

  public func enqueueUpdateGroupPolicyMetadataResponse(
    _ response: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata>) -> () = { _ in }
  ) {
    let stream = self.makeUpdateGroupPolicyMetadataResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateGroupPolicyMetadata'
  public var hasUpdateGroupPolicyMetadataResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyMetadata.path)
  }

  /// Make a unary response for the SubmitProposal RPC. This must be called
  /// before calling 'submitProposal'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSubmitProposalResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgSubmitProposal>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.submitProposal.path, requestHandler: requestHandler)
  }

  public func enqueueSubmitProposalResponse(
    _ response: Cosmos_Group_V1_MsgSubmitProposalResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgSubmitProposal>) -> () = { _ in }
  ) {
    let stream = self.makeSubmitProposalResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SubmitProposal'
  public var hasSubmitProposalResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.submitProposal.path)
  }

  /// Make a unary response for the WithdrawProposal RPC. This must be called
  /// before calling 'withdrawProposal'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeWithdrawProposalResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgWithdrawProposal>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.withdrawProposal.path, requestHandler: requestHandler)
  }

  public func enqueueWithdrawProposalResponse(
    _ response: Cosmos_Group_V1_MsgWithdrawProposalResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgWithdrawProposal>) -> () = { _ in }
  ) {
    let stream = self.makeWithdrawProposalResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'WithdrawProposal'
  public var hasWithdrawProposalResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.withdrawProposal.path)
  }

  /// Make a unary response for the Vote RPC. This must be called
  /// before calling 'vote'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeVoteResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgVote>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.vote.path, requestHandler: requestHandler)
  }

  public func enqueueVoteResponse(
    _ response: Cosmos_Group_V1_MsgVoteResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgVote>) -> () = { _ in }
  ) {
    let stream = self.makeVoteResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Vote'
  public var hasVoteResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.vote.path)
  }

  /// Make a unary response for the Exec RPC. This must be called
  /// before calling 'exec'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeExecResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgExec>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.exec.path, requestHandler: requestHandler)
  }

  public func enqueueExecResponse(
    _ response: Cosmos_Group_V1_MsgExecResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgExec>) -> () = { _ in }
  ) {
    let stream = self.makeExecResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Exec'
  public var hasExecResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.exec.path)
  }

  /// Make a unary response for the LeaveGroup RPC. This must be called
  /// before calling 'leaveGroup'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeLeaveGroupResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgLeaveGroup>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Group_V1_MsgClientMetadata.Methods.leaveGroup.path, requestHandler: requestHandler)
  }

  public func enqueueLeaveGroupResponse(
    _ response: Cosmos_Group_V1_MsgLeaveGroupResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Group_V1_MsgLeaveGroup>) -> () = { _ in }
  ) {
    let stream = self.makeLeaveGroupResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'LeaveGroup'
  public var hasLeaveGroupResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Group_V1_MsgClientMetadata.Methods.leaveGroup.path)
  }
}

