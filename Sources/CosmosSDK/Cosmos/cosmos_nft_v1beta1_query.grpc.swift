//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/nft/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Cosmos_Nft_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Nft_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func balance(
    _ request: Cosmos_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryBalanceRequest, Cosmos_Nft_V1beta1_QueryBalanceResponse>

  func owner(
    _ request: Cosmos_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryOwnerRequest, Cosmos_Nft_V1beta1_QueryOwnerResponse>

  func supply(
    _ request: Cosmos_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QuerySupplyRequest, Cosmos_Nft_V1beta1_QuerySupplyResponse>

  func nFTs(
    _ request: Cosmos_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryNFTsRequest, Cosmos_Nft_V1beta1_QueryNFTsResponse>

  func nFT(
    _ request: Cosmos_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryNFTRequest, Cosmos_Nft_V1beta1_QueryNFTResponse>

  func `class`(
    _ request: Cosmos_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryClassRequest, Cosmos_Nft_V1beta1_QueryClassResponse>

  func classes(
    _ request: Cosmos_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryClassesRequest, Cosmos_Nft_V1beta1_QueryClassesResponse>
}

extension Cosmos_Nft_V1beta1_QueryClientProtocol {
  public var serviceName: String {
    return "cosmos.nft.v1beta1.Query"
  }

  /// Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
  ///
  /// - Parameters:
  ///   - request: Request to send to Balance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func balance(
    _ request: Cosmos_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryBalanceRequest, Cosmos_Nft_V1beta1_QueryBalanceResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  /// Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
  ///
  /// - Parameters:
  ///   - request: Request to send to Owner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func owner(
    _ request: Cosmos_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryOwnerRequest, Cosmos_Nft_V1beta1_QueryOwnerResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  /// Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
  ///
  /// - Parameters:
  ///   - request: Request to send to Supply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func supply(
    _ request: Cosmos_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QuerySupplyRequest, Cosmos_Nft_V1beta1_QuerySupplyResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  /// NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
  /// ERC721Enumerable
  ///
  /// - Parameters:
  ///   - request: Request to send to NFTs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func nFTs(
    _ request: Cosmos_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryNFTsRequest, Cosmos_Nft_V1beta1_QueryNFTsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTsInterceptors() ?? []
    )
  }

  /// NFT queries an NFT based on its class and id.
  ///
  /// - Parameters:
  ///   - request: Request to send to NFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func nFT(
    _ request: Cosmos_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryNFTRequest, Cosmos_Nft_V1beta1_QueryNFTResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTInterceptors() ?? []
    )
  }

  /// Class queries an NFT class based on its id
  ///
  /// - Parameters:
  ///   - request: Request to send to Class.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func `class`(
    _ request: Cosmos_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryClassRequest, Cosmos_Nft_V1beta1_QueryClassResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.`class`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInterceptors() ?? []
    )
  }

  /// Classes queries all NFT classes
  ///
  /// - Parameters:
  ///   - request: Request to send to Classes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func classes(
    _ request: Cosmos_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryClassesRequest, Cosmos_Nft_V1beta1_QueryClassesResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Nft_V1beta1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Nft_V1beta1_QueryNIOClient")
public final class Cosmos_Nft_V1beta1_QueryClient: Cosmos_Nft_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.nft.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Nft_V1beta1_QueryNIOClient: Cosmos_Nft_V1beta1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.nft.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Nft_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeBalanceCall(
    _ request: Cosmos_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryBalanceRequest, Cosmos_Nft_V1beta1_QueryBalanceResponse>

  func makeOwnerCall(
    _ request: Cosmos_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryOwnerRequest, Cosmos_Nft_V1beta1_QueryOwnerResponse>

  func makeSupplyCall(
    _ request: Cosmos_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QuerySupplyRequest, Cosmos_Nft_V1beta1_QuerySupplyResponse>

  func makeNftsCall(
    _ request: Cosmos_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryNFTsRequest, Cosmos_Nft_V1beta1_QueryNFTsResponse>

  func makeNftCall(
    _ request: Cosmos_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryNFTRequest, Cosmos_Nft_V1beta1_QueryNFTResponse>

  func makeClassCall(
    _ request: Cosmos_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryClassRequest, Cosmos_Nft_V1beta1_QueryClassResponse>

  func makeClassesCall(
    _ request: Cosmos_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryClassesRequest, Cosmos_Nft_V1beta1_QueryClassesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Nft_V1beta1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Nft_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeBalanceCall(
    _ request: Cosmos_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryBalanceRequest, Cosmos_Nft_V1beta1_QueryBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  public func makeOwnerCall(
    _ request: Cosmos_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryOwnerRequest, Cosmos_Nft_V1beta1_QueryOwnerResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  public func makeSupplyCall(
    _ request: Cosmos_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QuerySupplyRequest, Cosmos_Nft_V1beta1_QuerySupplyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  public func makeNftsCall(
    _ request: Cosmos_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryNFTsRequest, Cosmos_Nft_V1beta1_QueryNFTsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTsInterceptors() ?? []
    )
  }

  public func makeNftCall(
    _ request: Cosmos_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryNFTRequest, Cosmos_Nft_V1beta1_QueryNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTInterceptors() ?? []
    )
  }

  public func makeClassCall(
    _ request: Cosmos_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryClassRequest, Cosmos_Nft_V1beta1_QueryClassResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.`class`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInterceptors() ?? []
    )
  }

  public func makeClassesCall(
    _ request: Cosmos_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Nft_V1beta1_QueryClassesRequest, Cosmos_Nft_V1beta1_QueryClassesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Nft_V1beta1_QueryAsyncClientProtocol {
  public func balance(
    _ request: Cosmos_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Nft_V1beta1_QueryBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  public func owner(
    _ request: Cosmos_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Nft_V1beta1_QueryOwnerResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  public func supply(
    _ request: Cosmos_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Nft_V1beta1_QuerySupplyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  public func nFTs(
    _ request: Cosmos_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Nft_V1beta1_QueryNFTsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTsInterceptors() ?? []
    )
  }

  public func nFT(
    _ request: Cosmos_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Nft_V1beta1_QueryNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTInterceptors() ?? []
    )
  }

  public func `class`(
    _ request: Cosmos_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Nft_V1beta1_QueryClassResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.`class`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInterceptors() ?? []
    )
  }

  public func classes(
    _ request: Cosmos_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Nft_V1beta1_QueryClassesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Nft_V1beta1_QueryAsyncClient: Cosmos_Nft_V1beta1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'balance'.
  func makeBalanceInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryBalanceRequest, Cosmos_Nft_V1beta1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'owner'.
  func makeOwnerInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryOwnerRequest, Cosmos_Nft_V1beta1_QueryOwnerResponse>]

  /// - Returns: Interceptors to use when invoking 'supply'.
  func makeSupplyInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QuerySupplyRequest, Cosmos_Nft_V1beta1_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'nFTs'.
  func makeNFTsInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryNFTsRequest, Cosmos_Nft_V1beta1_QueryNFTsResponse>]

  /// - Returns: Interceptors to use when invoking 'nFT'.
  func makeNFTInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryNFTRequest, Cosmos_Nft_V1beta1_QueryNFTResponse>]

  /// - Returns: Interceptors to use when invoking '`class`'.
  func makeClassInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryClassRequest, Cosmos_Nft_V1beta1_QueryClassResponse>]

  /// - Returns: Interceptors to use when invoking 'classes'.
  func makeClassesInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryClassesRequest, Cosmos_Nft_V1beta1_QueryClassesResponse>]
}

public enum Cosmos_Nft_V1beta1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.nft.v1beta1.Query",
    methods: [
      Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.balance,
      Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.owner,
      Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.supply,
      Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFTs,
      Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFT,
      Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.`class`,
      Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.classes,
    ]
  )

  public enum Methods {
    public static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/cosmos.nft.v1beta1.Query/Balance",
      type: GRPCCallType.unary
    )

    public static let owner = GRPCMethodDescriptor(
      name: "Owner",
      path: "/cosmos.nft.v1beta1.Query/Owner",
      type: GRPCCallType.unary
    )

    public static let supply = GRPCMethodDescriptor(
      name: "Supply",
      path: "/cosmos.nft.v1beta1.Query/Supply",
      type: GRPCCallType.unary
    )

    public static let nFTs = GRPCMethodDescriptor(
      name: "NFTs",
      path: "/cosmos.nft.v1beta1.Query/NFTs",
      type: GRPCCallType.unary
    )

    public static let nFT = GRPCMethodDescriptor(
      name: "NFT",
      path: "/cosmos.nft.v1beta1.Query/NFT",
      type: GRPCCallType.unary
    )

    public static let `class` = GRPCMethodDescriptor(
      name: "Class",
      path: "/cosmos.nft.v1beta1.Query/Class",
      type: GRPCCallType.unary
    )

    public static let classes = GRPCMethodDescriptor(
      name: "Classes",
      path: "/cosmos.nft.v1beta1.Query/Classes",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Nft_V1beta1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Nft_V1beta1_QueryTestClient: Cosmos_Nft_V1beta1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Balance RPC. This must be called
  /// before calling 'balance'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeBalanceResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryBalanceRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Nft_V1beta1_QueryBalanceRequest, Cosmos_Nft_V1beta1_QueryBalanceResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.balance.path, requestHandler: requestHandler)
  }

  public func enqueueBalanceResponse(
    _ response: Cosmos_Nft_V1beta1_QueryBalanceResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryBalanceRequest>) -> () = { _ in }
  ) {
    let stream = self.makeBalanceResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Balance'
  public var hasBalanceResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.balance.path)
  }

  /// Make a unary response for the Owner RPC. This must be called
  /// before calling 'owner'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeOwnerResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryOwnerRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Nft_V1beta1_QueryOwnerRequest, Cosmos_Nft_V1beta1_QueryOwnerResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.owner.path, requestHandler: requestHandler)
  }

  public func enqueueOwnerResponse(
    _ response: Cosmos_Nft_V1beta1_QueryOwnerResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryOwnerRequest>) -> () = { _ in }
  ) {
    let stream = self.makeOwnerResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Owner'
  public var hasOwnerResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.owner.path)
  }

  /// Make a unary response for the Supply RPC. This must be called
  /// before calling 'supply'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSupplyResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QuerySupplyRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Nft_V1beta1_QuerySupplyRequest, Cosmos_Nft_V1beta1_QuerySupplyResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.supply.path, requestHandler: requestHandler)
  }

  public func enqueueSupplyResponse(
    _ response: Cosmos_Nft_V1beta1_QuerySupplyResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QuerySupplyRequest>) -> () = { _ in }
  ) {
    let stream = self.makeSupplyResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Supply'
  public var hasSupplyResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.supply.path)
  }

  /// Make a unary response for the NFTs RPC. This must be called
  /// before calling 'nFTs'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeNFTsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryNFTsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Nft_V1beta1_QueryNFTsRequest, Cosmos_Nft_V1beta1_QueryNFTsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFTs.path, requestHandler: requestHandler)
  }

  public func enqueueNFTsResponse(
    _ response: Cosmos_Nft_V1beta1_QueryNFTsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryNFTsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeNFTsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'NFTs'
  public var hasNFTsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFTs.path)
  }

  /// Make a unary response for the NFT RPC. This must be called
  /// before calling 'nFT'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeNFTResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryNFTRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Nft_V1beta1_QueryNFTRequest, Cosmos_Nft_V1beta1_QueryNFTResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFT.path, requestHandler: requestHandler)
  }

  public func enqueueNFTResponse(
    _ response: Cosmos_Nft_V1beta1_QueryNFTResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryNFTRequest>) -> () = { _ in }
  ) {
    let stream = self.makeNFTResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'NFT'
  public var hasNFTResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.nFT.path)
  }

  /// Make a unary response for the Class RPC. This must be called
  /// before calling '`class`'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeClassResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryClassRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Nft_V1beta1_QueryClassRequest, Cosmos_Nft_V1beta1_QueryClassResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.`class`.path, requestHandler: requestHandler)
  }

  public func enqueueClassResponse(
    _ response: Cosmos_Nft_V1beta1_QueryClassResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryClassRequest>) -> () = { _ in }
  ) {
    let stream = self.makeClassResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Class'
  public var hasClassResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.`class`.path)
  }

  /// Make a unary response for the Classes RPC. This must be called
  /// before calling 'classes'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeClassesResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryClassesRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Nft_V1beta1_QueryClassesRequest, Cosmos_Nft_V1beta1_QueryClassesResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.classes.path, requestHandler: requestHandler)
  }

  public func enqueueClassesResponse(
    _ response: Cosmos_Nft_V1beta1_QueryClassesResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Nft_V1beta1_QueryClassesRequest>) -> () = { _ in }
  ) {
    let stream = self.makeClassesResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Classes'
  public var hasClassesResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Nft_V1beta1_QueryClientMetadata.Methods.classes.path)
  }
}

