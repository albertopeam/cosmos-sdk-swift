//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/bank/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Cosmos_Bank_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Cosmos_Bank_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func balance(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse>

  func allBalances(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse>

  func spendableBalances(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse>

  func totalSupply(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>

  func supplyOf(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse>

  func params(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse>

  func denomMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>

  func denomsMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>

  func denomOwners(
    _ request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse>
}

extension Cosmos_Bank_V1beta1_QueryClientProtocol {
  public var serviceName: String {
    return "cosmos.bank.v1beta1.Query"
  }

  /// Balance queries the balance of a single coin for a single account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Balance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func balance(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  /// AllBalances queries the balance of all coins for a single account.
  ///
  /// - Parameters:
  ///   - request: Request to send to AllBalances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func allBalances(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.allBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllBalancesInterceptors() ?? []
    )
  }

  /// SpendableBalances queries the spenable balance of all coins for a single
  /// account.
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to SpendableBalances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func spendableBalances(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpendableBalancesInterceptors() ?? []
    )
  }

  /// TotalSupply queries the total supply of all coins.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalSupply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func totalSupply(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.totalSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? []
    )
  }

  /// SupplyOf queries the supply of a single coin.
  ///
  /// - Parameters:
  ///   - request: Request to send to SupplyOf.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func supplyOf(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.supplyOf.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyOfInterceptors() ?? []
    )
  }

  /// Params queries the parameters of x/bank module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func params(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// DenomsMetadata queries the client metadata of a given coin denomination.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func denomMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomMetadataInterceptors() ?? []
    )
  }

  /// DenomsMetadata queries the client metadata for all registered coin
  /// denominations.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomsMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func denomsMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomsMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsMetadataInterceptors() ?? []
    )
  }

  /// DenomOwners queries for all account addresses that own a particular token
  /// denomination.
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomOwners.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func denomOwners(
    _ request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomOwners.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomOwnersInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Cosmos_Bank_V1beta1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Cosmos_Bank_V1beta1_QueryNIOClient")
public final class Cosmos_Bank_V1beta1_QueryClient: Cosmos_Bank_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.bank.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cosmos_Bank_V1beta1_QueryNIOClient: Cosmos_Bank_V1beta1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.bank.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cosmos_Bank_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeBalanceCall(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse>

  func makeAllBalancesCall(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse>

  func makeSpendableBalancesCall(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse>

  func makeTotalSupplyCall(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>

  func makeSupplyOfCall(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse>

  func makeParamsCall(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse>

  func makeDenomMetadataCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>

  func makeDenomsMetadataCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>

  func makeDenomOwnersCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Bank_V1beta1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Bank_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeBalanceCall(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  public func makeAllBalancesCall(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.allBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllBalancesInterceptors() ?? []
    )
  }

  public func makeSpendableBalancesCall(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpendableBalancesInterceptors() ?? []
    )
  }

  public func makeTotalSupplyCall(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.totalSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? []
    )
  }

  public func makeSupplyOfCall(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.supplyOf.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyOfInterceptors() ?? []
    )
  }

  public func makeParamsCall(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func makeDenomMetadataCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomMetadataInterceptors() ?? []
    )
  }

  public func makeDenomsMetadataCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomsMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsMetadataInterceptors() ?? []
    )
  }

  public func makeDenomOwnersCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomOwners.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomOwnersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Bank_V1beta1_QueryAsyncClientProtocol {
  public func balance(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  public func allBalances(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryAllBalancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.allBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllBalancesInterceptors() ?? []
    )
  }

  public func spendableBalances(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpendableBalancesInterceptors() ?? []
    )
  }

  public func totalSupply(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryTotalSupplyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.totalSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? []
    )
  }

  public func supplyOf(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QuerySupplyOfResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.supplyOf.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyOfInterceptors() ?? []
    )
  }

  public func params(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  public func denomMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryDenomMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomMetadataInterceptors() ?? []
    )
  }

  public func denomsMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomsMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsMetadataInterceptors() ?? []
    )
  }

  public func denomOwners(
    _ request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryDenomOwnersResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomOwners.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomOwnersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cosmos_Bank_V1beta1_QueryAsyncClient: Cosmos_Bank_V1beta1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'balance'.
  func makeBalanceInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'allBalances'.
  func makeAllBalancesInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse>]

  /// - Returns: Interceptors to use when invoking 'spendableBalances'.
  func makeSpendableBalancesInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse>]

  /// - Returns: Interceptors to use when invoking 'totalSupply'.
  func makeTotalSupplyInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'supplyOf'.
  func makeSupplyOfInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'denomMetadata'.
  func makeDenomMetadataInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'denomsMetadata'.
  func makeDenomsMetadataInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'denomOwners'.
  func makeDenomOwnersInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse>]
}

public enum Cosmos_Bank_V1beta1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.bank.v1beta1.Query",
    methods: [
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.balance,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.allBalances,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalances,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.totalSupply,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.supplyOf,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.params,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomMetadata,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomsMetadata,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomOwners,
    ]
  )

  public enum Methods {
    public static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/cosmos.bank.v1beta1.Query/Balance",
      type: GRPCCallType.unary
    )

    public static let allBalances = GRPCMethodDescriptor(
      name: "AllBalances",
      path: "/cosmos.bank.v1beta1.Query/AllBalances",
      type: GRPCCallType.unary
    )

    public static let spendableBalances = GRPCMethodDescriptor(
      name: "SpendableBalances",
      path: "/cosmos.bank.v1beta1.Query/SpendableBalances",
      type: GRPCCallType.unary
    )

    public static let totalSupply = GRPCMethodDescriptor(
      name: "TotalSupply",
      path: "/cosmos.bank.v1beta1.Query/TotalSupply",
      type: GRPCCallType.unary
    )

    public static let supplyOf = GRPCMethodDescriptor(
      name: "SupplyOf",
      path: "/cosmos.bank.v1beta1.Query/SupplyOf",
      type: GRPCCallType.unary
    )

    public static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/cosmos.bank.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    public static let denomMetadata = GRPCMethodDescriptor(
      name: "DenomMetadata",
      path: "/cosmos.bank.v1beta1.Query/DenomMetadata",
      type: GRPCCallType.unary
    )

    public static let denomsMetadata = GRPCMethodDescriptor(
      name: "DenomsMetadata",
      path: "/cosmos.bank.v1beta1.Query/DenomsMetadata",
      type: GRPCCallType.unary
    )

    public static let denomOwners = GRPCMethodDescriptor(
      name: "DenomOwners",
      path: "/cosmos.bank.v1beta1.Query/DenomOwners",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Cosmos_Bank_V1beta1_QueryTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Cosmos_Bank_V1beta1_QueryTestClient: Cosmos_Bank_V1beta1_QueryClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Balance RPC. This must be called
  /// before calling 'balance'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeBalanceResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryBalanceRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.balance.path, requestHandler: requestHandler)
  }

  public func enqueueBalanceResponse(
    _ response: Cosmos_Bank_V1beta1_QueryBalanceResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryBalanceRequest>) -> () = { _ in }
  ) {
    let stream = self.makeBalanceResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Balance'
  public var hasBalanceResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.balance.path)
  }

  /// Make a unary response for the AllBalances RPC. This must be called
  /// before calling 'allBalances'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAllBalancesResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryAllBalancesRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.allBalances.path, requestHandler: requestHandler)
  }

  public func enqueueAllBalancesResponse(
    _ response: Cosmos_Bank_V1beta1_QueryAllBalancesResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryAllBalancesRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAllBalancesResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AllBalances'
  public var hasAllBalancesResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.allBalances.path)
  }

  /// Make a unary response for the SpendableBalances RPC. This must be called
  /// before calling 'spendableBalances'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSpendableBalancesResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalances.path, requestHandler: requestHandler)
  }

  public func enqueueSpendableBalancesResponse(
    _ response: Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest>) -> () = { _ in }
  ) {
    let stream = self.makeSpendableBalancesResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SpendableBalances'
  public var hasSpendableBalancesResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalances.path)
  }

  /// Make a unary response for the TotalSupply RPC. This must be called
  /// before calling 'totalSupply'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeTotalSupplyResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.totalSupply.path, requestHandler: requestHandler)
  }

  public func enqueueTotalSupplyResponse(
    _ response: Cosmos_Bank_V1beta1_QueryTotalSupplyResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest>) -> () = { _ in }
  ) {
    let stream = self.makeTotalSupplyResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TotalSupply'
  public var hasTotalSupplyResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.totalSupply.path)
  }

  /// Make a unary response for the SupplyOf RPC. This must be called
  /// before calling 'supplyOf'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSupplyOfResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QuerySupplyOfRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.supplyOf.path, requestHandler: requestHandler)
  }

  public func enqueueSupplyOfResponse(
    _ response: Cosmos_Bank_V1beta1_QuerySupplyOfResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QuerySupplyOfRequest>) -> () = { _ in }
  ) {
    let stream = self.makeSupplyOfResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SupplyOf'
  public var hasSupplyOfResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.supplyOf.path)
  }

  /// Make a unary response for the Params RPC. This must be called
  /// before calling 'params'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeParamsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryParamsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.params.path, requestHandler: requestHandler)
  }

  public func enqueueParamsResponse(
    _ response: Cosmos_Bank_V1beta1_QueryParamsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryParamsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeParamsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Params'
  public var hasParamsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.params.path)
  }

  /// Make a unary response for the DenomMetadata RPC. This must be called
  /// before calling 'denomMetadata'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDenomMetadataResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomMetadata.path, requestHandler: requestHandler)
  }

  public func enqueueDenomMetadataResponse(
    _ response: Cosmos_Bank_V1beta1_QueryDenomMetadataResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDenomMetadataResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DenomMetadata'
  public var hasDenomMetadataResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomMetadata.path)
  }

  /// Make a unary response for the DenomsMetadata RPC. This must be called
  /// before calling 'denomsMetadata'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDenomsMetadataResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomsMetadata.path, requestHandler: requestHandler)
  }

  public func enqueueDenomsMetadataResponse(
    _ response: Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDenomsMetadataResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DenomsMetadata'
  public var hasDenomsMetadataResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomsMetadata.path)
  }

  /// Make a unary response for the DenomOwners RPC. This must be called
  /// before calling 'denomOwners'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDenomOwnersResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomOwners.path, requestHandler: requestHandler)
  }

  public func enqueueDenomOwnersResponse(
    _ response: Cosmos_Bank_V1beta1_QueryDenomOwnersResponse,
    _ requestHandler: @escaping (FakeRequestPart<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDenomOwnersResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DenomOwners'
  public var hasDenomOwnersResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomOwners.path)
  }
}

