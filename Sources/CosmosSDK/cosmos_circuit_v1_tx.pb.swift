// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/circuit/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgAuthorizeCircuitBreaker defines the Msg/AuthorizeCircuitBreaker request type.
public struct Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// granter is the granter of the circuit breaker permissions and must have
  /// LEVEL_SUPER_ADMIN.
  public var granter: String = String()

  /// grantee is the account authorized with the provided permissions.
  public var grantee: String = String()

  /// permissions are the circuit breaker permissions that the grantee receives.
  /// These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can
  /// be specified to revoke all permissions.
  public var permissions: Cosmos_Circuit_V1_CircuitBreakerPermissions {
    get {return _permissions ?? Cosmos_Circuit_V1_CircuitBreakerPermissions()}
    set {_permissions = newValue}
  }
  /// Returns true if `permissions` has been explicitly set.
  public var hasPermissions: Bool {return self._permissions != nil}
  /// Clears the value of `permissions`. Subsequent reads from it will return its default value.
  public mutating func clearPermissions() {self._permissions = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _permissions: Cosmos_Circuit_V1_CircuitBreakerPermissions? = nil
}

/// MsgAuthorizeCircuitBreaker defines the Msg/AuthorizeCircuitBreaker response type.
public struct Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// CircuitBreakerPermissions are the permissions that an account has to trip
/// or reset the circuit breaker.
public struct Cosmos_Circuit_V1_CircuitBreakerPermissions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// level is the level of permissions granted to this account.
  public var level: Cosmos_Circuit_V1_CircuitBreakerPermissions.Level = .noneUnspecified

  /// limit_msg_types is used with LEVEL_SOME_MSGS to limit the lists of Msg type
  /// name that the account can pause. It is an error to use limit_msg_types with
  /// a level other than LEVEL_SOME_MSGS.
  public var limitMsgTypes: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Level is the permission level.
  public enum Level: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// LEVEL_NONE_UNSPECIFIED indicates that the account will have no circuit
    /// breaker permissions.
    case noneUnspecified // = 0

    /// LEVEL_SOME_MSGS indicates that the account will have permission to
    /// trip or reset the circuit breaker for some Msg type URLs. If this level
    /// is chosen, a non-empty list of Msg type URLs must be provided in
    /// limit_type_urls.
    case someMsgs // = 1

    /// LEVEL_ALL_MSGS indicates that the account can trip or reset the circuit
    /// breaker for Msg's of all type URLs.
    case allMsgs // = 2

    /// LEVEL_SUPER_ADMIN indicates that the account can take all circuit breaker
    /// actions and can grant permissions to other accounts.
    case superAdmin // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .noneUnspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .noneUnspecified
      case 1: self = .someMsgs
      case 2: self = .allMsgs
      case 3: self = .superAdmin
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .noneUnspecified: return 0
      case .someMsgs: return 1
      case .allMsgs: return 2
      case .superAdmin: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Cosmos_Circuit_V1_CircuitBreakerPermissions.Level: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cosmos_Circuit_V1_CircuitBreakerPermissions.Level] = [
    .noneUnspecified,
    .someMsgs,
    .allMsgs,
    .superAdmin,
  ]
}

#endif  // swift(>=4.2)

/// MsgTripCircuitBreaker defines the Msg/TripCircuitBreaker request type.
public struct Cosmos_Circuit_V1_MsgTripCircuitBreaker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the account authorized to trip the circuit breaker.
  public var authority: String = String()

  /// msg_type_urls specifies a list of type URLs to immediately stop processing.
  /// IF IT IS LEFT EMPTY, ALL MSG PROCESSING WILL STOP IMMEDIATELY.
  /// This value is validated against the authority's permissions and if the
  /// authority does not have permissions to trip the specified msg type URLs
  /// (or all URLs), the operation will fail.
  public var msgTypeUrls: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// MsgTripCircuitBreaker defines the Msg/TripCircuitBreaker response type.
public struct Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// MsgResetCircuitBreaker defines the Msg/ResetCircuitBreaker request type.
public struct Cosmos_Circuit_V1_MsgResetCircuitBreaker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the account authorized to trip or reset the circuit breaker.
  public var authority: String = String()

  /// msg_type_urls specifies a list of Msg type URLs to resume processing. If
  /// it is left empty all Msg processing for type URLs that the account is
  /// authorized to trip will resume.
  public var msgTypeUrls: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// MsgResetCircuitBreakerResponse defines the Msg/ResetCircuitBreaker response type.
public struct Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker: @unchecked Sendable {}
extension Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse: @unchecked Sendable {}
extension Cosmos_Circuit_V1_CircuitBreakerPermissions: @unchecked Sendable {}
extension Cosmos_Circuit_V1_CircuitBreakerPermissions.Level: @unchecked Sendable {}
extension Cosmos_Circuit_V1_MsgTripCircuitBreaker: @unchecked Sendable {}
extension Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse: @unchecked Sendable {}
extension Cosmos_Circuit_V1_MsgResetCircuitBreaker: @unchecked Sendable {}
extension Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.circuit.v1"

extension Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgAuthorizeCircuitBreaker"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "granter"),
    2: .same(proto: "grantee"),
    3: .same(proto: "permissions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.granter) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.grantee) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._permissions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.granter.isEmpty {
      try visitor.visitSingularStringField(value: self.granter, fieldNumber: 1)
    }
    if !self.grantee.isEmpty {
      try visitor.visitSingularStringField(value: self.grantee, fieldNumber: 2)
    }
    try { if let v = self._permissions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker, rhs: Cosmos_Circuit_V1_MsgAuthorizeCircuitBreaker) -> Bool {
    if lhs.granter != rhs.granter {return false}
    if lhs.grantee != rhs.grantee {return false}
    if lhs._permissions != rhs._permissions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgAuthorizeCircuitBreakerResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse, rhs: Cosmos_Circuit_V1_MsgAuthorizeCircuitBreakerResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Circuit_V1_CircuitBreakerPermissions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CircuitBreakerPermissions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "level"),
    2: .standard(proto: "limit_msg_types"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.level) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.limitMsgTypes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.level != .noneUnspecified {
      try visitor.visitSingularEnumField(value: self.level, fieldNumber: 1)
    }
    if !self.limitMsgTypes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.limitMsgTypes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Circuit_V1_CircuitBreakerPermissions, rhs: Cosmos_Circuit_V1_CircuitBreakerPermissions) -> Bool {
    if lhs.level != rhs.level {return false}
    if lhs.limitMsgTypes != rhs.limitMsgTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Circuit_V1_CircuitBreakerPermissions.Level: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LEVEL_NONE_UNSPECIFIED"),
    1: .same(proto: "LEVEL_SOME_MSGS"),
    2: .same(proto: "LEVEL_ALL_MSGS"),
    3: .same(proto: "LEVEL_SUPER_ADMIN"),
  ]
}

extension Cosmos_Circuit_V1_MsgTripCircuitBreaker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgTripCircuitBreaker"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .standard(proto: "msg_type_urls"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.msgTypeUrls) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    if !self.msgTypeUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.msgTypeUrls, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Circuit_V1_MsgTripCircuitBreaker, rhs: Cosmos_Circuit_V1_MsgTripCircuitBreaker) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.msgTypeUrls != rhs.msgTypeUrls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgTripCircuitBreakerResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse, rhs: Cosmos_Circuit_V1_MsgTripCircuitBreakerResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Circuit_V1_MsgResetCircuitBreaker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgResetCircuitBreaker"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    3: .standard(proto: "msg_type_urls"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.msgTypeUrls) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    if !self.msgTypeUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.msgTypeUrls, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Circuit_V1_MsgResetCircuitBreaker, rhs: Cosmos_Circuit_V1_MsgResetCircuitBreaker) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.msgTypeUrls != rhs.msgTypeUrls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MsgResetCircuitBreakerResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse, rhs: Cosmos_Circuit_V1_MsgResetCircuitBreakerResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
